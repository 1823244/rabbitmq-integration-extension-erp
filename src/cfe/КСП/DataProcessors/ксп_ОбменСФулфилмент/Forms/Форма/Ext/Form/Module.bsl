&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиФФ = ОбменСФулфилментСервер.ПолучитьНастройкиФулфилментДляТекущейБазы();
	КаталогЛогированияОбмена = НастройкиФФ.КаталогЛогированияОбмена;
		
КонецПроцедуры



&НаСервере
функция ЗапускФоновогоЗадания(ИмяПроцедуры, ПараметрыВызова,ИмяЭлементаФотмы)
	
	ПозТочка 	= Найти(ИмяПроцедуры,".");
	ИмяМетода 	= Сред(ИмяПроцедуры,ПозТочка+1);
	Ключ 		= СтрЗаменить(ИмяПроцедуры,".","_");
	
	АктивныеФоновыеЗадания  = ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Состояние",СостояниеФоновогоЗадания.Активно));
	
	Для каждого АктивноеЗадание Из АктивныеФоновыеЗадания Цикл
		Если АктивноеЗадание.Ключ = Ключ Тогда
			Сообщить("Фоновое задание с ключем ["+АктивноеЗадание.Наименование+"] уже выполниется.",СтатусСообщения.Внимание);
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяПроцедуры,ПараметрыВызова, Ключ, ИмяМетода);
	Исключение
		Сообщить(СтрШаблон("Не удалось запустить фоновое задание [%1] Причина: %2", ИмяМетода, ОписаниеОшибки()));
		Возврат ложь;
	КонецПопытки;
	
	// блокируем на время выполнения
	Элементы[ИмяЭлементаФотмы].Доступность = ложь;
	
	Стр = СписокАктивныхФоновыхЗаданий.Добавить();
	Стр.Имя 					=  ИмяМетода;
	Стр.УникальныйИдентификатор =  ФоновоеЗадание.УникальныйИдентификатор;
	Стр.ИмяЭлементаФотмы 		=  ИмяЭлементаФотмы;

	Возврат Истина;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПроверкаАктивностиФоновыхЗаданий()

	МаксИндекс = СписокАктивныхФоновыхЗаданий.Количество()-1;
	Для Инд = 0 По МаксИндекс Цикл
		ОбратныйИндекс = МаксИндекс-Инд;
		СтрФоновое = СписокАктивныхФоновыхЗаданий[ОбратныйИндекс];
		//начало - Елисеев :: 01.12.2023
		Отбор = Новый Структура("УникальныйИдентификатор",СтрФоновое.УникальныйИдентификатор);
		//МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		МассивФоновыхЗаданий = НайтиЗадания(Отбор);
		//конец - Елисеев :: 01.12.2023
		
		УдалитьФоновоеЗаданиеИзСписка = ложь;
		
		Если МассивФоновыхЗаданий.Количество()>0 Тогда
			ТекФоновоеЗадание = МассивФоновыхЗаданий[0];
			
			СообщенияПользователя = ТекФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
			Для каждого Сообщение Из СообщенияПользователя Цикл
				Сообщение.Сообщить();
			КонецЦикла;

			//начало - Елисеев :: 01.12.2023
			//Если ТекФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			Если НЕ ЗаданиеАктивно(ТекФоновоеЗадание) Тогда
			//конец - Елисеев :: 01.12.2023
				УдалитьФоновоеЗаданиеИзСписка = истина;
				Сообщить(СтрШаблон("Завершили выполнение [%1], статус завершения : %2",СтрФоновое.Имя,ВРег(ТекФоновоеЗадание.Состояние)));
				
				Если СтрФоновое.ИмяЭлементаФотмы = "ЗагрузкаОстатков" Тогда
					Элементы.СостояниеЗагрузки.Обновить();
				Иначе
					Элементы.СостояниеВыгрузки.Обновить();
				КонецЕсли;
			КонецЕсли;
		иначе  
			Сообщить(СтрШаблон("Фоновое задание [%1] не найдено.",СтрФоновое.Имя));
			УдалитьФоновоеЗаданиеИзСписка = истина;
		КонецЕсли;
		
		Если УдалитьФоновоеЗаданиеИзСписка Тогда
			Элементы[СтрФоновое.ИмяЭлементаФотмы].Доступность = Истина;
			СписокАктивныхФоновыхЗаданий.Удалить(СтрФоновое);
		КонецЕсли;
	КонецЦикла;

	Если СписокАктивныхФоновыхЗаданий.Количество()>0 Тогда
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
КонецПроцедуры // ()


&НаСервере
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЗадания(Отбор)
		
	Возврат РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
КонецФункции


&НаСервереБезКонтекста
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаданиеАктивно(ФоновоеЗадание)
		
	Возврат ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции




&НаКлиенте
Процедура ВыгрузкаНоменклатуры(Команда)
	Если ПеремещениеТоваров.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выборан документ ""Перемещение товаров""!",30,"Описание ошибки.");
		Возврат;
	КонецЕсли;
	
	
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(ПеремещениеТоваров);
	ПараметрыВызова.Добавить(Истина);
	
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ВыгрузитьНоменклатуру", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСписокФайловЛогов()

	СписокЛогФайлов.Очистить();
	СодержимоеЛогФайла = "";
	
	Если ПустаяСтрока(КаталогЛогированияОбмена) Тогда
		Сообщить("Не указан путь к каталогу логирования обмена !",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Попытка
		НайденыеФайлы = НайтиФайлы(КаталогЛогированияОбмена,"*.txt", ложь);
	Исключение
		Сообщить(СтрШаблон("Ошибка поиска файлов в каталоге : %1",КаталогЛогированияОбмена),СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	Для каждого ЛогФайл Из НайденыеФайлы Цикл
		СписокЛогФайлов.Добавить(ЛогФайл.ИмяБезРасширения,ЛогФайл.Имя);
	КонецЦикла;
	СписокЛогФайлов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	
	Если СписокЛогФайлов.Количество()>0 Тогда
		ПервыйЭлемент							=  СписокЛогФайлов.Получить(0);
		ОбновитьСодержаениЛогФайла(ПервыйЭлемент.Представление);
	КонецЕсли;

КонецПроцедуры // ОбновитьСписокФайловЛогов()

&НаСервере
Процедура ОбновитьСодержаениЛогФайла(ИмяФайла)
	
	СодержимоеЛогФайла = "";
	
	ПутьКФайлу = КаталогЛогированияОбмена+ИмяФайла;
	
	Попытка
		ЧтениеТекстаЛог = Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.UTF8,,,Ложь);
	Исключение
		Сообщить(СтрШаблон("Ошибка чтения файла [%1] Причина: %2",ИмяФайла,ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	СодержимоеЛогФайла = ЧтениеТекстаЛог.Прочитать();          
	
КонецПроцедуры 



&НаКлиенте
Процедура ВыгрузкаАнонсаПоставки(Команда)
	
	Если ЗаказНаПеремещение.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выборан документ ""Заказ на перемещение""!",30,"Описание ошибки.");
		Возврат;
	КонецЕсли;
	
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(ЗаказНаПеремещение);
	ПараметрыВызова.Добавить(Истина);
	
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.имя = "ГруппаЛогирование" Тогда
		ОбновитьСписокФайловЛогов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	ОбновитьСписокФайловЛогов();
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогированияОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	// Вставить содержимое обработчика.
	Каталог = новый Файл(КаталогЛогированияОбмена);
	Если не Каталог.Существует() Тогда
		Сообщить(СтрШаблон("Каталог [%1] не существует!",КаталогЛогированияОбмена),СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// открываем каталог
	Попытка
		ЗапуститьПриложение(КаталогЛогированияОбмена);
	Исключение
		Сообщить(СтрШаблон("Не удалось открыть каталог : %1",КаталогЛогированияОбмена),СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛогФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если элементы.СписокЛогФайлов.ТекущиеДанные<> Неопределено Тогда
		ИмяФайла = элементы.СписокЛогФайлов.ТекущиеДанные.Представление;
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ОбновитьСодержаениЛогФайла(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыгрузки(Команда)
	
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(Истина);  // выводить в консоль сообщения лога.

	// Вставить содержимое обработчика.
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ПроверкаСтатусаВыгруженныхФайлов", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОстатков(Команда)
	// Вставить содержимое обработчика.
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(Истина);  // выводить в консоль сообщения лога.

	// Вставить содержимое обработчика.
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ЗагрузкаОстатков", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхКМ(Команда)
	// Вставить содержимое обработчика.
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(Истина);  // выводить в консоль сообщения лога.

	// Вставить содержимое обработчика.
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ЗагрузкаДанныхКМ", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаОтчетаКомиссионераНаСервере()
	// Вставить содержимое обработчика.
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОтчетаКомиссионера(Команда)
	
	
	//	ИмяФайла = "Отчет по выбытию-детализация ЭЛИС.xlsx";
	//ПутьКФайлу = "C:\Temp\ОК\";
	//ПолныйПутьКФайлу = ПутьКФайлу+ИмяФайла;
	//
	//

	//// создаём и подготавливаем обработку ЧтениеИзXLSфайла
	//Обработка = Обработки.ЧтениеИзXLSфайла.Создать();
	//Обработка.ИмяОбъектаВладельца	= "ОтчетКомиссионераОПродажах";
	//Обработка.ИмяФайла				= ПолныйПутьКФайлу;
	//
	//	
	////Если Кнопка.Имя="ДействиеЛегкийАссортимент" Тогда
	////	Обработка.ИмяФайла				= "D:\temp\Легкий.xls";
	////Иначе
	////	Обработка.ИмяФайла				= "D:\temp\Верхний.xls";
	////КонецЕсли;
	//Обработка.НомерПервойСтроки		= 7;//8;
	//Обработка.КоличествоПустыхСтрок	= 1;
	//
	//// получаем список размеров в таблице (xls файле)
	//Обработка.Инициализировать();
	//Состояние("Чтение шапки из файла эксель");
	//
	//
	//СписокШапки = новый СписокЗначений;
	////Читаем шапку 
	//Если Обработка.ПрочитатьСтроку(6,5,30) Тогда	// прочитаем из xls файла строку (шапку), где перечисленны размеры    Обработка.ПрочитатьСтроку(7,10,40)
	//	Состояние("Шапка прочитана");
	//	Если ТипЗнч(Обработка.Результат)=Тип("СписокЗначений") Тогда
	//		Для Каждого ТекЭлемент Из Обработка.Результат Цикл
	//			СписокШапки.Добавить(ТекЭлемент.Значение);
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли; 
	//
	//
	//Обработка.РазИнициализировать();
	//
	//СтруктураПолучаемыхДанных	= Обработка.СтруктураПолучаемыхДанных;
	//СтруктураПолучаемыхДанных.Очистить();

	//
	//нс = СтруктураПолучаемыхДанных.Добавить();
	//нс.Признак			= Истина;
	//нс.Наименование		= "Штрихкод";
	//нс.ТипЗначенияСтр	= "Строка";
	//нс.НомерКолонки		= 19;
	//
	//нс = СтруктураПолучаемыхДанных.Добавить();
	//нс.Признак			= Истина;
	//нс.Наименование		= "Количество";
	//нс.ТипЗначенияСтр	= "Число";
	//нс.НомерКолонки		= 21;
	//
	//нс = СтруктураПолучаемыхДанных.Добавить();
	//нс.Признак			= Истина;
	//нс.Наименование		= "СтавкаНДС";
	//нс.ТипЗначенияСтр	= "Число";
	//нс.НомерКолонки		= 26;
	//
	//нс = СтруктураПолучаемыхДанных.Добавить();
	//нс.Признак			= Истина;
	//нс.Наименование		= "СуммаНДС";
	//нс.ТипЗначенияСтр	= "Число";
	//нс.НомерКолонки		= 28;
	//
	//нс = СтруктураПолучаемыхДанных.Добавить();
	//нс.Признак			= Истина;
	//нс.Наименование		= "Сумма";
	//нс.ТипЗначенияСтр	= "Число";
	//нс.НомерКолонки		= 30;
	//
	//Обработка.Инициализировать();
	//Состояние("Чтение таблицы из файла эксель");
	//Обработка.ПрочитатьДанные();
	//Обработка.РазИнициализировать();

	//Состояние("Обработка прочитанных из эксель данных");
	//ТабРез = Обработка.Результат.Скопировать();
	//
	//// типизируем колонку штрихкод для запроса 
	//ВхТаб = новый ТаблицаЗначений;
	//ВхТаб.Колонки.Добавить("Штрихкод",Новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(13,ДопустимаяДлина.Переменная)));
	//
	//// Удаляем строки с пустым штрихкодом
	//МаксИнд = ТабРез.Количество()-1;
	//Для Инд = 0 По МаксИнд Цикл
	//	СтрТаб =  ТабРез[МаксИнд-Инд];
	//	Если ПустаяСтрока(СтрТаб.Штрихкод) Тогда
	//		ТабРез.Удалить(СтрТаб);
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	СтрВх  = ВхТаб.Добавить();
	//	СтрВх.Штрихкод = СтрТаб.Штрихкод;
	//	
	//КонецЦикла;
	//
	//
	//ТабРез.Колонки.Добавить("Номенклатура",					новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТабРез.Колонки.Добавить("ХарактеристикаНоменклатуры",	новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//
	//
	//// ищем номенклатуру 
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ВхТаб.Штрихкод КАК Штрихкод
	//	|ПОМЕСТИТЬ ВтШтрихкод
	//	|ИЗ
	//	|	&ВхТаб КАК ВхТаб
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Штрихкод
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	Штрихкоды.Штрихкод,
	//	|	Штрихкоды.Владелец КАК Номенклатура,
	//	|	Штрихкоды.ХарактеристикаНоменклатуры,
	//	|	Штрихкоды.ЕдиницаИзмерения
	//	|ИЗ
	//	|	ВтШтрихкод КАК ВтШтрихкод
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	//	|		ПО ВтШтрихкод.Штрихкод = Штрихкоды.Штрихкод
	//	|ГДЕ
	//	|	Штрихкоды.Штрихкод <> """"
	//	|	И Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)";
	//
	//Запрос.УстановитьПараметр("ВхТаб", ВхТаб);
	//
	//ТабШтрихкоды = Запрос.Выполнить().Выгрузить();
	//
	//Для каждого СтрШтриход Из ТабШтрихкоды Цикл
	//	НайденаяСтрока = ТабРез.Найти(СтрШтриход.Штрихкод, "Штрихкод");
	//	Если НайденаяСтрока = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ЗаполнитьЗначенияСвойств(НайденаяСтрока, СтрШтриход);
	//КонецЦикла;
	//
	////МодульРегламентынхЗаданий.ФормированиеОтчетовКомиссионераПоИнтернетЗаказам() Экспорт

	//////РеквизитыДокумента = Документы.ОтчетКомиссионераОПродажах.ПолучитьСтруктуруРеквизитовДляЗаполненияОтчетаКомиссионераНаОснованииИнтернетЗаказа();
	//////РеквизитыДокумента.Вставить("Сделка", 				ВыборкаИнтернетЗаказ.Сделка);
	//////РеквизитыДокумента.Вставить("ДатаВрученияЗаказа", 	ВыборкаИнтернетЗаказ.ДатаВрученияЗаказа);
	//////РеквизитыДокумента.Вставить("СтоимостьДоставки", 	ВыборкаИнтернетЗаказ.СтоимостьДоставки);
	//////РеквизитыДокумента.Вставить("НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента", 	Истина);
	//////
	//////Товары =  Документы.ОтчетКомиссионераОПродажах.ПолучитьСтруктуруТаблицыТоваровДляЗаполненияОтчетаКомиссионераНаОснованииИнтернетЗаказа();
	//////
	//////ВыборкаДетальныеЗаписи = ВыборкаИнтернетЗаказ.Выбрать();
	//////Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//////	ЗаполнитьЗначенияСвойств(Товары.Добавить(),ВыборкаДетальныеЗаписи);
	//////КонецЦикла;
	//////
	//////СсылкаОтчетКоммисионера = Документы.ОтчетКомиссионераОПродажах.СоздатьОтчетКомиссионераИнтернетЗаказа(РеквизитыДокумента, Товары);


	//
	//ЗагрузкаОтчетаКомиссионераНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОтчетаКомиссинераExelНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Exel (*.xls)|*.xlsx"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = ПутьКФайлуОтчетаКомиссинераExel;
	Если Диалог.Выбрать() Тогда
		ПутьКФайлуОтчетаКомиссинераExel = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры






#Область НастройкиФФ

&НаСервере
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ТаблицаНастроек()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("HostName");
	ТЗ.Колонки.Добавить("Password");
	ТЗ.Колонки.Добавить("PortNumber");
	ТЗ.Колонки.Добавить("Shop");
	ТЗ.Колонки.Добавить("SshHostKeyFingerprint");
	ТЗ.Колонки.Добавить("Token");
	ТЗ.Колонки.Добавить("UserName");
	ТЗ.Колонки.Добавить("ВнешнийКаталогВыгрузки");
	ТЗ.Колонки.Добавить("ВнешнийКаталогЗагрузки");
	ТЗ.Колонки.Добавить("ВнешнийКаталогЗагрузкиRetCRM");
	ТЗ.Колонки.Добавить("ВнешнийКаталогОшибочнойОбработкиВыгрузки");
	ТЗ.Колонки.Добавить("ВнешнийКаталогОшибочнойОбработкиЗагрузки");
	ТЗ.Колонки.Добавить("ВнешнийКаталогУспешнойОбработкиВыгрузки");
	ТЗ.Колонки.Добавить("ВнешнийКаталогУспешнойОбработкиЗагрузки");
	ТЗ.Колонки.Добавить("Грузополучатель");
	ТЗ.Колонки.Добавить("ДатаПереходаНаФФ");
	ТЗ.Колонки.Добавить("КаталогЛогированияОбмена");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("Организация");
	
	Возврат ТЗ;
	
КонецФункции

&НаСервере
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НастройкиТЕСТ()
	
	Рез = ТаблицаНастроек();
	
	НовСтр = Рез.Добавить();
	НовСтр.HostName = "sftp.dev.profashionsolutions.ru";
	НовСтр.Password = "Yh(L_ma@XnD03";
	НовСтр.PortNumber = 2222;
	НовСтр.Shop = 5701;
	НовСтр.SshHostKeyFingerprint = Неопределено;
	НовСтр.Token = Неопределено;
	НовСтр.UserName = "usr-elis";
	НовСтр.ВнешнийКаталогВыгрузки = "/incoming/pending/";
	НовСтр.ВнешнийКаталогЗагрузки = "/outgoing/pending/1s";
	НовСтр.ВнешнийКаталогЗагрузкиRetCRM = "/outgoing/pending/";
	НовСтр.ВнешнийКаталогОшибочнойОбработкиВыгрузки = "/incoming/errors/";
	НовСтр.ВнешнийКаталогОшибочнойОбработкиЗагрузки = "/outgoing/errors/";
	НовСтр.ВнешнийКаталогУспешнойОбработкиВыгрузки = "/incoming/processed/";
	НовСтр.ВнешнийКаталогУспешнойОбработкиЗагрузки = "/outgoing/processed/";
	НовСтр.Грузополучатель = Неопределено;
	НовСтр.ДатаПереходаНаФФ = Неопределено;
	НовСтр.КаталогЛогированияОбмена = "\\Elis.Local\elis\1cedistr\Obmen\ДляТеста\Фулфилмент\";
	НовСтр.Контрагент = Неопределено;
	НовСтр.Организация = Неопределено;
	
	Возврат рез;
	
КонецФункции

&НаСервере
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НастройкиПРОД()
	
	Рез = ТаблицаНастроек();
	
	НовСтр = Рез.Добавить();
	НовСтр.HostName = "sftp.profashionsolutions.ru";
	НовСтр.Password = "Yh(L_ma@XnD03";
	НовСтр.PortNumber = 2222;
	НовСтр.Shop = 5701;
	НовСтр.SshHostKeyFingerprint = Неопределено;
	НовСтр.Token = Неопределено;
	НовСтр.UserName = "usr-elis";
	НовСтр.ВнешнийКаталогВыгрузки = "/incoming/pending/";
	НовСтр.ВнешнийКаталогЗагрузки = "/outgoing/pending/1s";
	НовСтр.ВнешнийКаталогЗагрузкиRetCRM = "/outgoing/pending/";
	НовСтр.ВнешнийКаталогОшибочнойОбработкиВыгрузки = "/incoming/errors/";
	НовСтр.ВнешнийКаталогОшибочнойОбработкиЗагрузки = "/outgoing/errors/";
	НовСтр.ВнешнийКаталогУспешнойОбработкиВыгрузки = "/incoming/processed/";
	НовСтр.ВнешнийКаталогУспешнойОбработкиЗагрузки = "/outgoing/processed/";
	НовСтр.Грузополучатель = Неопределено;
	НовСтр.ДатаПереходаНаФФ = '20230619';
	НовСтр.КаталогЛогированияОбмена = "\\Elis.Local\elis\1cedistr\Obmen\Фулфилмент\";
	НовСтр.Контрагент = Неопределено;
	НовСтр.Организация = Неопределено;
	
	Возврат рез;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьГруппуПВХ(Имя)
		
	ГруппаОбъект = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.СоздатьГруппу();
	ГруппаОбъект.Наименование = Имя;
	ГруппаОбъект.Записать();
	Группа = ГруппаОбъект.Ссылка;
	Возврат Группа;
	
КонецФункции


&НаСервере
Процедура СоздатьНастройкиНаСервереУниверсально(Среда = "ТЕСТ")
	
	Группа = Неопределено;
	
	Если Среда = "ТЕСТ" Тогда
		Настройки = НастройкиТЕСТ();
		Группа = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.НайтиПоНаименованию("Фулфилмент", Истина);
		Если НЕ ЗначениеЗаполнено(Группа) Тогда
			Группа = СоздатьГруппуПВХ("Фулфилмент");
		КонецЕсли;
	ИначеЕсли Среда = "ПРОД" Тогда
		Настройки = НастройкиПРОД();
		Группа = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.НайтиПоНаименованию("ФулфилментТестовыйСервер", Истина);
		Если НЕ ЗначениеЗаполнено(Группа) Тогда
			Группа = СоздатьГруппуПВХ("ФулфилментТестовыйСервер");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого стрк Из Настройки Цикл
		СоздатьОбновитьНастройку(стрк, Группа);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьНастройку(СтрокаТЗ, Группа)
	
	
	
КонецПроцедуры

&НаСервере
Функция НайтиНастройкуПВХ(Имя, Группа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	" ";
	Запрос.УстановитьПараметр("Наименование", Имя);
	Запрос.УстановитьПараметр("Группа", Группа);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка._Значение;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции



&НаСервере
Процедура СоздатьНастройкиНаСервере()
	СоздатьНастройкиНаСервереУниверсально("ПРОД");
	СоздатьНастройкиНаСервереУниверсально("ТЕСТ");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройки(Команда)
	СоздатьНастройкиНаСервере();
КонецПроцедуры


#КонецОбласти







