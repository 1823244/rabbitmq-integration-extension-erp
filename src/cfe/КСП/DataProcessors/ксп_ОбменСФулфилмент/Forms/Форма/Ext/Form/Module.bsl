&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиФФ = ОбменСФулфилментСервер.ПолучитьНастройкиФулфилментДляТекущейБазы();
	КаталогЛогированияОбмена = НастройкиФФ.КаталогЛогированияОбмена;
		
КонецПроцедуры



&НаСервере
функция ЗапускФоновогоЗадания(ИмяПроцедуры, ПараметрыВызова,ИмяЭлементаФотмы)
	
	//ЕНС
	Если ОбщегоНазначения.РежимОтладки() Тогда
		_параметры = "";
		Для сч  = 0 По ПараметрыВызова.количество()-1 Цикл
			_параметры = _параметры + "ПараметрыВызова["+Формат(сч,"ЧГ=;ЧРГ=;ЧН=")+"]" + ?(сч = ПараметрыВызова.количество()-1, "", ", ");
		КонецЦикла;
		Выполнить(ИмяПроцедуры+"("+_параметры+")");
		Возврат Истина;
	КонецЕсли;
	
	ПозТочка 	= Найти(ИмяПроцедуры,".");
	ИмяМетода 	= Сред(ИмяПроцедуры,ПозТочка+1);
	Ключ 		= СтрЗаменить(ИмяПроцедуры,".","_");
	
	АктивныеФоновыеЗадания  = ФоновыеЗадания.ПолучитьФоновыеЗадания(новый Структура("Состояние",СостояниеФоновогоЗадания.Активно));
	
	Для каждого АктивноеЗадание Из АктивныеФоновыеЗадания Цикл
		Если АктивноеЗадание.Ключ = Ключ Тогда
			Сообщить("Фоновое задание с ключем ["+АктивноеЗадание.Наименование+"] уже выполниется.",СтатусСообщения.Внимание);
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяПроцедуры,ПараметрыВызова, Ключ, ИмяМетода);
	Исключение
		Сообщить(СтрШаблон("Не удалось запустить фоновое задание [%1] Причина: %2", ИмяМетода, ОписаниеОшибки()));
		Возврат ложь;
	КонецПопытки;
	
	// блокируем на время выполнения
	Элементы[ИмяЭлементаФотмы].Доступность = ложь;
	
	Стр = СписокАктивныхФоновыхЗаданий.Добавить();
	Стр.Имя 					=  ИмяМетода;
	Стр.УникальныйИдентификатор =  ФоновоеЗадание.УникальныйИдентификатор;
	Стр.ИмяЭлементаФотмы 		=  ИмяЭлементаФотмы;

	Возврат Истина;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПроверкаАктивностиФоновыхЗаданий()

	МаксИндекс = СписокАктивныхФоновыхЗаданий.Количество()-1;
	Для Инд = 0 По МаксИндекс Цикл
		ОбратныйИндекс = МаксИндекс-Инд;
		СтрФоновое = СписокАктивныхФоновыхЗаданий[ОбратныйИндекс];
		//начало - Елисеев :: 01.12.2023
		Отбор = Новый Структура("УникальныйИдентификатор",СтрФоновое.УникальныйИдентификатор);
		//МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		МассивФоновыхЗаданий = НайтиЗадания(Отбор);
		//конец - Елисеев :: 01.12.2023
		
		УдалитьФоновоеЗаданиеИзСписка = ложь;
		
		Если МассивФоновыхЗаданий.Количество()>0 Тогда
			ТекФоновоеЗадание = МассивФоновыхЗаданий[0];
			
			СообщенияПользователя = ТекФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
			Для каждого Сообщение Из СообщенияПользователя Цикл
				Сообщение.Сообщить();
			КонецЦикла;

			//начало - Елисеев :: 01.12.2023
			//Если ТекФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			Если НЕ ЗаданиеАктивно(ТекФоновоеЗадание) Тогда
			//конец - Елисеев :: 01.12.2023
				УдалитьФоновоеЗаданиеИзСписка = истина;
				Сообщить(СтрШаблон("Завершили выполнение [%1], статус завершения : %2",СтрФоновое.Имя,ВРег(ТекФоновоеЗадание.Состояние)));
				
				Элементы.СостояниеЗагрузки.Обновить();
				Элементы.СостояниеВыгрузки.Обновить();
				
			КонецЕсли;
		иначе  
			Сообщить(СтрШаблон("Фоновое задание [%1] не найдено.",СтрФоновое.Имя));
			УдалитьФоновоеЗаданиеИзСписка = истина;
		КонецЕсли;
		
		Если УдалитьФоновоеЗаданиеИзСписка Тогда
			Элементы[СтрФоновое.ИмяЭлементаФотмы].Доступность = Истина;
			СписокАктивныхФоновыхЗаданий.Удалить(СтрФоновое);
		КонецЕсли;
	КонецЦикла;

	Если СписокАктивныхФоновыхЗаданий.Количество()>0 Тогда
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли; 
	
	Элементы.СостояниеЗагрузки.Обновить();
	Элементы.СостояниеВыгрузки.Обновить();
	
КонецПроцедуры // ()


&НаСервере
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЗадания(Отбор)
		
	Возврат РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
КонецФункции


&НаСервереБезКонтекста
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаданиеАктивно(ФоновоеЗадание)
		
	Возврат ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции




&НаКлиенте
Процедура ВыгрузкаНоменклатуры(Команда)
	Если ПеремещениеТоваров.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выборан документ ""Перемещение товаров""!",30,"Описание ошибки.");
		Возврат;
	КонецЕсли;
	
	
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(ПеремещениеТоваров);
	ПараметрыВызова.Добавить(Истина);
	
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ВыгрузитьНоменклатуру", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСписокФайловЛогов()

	СписокЛогФайлов.Очистить();
	СодержимоеЛогФайла = "";
	
	Если ПустаяСтрока(КаталогЛогированияОбмена) Тогда
		Сообщить("Не указан путь к каталогу логирования обмена !",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Попытка
		НайденыеФайлы = НайтиФайлы(КаталогЛогированияОбмена,"*.txt", ложь);
	Исключение
		Сообщить(СтрШаблон("Ошибка поиска файлов в каталоге : %1",КаталогЛогированияОбмена),СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
	Для каждого ЛогФайл Из НайденыеФайлы Цикл
		СписокЛогФайлов.Добавить(ЛогФайл.ИмяБезРасширения,ЛогФайл.Имя);
	КонецЦикла;
	СписокЛогФайлов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	
	Если СписокЛогФайлов.Количество()>0 Тогда
		ПервыйЭлемент							=  СписокЛогФайлов.Получить(0);
		ОбновитьСодержаениЛогФайла(ПервыйЭлемент.Представление);
	КонецЕсли;

КонецПроцедуры // ОбновитьСписокФайловЛогов()

&НаСервере
Процедура ОбновитьСодержаениЛогФайла(ИмяФайла)
	
	СодержимоеЛогФайла = "";
	
	ПутьКФайлу = КаталогЛогированияОбмена+ИмяФайла;
	
	Попытка
		ЧтениеТекстаЛог = Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.UTF8,,,Ложь);
	Исключение
		Сообщить(СтрШаблон("Ошибка чтения файла [%1] Причина: %2",ИмяФайла,ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	СодержимоеЛогФайла = ЧтениеТекстаЛог.Прочитать();          
	
КонецПроцедуры 



&НаКлиенте
Процедура ВыгрузкаАнонсаПоставки(Команда)
	
	Если ЗаказНаПеремещение.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выборан документ ""Заказ на перемещение""!",30,"Описание ошибки.");
		Возврат;
	КонецЕсли;
	
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(ЗаказНаПеремещение);
	ПараметрыВызова.Добавить(Истина);
	
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.имя = "ГруппаЛогирование" Тогда
		ОбновитьСписокФайловЛогов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	ОбновитьСписокФайловЛогов();
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогированияОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	// Вставить содержимое обработчика.
	Каталог = новый Файл(КаталогЛогированияОбмена);
	Если не Каталог.Существует() Тогда
		Сообщить(СтрШаблон("Каталог [%1] не существует!",КаталогЛогированияОбмена),СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// открываем каталог
	Попытка
		ЗапуститьПриложение(КаталогЛогированияОбмена);
	Исключение
		Сообщить(СтрШаблон("Не удалось открыть каталог : %1",КаталогЛогированияОбмена),СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛогФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если элементы.СписокЛогФайлов.ТекущиеДанные<> Неопределено Тогда
		ИмяФайла = элементы.СписокЛогФайлов.ТекущиеДанные.Представление;
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ОбновитьСодержаениЛогФайла(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыгрузки(Команда)
	
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(Истина);  // выводить в консоль сообщения лога.

	// Вставить содержимое обработчика.
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ПроверкаСтатусаВыгруженныхФайлов", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
КонецПроцедуры




&НаКлиенте
Процедура ЗагрузкаОстатков(Команда)
	// Вставить содержимое обработчика.
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(Истина);  // выводить в консоль сообщения лога.

	// Вставить содержимое обработчика.
	Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ЗагрузкаОстатков", ПараметрыВызова , Команда.Имя) тогда 
		ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ЗагрузкаДанныхКМ(Команда)
	// Вставить содержимое обработчика.
	ПараметрыВызова = новый Массив;
	ПараметрыВызова.Добавить(Истина);  // выводить в консоль сообщения лога.

	//// Вставить содержимое обработчика.
	//Если ЗапускФоновогоЗадания("ОбменСФулфилментСервер.ЗагрузкаДанныхКМ", ПараметрыВызова , Команда.Имя) тогда 
	//	ОтключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий"); // если уже запущен в другой процедуре 
	//	ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновыхЗаданий",1,Истина);
	//КонецЕсли;
	
	ВыводитьСообщения = Ложь;//иначе слишком долго приходится ждать вывода после завершения импорта
	ОбменСФулфилментСервер.ЗагрузкаДанныхКМ(ВыводитьСообщения, НастройкиПодключения);
	
КонецПроцедуры




        




#Область Тесты

&НаСервере
Процедура Тест_ВыгрузкаАнонсаПоставкиНаСервере()
	//ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки

	СсылкаОрдерНаПродажу = Документы.ЗаказНаПеремещение.СоздатьДокумент();
	СсылкаОрдерНаПродажу.Дата = ТекущаяДатаСеанса();
	СсылкаОрдерНаПродажу.Записать();
	
	СсылкаОрдерНаПродажу = СсылкаОрдерНаПродажу.Ссылка;
	
	Путь = "";
	Попытка
		Путь = ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки_ПодготовитьФайл( СсылкаОрдерНаПродажу, Истина);
	Исключение
	    Сообщить(НСтр("ru = Не удалось подготовить файл Анонса поставки. Тест выгрузки будет выполняться на заглушке! Ошибка: '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;

	
	Если Путь = "" Тогда
		
		ПутьКВременномуКаталогу = КаталогВременныхФайлов();
		UUIDФайла				= Строка(новый УникальныйИдентификатор);	
		ДатаФормированияФайла = ТекущаяДатаСеанса();
		ИмяФайла = "FE720_"+Формат(ДатаФормированияФайла, "ДФ=yyyyMMdd_HHmmss")+"_"+UUIDФайла;
		ИмяФайлаОсновное 	= ИмяФайла + ".xml";
		ПутьКФайлуВыгрузки 	= ПутьКВременномуКаталогу+ИмяФайлаОсновное;
		т = Новый ТекстовыйДокумент;
		т.ДобавитьСтроку("заглушка для теста отправки данных в фулфилмент");
		т.Записать(ПутьКФайлуВыгрузки);
	
	Иначе 
		ПутьКФайлуВыгрузки = Путь;
		
	КонецЕсли;
	
	Попытка
		ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки_ОтправитьФайл( ПутьКФайлуВыгрузки, СсылкаОрдерНаПродажу, Истина );
	Исключение
	    Сообщить(НСтр("ru = Не удалось отправить файл Анонса поставки по FTP. Ошибка: '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	
	// второй тест - через метод-оркестратор
	
	Сообщить(НСтр("ru = Второй тест. через метод-оркестратор '"+"ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки()"+"'"), СтатусСообщения.Внимание);
	
	ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки( СсылкаОрдерНаПродажу, истина);

КонецПроцедуры

&НаКлиенте
Процедура Тест_ВыгрузкаАнонсаПоставки(Команда)
	Тест_ВыгрузкаАнонсаПоставкиНаСервере();
КонецПроцедуры






&НаСервере
Процедура Тест_АнонсПоставки_ФормированиеФайлаНаСервере()
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	НастройкиФФ = ОбменСФулфилментСервер.ПолучитьНастройкиФулфилментДляТекущейБазы();
	ВыводитьСообщения = Истина;
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_ВыгрузкаАнонсовПоставки.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);

	
	Путь = ОбменСФулфилментСервер.ВыгрузитьАнонсПоставки_ПодготовитьФайл( Тест_ЗаказНаПеремещение, лог, Истина);
	
	ЧтениеXML	 = новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(путь, Новый ПараметрыЧтенияXML);
	//обк = ПрочитатьXML(ЧтениеXML);    
	
	обк = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	счНайдено = 0;
	счВсего = 0;
	Для каждого стрк Из Тест_ЗаказНаПеремещение.Товары Цикл
		счВсего = счВсего + 1;          
		гуид = НРЕГ(строка(стрк.Номенклатура.УникальныйИдентификатор()));
		
		Если ТипЗнч(обк.items.item) = Тип("ОбъектXDTO") Тогда
			Если НРЕГ(обк.items.item.uuid)  = гуид Тогда
				счНайдено = счНайдено + 1;  
				прервать;
			КонецЕсли;
		ИначеЕсли  ТипЗнч(обк.items.item) = Тип("СписокXDTO") Тогда
			Для каждого итем Из обк.items.item Цикл
				Если НРЕГ(итем.uuid)  = гуид Тогда
					счНайдено = счНайдено + 1;  
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если счНайдено <> счВсего Тогда
		ВызватьИсключение "Не все товары из ТЧ есть в XML-файле!";
		
	КонецЕсли;
	
	сообщить("Тест: Тест_АнонсПоставки_ФормированиеФайлаНаСервере() - ОК");
КонецПроцедуры

&НаКлиенте
Процедура Тест_АнонсПоставки_ФормированиеФайла(Команда)
	Тест_АнонсПоставки_ФормированиеФайлаНаСервере();
КонецПроцедуры


#КонецОбласти


#Область Разработка

//Загружает движения кодов маркировки из файла, путь к которому указан на форме
&НаСервере
Процедура ЗагрузкаДанныхКМ_РазработкаНаСервере()
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	НастройкиФФ = ОбменСФулфилментСервер.ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ВыводитьСообщения = Истина;
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+" Загрузка КМ (разработка).txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	
	//ТекстДок_ДвиженияКМ.Записать(ПолноеИмяФайлаКМ_Разработка);
	
	
	//ЧтениеXML = Новый ЧтениеXML;

	РежимЗагрузки = "ЗагрузкаДанныхКМ";
	
	ЧтениеXML = ОбменСФулфилментСервер.ПрочитатьДанныеФайла(ПолноеИмяФайлаКМ_Разработка, РежимЗагрузки, Лог);
		
	обк = обработки.ксп_ФорматFE770.Создать();
	обк.ЗагрузкаДанныхКМНаФулфилменте_FE770(ЧтениеXML, ПолноеИмяФайлаКМ_Разработка, ИмяФайлаКМ_Разработка, Лог);
	

	
КонецПроцедуры

//Загружает движения кодов маркировки из файла, путь к которому указан на форме
&НаКлиенте
Процедура ЗагрузкаДанныхКМ_Разработка(Команда)
	ЗагрузкаДанныхКМ_РазработкаНаСервере();
КонецПроцедуры

//выводит содержимое файла, путь к которому указан на форме, в текстовый документ
&НаКлиенте
Процедура ПолноеИмяФайлаКМ_РазработкаПриИзменении(Элемент)
	Попытка
		ПоказатьФайлКМ_Разработка(Неопределено);
	Исключение
	    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// обработчик кнопки Обновить. выводит содержимое файла, путь к которому указан на форме, в текстовый документ
&НаКлиенте
Процедура ПоказатьФайлКМ_Разработка(Команда)
	ПоказатьФайлКМ_РазработкаСервер();
КонецПроцедуры

// обработчик кнопки Обновить. выводит содержимое файла, путь к которому указан на форме, в текстовый документ
&НаСервере
Процедура ПоказатьФайлКМ_РазработкаСервер()
	ТекстДок_ДвиженияКМ.Прочитать(ПолноеИмяФайлаКМ_Разработка,КодировкаТекста.UTF8);
КонецПроцедуры


#КонецОбласти




