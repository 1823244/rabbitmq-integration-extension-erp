
#Область ПрограммныйИнтерфейс

// Распределение по направлениям Опт, Розница, ЕСОМ
Процедура ТекущееРаспределение() Экспорт
	
	СостоянияРаспределения = Перечисления.РаспределениеЗапасовСостояния;
	СостоянияДоступности = Новый Массив;
	СостоянияДоступности.Добавить(СостоянияРаспределения.ОстатокНаСкладе);
	СостоянияДоступности.Добавить(СостоянияРаспределения.ОжидаемоеПоступление);
	СостоянияДоступности.Добавить(СостоянияРаспределения.ОбеспеченНаСкладе);
	СостоянияДоступности.Добавить(СостоянияРаспределения.ОбеспеченКДате);
	СостоянияДоступности.Добавить(СостоянияРаспределения.Обеспечить);
	СостоянияДоступности.Добавить(СостоянияРаспределения.ВРезерве);
	
	ТипДокументаРаспределение = Перечисления.КСП_ТипДокументаСлужебногоРезерва.РаспределениеГотовойПродукции;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоГода(ДатаРаспределения));
	Запрос.УстановитьПараметр("ДатаОкончания",				ДатаРаспределения);
	Запрос.УстановитьПараметр("СкладОстатков",				СкладОстатков);
	Запрос.УстановитьПараметр("СценарийПланирования",		СценарийПланирования);
	Запрос.УстановитьПараметр("ПодразделениеОпт",			ПодразделениеОпт);
	Запрос.УстановитьПараметр("ПодразделениеРозница",		ПодразделениеРозница);
	Запрос.УстановитьПараметр("ПодразделениеECOM",			ПодразделениеECOM);
	Запрос.УстановитьПараметр("СостоянияДоступности",		СостоянияДоступности);
	Запрос.УстановитьПараметр("ТипДокументаРаспределение",	ТипДокументаРаспределение);
	Запрос.УстановитьПараметр("Коллекция",					Коллекция);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПланыПродажОбороты.Номенклатура КАК Номенклатура,
	|	ПланыПродажОбороты.Характеристика КАК Характеристика,
	|	ПланыПродажОбороты.Подразделение КАК Подразделение,
	|	ПланыПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ втПланыПродаж
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Сценарий = &СценарийПланирования
	|				И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|				И Подразделение В (&ПодразделениеОпт, &ПодразделениеРозница, &ПодразделениеECOM)) КАК ПланыПродажОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Влож.Номенклатура КАК Номенклатура,
	|	Влож.НоменклатураНаименование КАК НоменклатураНаименование,
	|	Влож.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА Влож.Подразделение = &ПодразделениеОпт
	|				ТОГДА Влож.Запланировано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПлановоеОпт,
	|	СУММА(ВЫБОР
	|			КОГДА Влож.Подразделение = &ПодразделениеРозница
	|				ТОГДА Влож.Запланировано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПлановоеРозница,
	|	СУММА(ВЫБОР
	|			КОГДА Влож.Подразделение = &ПодразделениеECOM
	|				ТОГДА Влож.Запланировано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПлановоеECOM,
	|	СУММА(Влож.Свободно) КАК КоличествоОстаток,
	|	СУММА(Влож.Свободно) КАК КоличествоДоступно,
	|	СУММА(ВЫБОР
	|			КОГДА Влож.Подразделение = &ПодразделениеОпт
	|				ТОГДА Влож.Зарезервировано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоРаспределеноОпт,
	|	СУММА(ВЫБОР
	|			КОГДА Влож.Подразделение = &ПодразделениеРозница
	|				ТОГДА Влож.Зарезервировано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоРаспределеноРозница,
	|	СУММА(ВЫБОР
	|			КОГДА Влож.Подразделение = &ПодразделениеECOM
	|				ТОГДА Влож.Зарезервировано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоРаспределеноECOM
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|		ИнформацияОДоступности.Характеристика КАК Характеристика,
	|		ИнформацияОДоступности.Свободно КАК Свободно,
	|		0 КАК Зарезервировано,
	|		0 КАК Запланировано,
	|		СпрНоменклатура.Наименование КАК НоменклатураНаименование,
	|		NULL КАК Подразделение
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО (СпрНоменклатура.Ссылка = ИнформацияОДоступности.Номенклатура)
	|	ГДЕ
	|		ИнформацияОДоступности.Состояние В(&СостоянияДоступности)
	|		И ИнформацияОДоступности.Свободно <> 0
	|		И ИнформацияОДоступности.Склад = &СкладОстатков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИнформацияОДоступности.Номенклатура,
	|		ИнформацияОДоступности.Характеристика,
	|		0,
	|		ИнформацияОДоступности.Зарезервировано,
	|		0,
	|		СпрНоменклатура.Наименование,
	|		ДокРаспределения.Подразделение
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО (СпрНоменклатура.Ссылка = ИнформацияОДоступности.Номенклатура)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление КАК ДокРаспределения
	|			ПО (ДокРаспределения.Ссылка = ИнформацияОДоступности.ЗаказНаОтгрузку)
	|	ГДЕ
	|		ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|		И ИнформацияОДоступности.Зарезервировано <> 0
	|		И ИнформацияОДоступности.Склад = &СкладОстатков
	|		И ДокРаспределения.КСП_ТипДокументаСлужебногоРезерва = &ТипДокументаРаспределение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втПланыПродаж.Номенклатура,
	|		втПланыПродаж.Характеристика,
	|		0,
	|		0,
	|		втПланыПродаж.Количество,
	|		СпрНоменклатура.Наименование,
	|		втПланыПродаж.Подразделение
	|	ИЗ
	|		втПланыПродаж КАК втПланыПродаж
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО (СпрНоменклатура.Ссылка = втПланыПродаж.Номенклатура)) КАК Влож
	|
	|СГРУППИРОВАТЬ ПО
	|	Влож.Номенклатура,
	|	Влож.НоменклатураНаименование,
	|	Влож.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	втИтоговыеДанные.НоменклатураНаименование КАК НоменклатураНаименование,
	|	втИтоговыеДанные.Характеристика КАК Характеристика,
	|	втИтоговыеДанные.КоличествоПлановоеОпт КАК КоличествоПлановоеОпт,
	|	втИтоговыеДанные.КоличествоПлановоеРозница КАК КоличествоПлановоеРозница,
	|	втИтоговыеДанные.КоличествоПлановоеECOM КАК КоличествоПлановоеECOM,
	|	втИтоговыеДанные.КоличествоОстаток КАК КоличествоОстаток,
	|	втИтоговыеДанные.КоличествоДоступно КАК КоличествоДоступно,
	|	втИтоговыеДанные.КоличествоРаспределеноОпт КАК КоличествоРаспределеноОпт,
	|	втИтоговыеДанные.КоличествоРаспределеноРозница КАК КоличествоРаспределеноРозница,
	|	втИтоговыеДанные.КоличествоРаспределеноECOM КАК КоличествоРаспределеноECOM,
	|	втИтоговыеДанные.КоличествоПлановоеОпт - втИтоговыеДанные.КоличествоРаспределеноОпт КАК КоличествоНеРаспределеноОпт,
	|	втИтоговыеДанные.КоличествоПлановоеРозница - втИтоговыеДанные.КоличествоРаспределеноРозница КАК КоличествоНеРаспределеноРозница,
	|	втИтоговыеДанные.КоличествоПлановоеECOM - втИтоговыеДанные.КоличествоРаспределеноECOM КАК КоличествоНеРаспределеноECOM,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.КоличествоПлановоеОпт > 0
	|			ТОГДА втИтоговыеДанные.КоличествоРаспределеноОпт / втИтоговыеДанные.КоличествоПлановоеОпт
	|		ИНАЧЕ 0
	|	КОНЕЦ * 100 КАК ПроцентОбеспеченияОпт,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.КоличествоПлановоеРозница > 0
	|			ТОГДА втИтоговыеДанные.КоличествоРаспределеноРозница / втИтоговыеДанные.КоличествоПлановоеРозница
	|		ИНАЧЕ 0
	|	КОНЕЦ * 100 КАК ПроцентОбеспеченияРозница,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.КоличествоПлановоеECOM > 0
	|			ТОГДА втИтоговыеДанные.КоличествоРаспределеноECOM / втИтоговыеДанные.КоличествоПлановоеECOM
	|		ИНАЧЕ 0
	|	КОНЕЦ * 100 КАК ПроцентОбеспеченияECOM
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование,
	|	Номенклатура";
	
	тзРаспределение = ТаблицаРаспределения();
	
	ЧисловыеКолонки =
	"КоличествоОстаток, КоличествоДоступно,
	|
	|КоличествоПлановоеОпт,			КоличествоПлановоеРозница,			КоличествоПлановоеECOM,
	|КоличествоРаспределеноОпт,		КоличествоРаспределеноРозница,		КоличествоРаспределеноECOM,
	|КоличествоНеРаспределеноОпт,	КоличествоНеРаспределеноРозница,	КоличествоНеРаспределеноECOM,
	|ПроцентОбеспеченияОпт,			ПроцентОбеспеченияРозница,			ПроцентОбеспеченияECOM";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерЗаписи = 1;
	Пока Выборка.Следующий() Цикл
		СтрТаб = тзРаспределение.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаб, Выборка, "Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтрТаб, Выборка, ЧисловыеКолонки);
		СтрТаб.НомерЗаписи = НомерЗаписи;
		НомерЗаписи = НомерЗаписи + 1;
	КонецЦикла;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресИсходныхДанных) Тогда
		АдресИсходныхДанных = НовыйАдресИсходныхДанных();
	КонецЕсли;
	ПоместитьВоВременноеХранилище(тзРаспределение, АдресИсходныхДанных);
	
КонецПроцедуры


Процедура ПрименитьНастройкиКомпоновщика(СброситьИзменения = Ложь) Экспорт
	
	тзИсходноеРаспределение = ПолучитьИзВременногоХранилища(АдресИсходныхДанных);
	
	тзТекущееРаспределение = ТаблицаРаспределения();
	Если НЕ СброситьИзменения Тогда
		СтрокиДерева = Распределение.Строки.НайтиСтроки(Новый Структура("Уровень", 1), Истина);
		Для Каждого СтрДер Из СтрокиДерева Цикл
			ЗаполнитьЗначенияСвойств(тзТекущееРаспределение.Добавить(), СтрДер);
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тзИсходноеРаспределение", тзИсходноеРаспределение);
	Запрос.УстановитьПараметр("тзТекущееРаспределение", тзТекущееРаспределение);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ таб.* ПОМЕСТИТЬ втИсходноеРаспределение ИЗ &тзИсходноеРаспределение КАК таб;
	|ВЫБРАТЬ таб.* ПОМЕСТИТЬ втТекущееРаспределение ИЗ &тзТекущееРаспределение КАК таб;
	|
	|ВЫБРАТЬ
	|	втИсх.Номенклатура КАК Номенклатура,
	|	втИсх.Характеристика КАК Характеристика,
	|	втИсх.КоличествоОстаток КАК КоличествоОстаток,
	|	ЕСТЬNULL(втТек.КоличествоДоступно, втИсх.КоличествоДоступно) КАК КоличествоДоступно,
	|	втИсх.КоличествоПлановоеОпт КАК КоличествоПлановоеОпт,
	|	втИсх.КоличествоПлановоеРозница КАК КоличествоПлановоеРозница,
	|	втИсх.КоличествоПлановоеECOM КАК КоличествоПлановоеECOM,
	|	втИсх.КоличествоРаспределеноОпт КАК КоличествоРаспределеноОпт,
	|	втИсх.КоличествоРаспределеноРозница КАК КоличествоРаспределеноРозница,
	|	втИсх.КоличествоРаспределеноECOM КАК КоличествоРаспределеноECOM,
	|	втИсх.КоличествоНеРаспределеноОпт КАК КоличествоНеРаспределеноОпт,
	|	втИсх.КоличествоНеРаспределеноРозница КАК КоличествоНеРаспределеноРозница,
	|	втИсх.КоличествоНеРаспределеноECOM КАК КоличествоНеРаспределеноECOM,
	|	ЕСТЬNULL(втТек.ПроцентОбеспеченияОпт, втИсх.ПроцентОбеспеченияОпт) КАК ПроцентОбеспеченияОпт,
	|	ЕСТЬNULL(втТек.ПроцентОбеспеченияРозница, втИсх.ПроцентОбеспеченияРозница) КАК ПроцентОбеспеченияРозница,
	|	ЕСТЬNULL(втТек.ПроцентОбеспеченияECOM, втИсх.ПроцентОбеспеченияECOM) КАК ПроцентОбеспеченияECOM,
	|	ЕСТЬNULL(втТек.КоличествоДоступноОпт, втИсх.КоличествоДоступноОпт) КАК КоличествоДоступноОпт,
	|	ЕСТЬNULL(втТек.КоличествоДоступноРозница, втИсх.КоличествоДоступноРозница) КАК КоличествоДоступноРозница,
	|	ЕСТЬNULL(втТек.КоличествоДоступноECOM, втИсх.КоличествоДоступноECOM) КАК КоличествоДоступноECOM,
	|	втИсх.НомерЗаписи КАК НомерЗаписи
	|ПОМЕСТИТЬ втРаспределение
	|ИЗ
	|	втИсходноеРаспределение КАК втИсх
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущееРаспределение КАК втТек
	|		ПО втТек.НомерЗаписи = втИсх.НомерЗаписи
	|;
	|ВЫБРАТЬ * ИЗ втРаспределение";
	
	тзНовоеРаспределение = Запрос.Выполнить().Выгрузить();
	ПоместитьВоВременноеХранилище(тзНовоеРаспределение, АдресИсходныхДанных);
	
	ПараметрыВыгрузкиСКД = КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД();
	
	ПараметрыВыгрузкиСКД.СхемаКомпоновки = АдресОтборовСКД;
	ПараметрыВыгрузкиСКД.НастройкиКомпоновки = Компоновщик.ПолучитьНастройки();
	ПараметрыВыгрузкиСКД.ОжидаемыеКолонки = тзТекущееРаспределение.СкопироватьКолонки();
	ПараметрыВыгрузкиСКД.ТипРезультата = "ДеревоЗначений";  // "ТаблицаЗначений" или "ДеревоЗначений"
	ПараметрыВыгрузкиСКД.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Распределение = ВыгрузитьРезультатСКД(ПараметрыВыгрузкиСКД);
	
КонецПроцедуры


Процедура ПрименитьНастройкиКомпоновщикаКаналы(СброситьИзменения = Ложь) Экспорт
	
	тзИсходноеРаспределение = ПолучитьИзВременногоХранилища(АдресИсходныхДанныхКаналы);
	
	тзТекущееРаспределение = ТаблицаРаспределенияКаналы();
	Если НЕ СброситьИзменения Тогда
		СтрокиДерева = Распределение.Строки.НайтиСтроки(Новый Структура("Уровень", 1), Истина);
		Для Каждого СтрДер Из СтрокиДерева Цикл
			ЗаполнитьЗначенияСвойств(тзТекущееРаспределение.Добавить(), СтрДер);
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тзИсходноеРаспределение", тзИсходноеРаспределение);
	Запрос.УстановитьПараметр("тзТекущееРаспределение", тзТекущееРаспределение);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ Таб.* ПОМЕСТИТЬ втИсходноеРаспределение ИЗ &тзИсходноеРаспределение КАК Таб;
	|ВЫБРАТЬ таб.* ПОМЕСТИТЬ втТекущееРаспределение ИЗ &тзТекущееРаспределение КАК таб;
	|
	|ВЫБРАТЬ 
	|   втИсх.Организация КАК Организация,
	|   втИсх.ПланПродаж КАК ПланПродаж,
	|   втИсх.Коллекция КАК Коллекция,
	|   втИсх.Канал КАК Канал,
	
	|   втИсх.Номенклатура КАК Номенклатура,
	|	втИсх.Характеристика КАК Характеристика,
	|	втИсх.Документ КАК Документ,	
	
	|	втИсх.КолКРаспределению КАК КолКРаспределению,	
	|	втИсх.КолРаспределено КАК КолРаспределено,
	|	втИсх.КолЗаказано КАК КолЗаказано,
	|	втИсх.РаспределеноПроц КАК РаспределеноПроц,
	
	|	втИсх.НомерЗаписи КАК НомерЗаписи,
	|	втИсх.Уровень КАК Уровень
	|ПОМЕСТИТЬ втРаспределениеКаналы
	|ИЗ
	|	втИсходноеРаспределение КАК втИсх
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущееРаспределение КАК втТек
	|		ПО втТек.НомерЗаписи = втИсх.НомерЗаписи
	|;
	|ВЫБРАТЬ * ИЗ втРаспределениеКаналы";
	
	тзНовоеРаспределение = Запрос.Выполнить().Выгрузить();
	ПоместитьВоВременноеХранилище(тзНовоеРаспределение, АдресИсходныхДанныхКаналы);
	
	ПараметрыВыгрузкиСКД = КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД();
	
	ПараметрыВыгрузкиСКД.СхемаКомпоновки = АдресОтборовСКДКаналы;
	ПараметрыВыгрузкиСКД.НастройкиКомпоновки = КомпоновщикКаналы.ПолучитьНастройки();
	ПараметрыВыгрузкиСКД.ОжидаемыеКолонки = тзТекущееРаспределение.СкопироватьКолонки();
	ПараметрыВыгрузкиСКД.ТипРезультата = "ДеревоЗначений";  // "ТаблицаЗначений" или "ДеревоЗначений"
	ПараметрыВыгрузкиСКД.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	РаспределениеКаналы = ВыгрузитьРезультатСКД(ПараметрыВыгрузкиСКД);
	
КонецПроцедуры



Функция ЗаписатьРаспределение() Экспорт
	
	РезервироватьНоменклатуруДляРаспределения(ПодразделениеОпт,		"КоличествоДоступноОпт");
	РезервироватьНоменклатуруДляРаспределения(ПодразделениеРозница,	"КоличествоДоступноРозница");
	РезервироватьНоменклатуруДляРаспределения(ПодразделениеECOM,	"КоличествоДоступноECOM");
	
	Возврат Истина;
	
КонецФункции

// Распределение по каналам

Процедура ТекущееРаспределениеПоКаналам() Экспорт
	
	//СостоянияРаспределения = Перечисления.РаспределениеЗапасовСостояния;
	//СостоянияДоступности = Новый Массив;
	//СостоянияДоступности.Добавить(СостоянияРаспределения.ОстатокНаСкладе);
	//СостоянияДоступности.Добавить(СостоянияРаспределения.ОжидаемоеПоступление);
	//СостоянияДоступности.Добавить(СостоянияРаспределения.ОбеспеченНаСкладе);
	//СостоянияДоступности.Добавить(СостоянияРаспределения.ОбеспеченКДате);
	//СостоянияДоступности.Добавить(СостоянияРаспределения.Обеспечить);
	//СостоянияДоступности.Добавить(СостоянияРаспределения.ВРезерве);
	
	ТипДокументаРаспределение = Перечисления.КСП_ТипДокументаСлужебногоРезерва.РаспределениеГотовойПродукции;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоГода(ДатаРаспределения));
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаРаспределения);
	Запрос.УстановитьПараметр("Родитель", ИсточникРаспределения);
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("СкладОстатков",				СкладОстатков);
	//Запрос.УстановитьПараметр("СценарийПланирования",		СценарийПланирования);
	//Запрос.УстановитьПараметр("ПодразделениеОпт",			ПодразделениеОпт);
	//Запрос.УстановитьПараметр("ПодразделениеРозница",		ПодразделениеРозница);
	//Запрос.УстановитьПараметр("ПодразделениеECOM",			ПодразделениеECOM);
	//Запрос.УстановитьПараметр("СостоянияДоступности",		СостоянияДоступности);
	//Запрос.УстановитьПараметр("ТипДокументаРаспределение",	ТипДокументаРаспределение);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка,
	|	&Родитель КАК Родитель
	|ПОМЕСТИТЬ ВТ_Каналы
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Родитель = &Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Каналы.Ссылка КАК Канал,
	|	ДР_КРаспределению.Период КАК Период,
	|	ДР_КРаспределению.Организация КАК Организация,
	|	ДР_КРаспределению.Источник КАК Источник,
	|	ДР_КРаспределению.Приемник КАК Приемник,
	|	ДР_КРаспределению.Номенклатура КАК Номенклатура,
	|	ДР_КРаспределению.Характеристика КАК Характеристика,
	|	ДР_КРаспределению.ПланПродаж КАК ПланПродаж,
	|	ДР_КРаспределению.Документ КАК Документ,
	|	ДР_КРаспределению.КоличествоВход КАК КоличествоВход,
	|	ДР_КРаспределению.КоличествоРаспределено КАК КоличествоРаспределено,
	|	ДР_КРаспределению.ДокументРаспределения КАК ДокументРаспределения,
	|	ДР_КРаспределению.Коллекция КАК Коллекция
	|ПОМЕСТИТЬ ВТ_РегистрРаспределения
	|ИЗ
	|	ВТ_Каналы КАК ВТ_Каналы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КСП_РС_ДиспетчерРаспределения КАК ДР_КРаспределению
	|		ПО (ДР_КРаспределению.Источник = ВТ_Каналы.Родитель)
	|ГДЕ
	|	ДР_КРаспределению.Коллекция = &Коллекция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка.Организация КАК Организация,
	|	ЗаказКлиентаТовары.Ссылка.КСП_Коллекция КАК КСП_Коллекция,
	|	ЗаказКлиентаТовары.Ссылка.КСП_Канал КАК КСП_Канал,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.КСП_Канал В ИЕРАРХИИ(&Родитель)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Ссылка.Организация,
	|	ЗаказКлиентаТовары.Ссылка.КСП_Коллекция,
	|	ЗаказКлиентаТовары.Ссылка.КСП_Канал,
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КСП_ДиспетчерРаспределенияОстатки.Организация КАК Организация,
	|	КСП_ДиспетчерРаспределенияОстатки.Коллекция КАК Коллекция,
	|	КСП_ДиспетчерРаспределенияОстатки.Источник КАК Источник,
	|	КСП_ДиспетчерРаспределенияОстатки.Номенклатура КАК Номенклатура,
	|	КСП_ДиспетчерРаспределенияОстатки.Характеристика КАК Характеристика,
	|	КСП_ДиспетчерРаспределенияОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Распределено
	|ИЗ
	|	РегистрНакопления.КСП_ДиспетчерРаспределения.Остатки(
	|			&ТекущаяДата,
	|			Коллекция = &Коллекция
	|				И Организация = &организация
	|				И Источник В ИЕРАРХИИ (&Родитель)) КАК КСП_ДиспетчерРаспределенияОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РегистрРаспределения.Организация КАК Организация,
	|	ВТ_РегистрРаспределения.ПланПродаж КАК ПланПродаж,
	|	ВТ_РегистрРаспределения.Коллекция КАК Коллекция,
	|	ВТ_РегистрРаспределения.Канал КАК Канал,
	|	ВТ_РегистрРаспределения.Источник КАК Источник,
	|	ВТ_РегистрРаспределения.Приемник КАК Приемник,
	|	ВТ_РегистрРаспределения.Номенклатура КАК Номенклатура,
	|	ВТ_РегистрРаспределения.Характеристика КАК Характеристика,
	|	ВТ_РегистрРаспределения.Документ КАК Документ,
	|	ВТ_РегистрРаспределения.КоличествоВход КАК КолКРаспределению,
	|	ВТ_Распределено.КоличествоОстаток КАК КолРаспределено,
	|	ЕСТЬNULL(ВТ_Заказы.КоличествоУпаковок, 0) КАК КолЗаказано,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.КоличествоУпаковок ЕСТЬ NULL
	|				ИЛИ ВТ_Заказы.КоличествоУпаковок = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Распределено.КоличествоОстаток / ВТ_Заказы.КоличествоУпаковок * 100
	|	КОНЕЦ КАК РаспределеноПроц
	|	
	|ИЗ
	|	ВТ_РегистрРаспределения КАК ВТ_РегистрРаспределения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|		ПО (ВТ_РегистрРаспределения.Канал = ВТ_Заказы.КСП_Канал)
	|			И (ВТ_РегистрРаспределения.Коллекция = ВТ_Заказы.КСП_Коллекция)
	|			И (ВТ_РегистрРаспределения.Организация = ВТ_Заказы.Организация)
	|			И (ВТ_РегистрРаспределения.Номенклатура = ВТ_Заказы.Номенклатура)
	|			И (ВТ_РегистрРаспределения.Характеристика = ВТ_Заказы.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Распределено КАК ВТ_Распределено
	|		ПО (ВТ_РегистрРаспределения.Организация = ВТ_Распределено.Организация
	|				И ВТ_РегистрРаспределения.Коллекция = ВТ_Распределено.Коллекция
	|				И ВТ_РегистрРаспределения.Канал = ВТ_Распределено.Источник
	|				И ВТ_Распределено.Номенклатура = ВТ_РегистрРаспределения.Номенклатура
	|				И ВТ_РегистрРаспределения.Характеристика = ВТ_Распределено.Характеристика)";
	
	тзРаспределениеКаналы = ТаблицаРаспределенияКаналы();
	
	ЧисловыеКолонки = "КолКРаспределению, КолРаспределено, КолЗаказано, РаспределеноПроц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерЗаписи = 0;
	Пока Выборка.Следующий() Цикл
		НомерЗаписи = НомерЗаписи + 1;		
		СтрТаб = тзРаспределениеКаналы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаб, Выборка);
		СтрТаб.НомерЗаписи = НомерЗаписи;
	КонецЦикла;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресИсходныхДанныхКаналы) Тогда
		АдресИсходныхДанныхКаналы = НовыйАдресИсходныхДанных();
	КонецЕсли;
	ПоместитьВоВременноеХранилище(тзРаспределениеКаналы, АдресИсходныхДанныхКаналы);
	
КонецПроцедуры


Функция ЗаписатьРаспределениепоКаналам() Экспорт
	
	// 1. Получить строки распределения по каналам
	МассивСтрок = ЭтотОбъект.РаспределениеКаналы.Строки.НайтиСтроки(Новый Структура("Распределять", Истина) , Истина);
	ТабРаспредКаналы = ТаблицаРаспределенияКаналы();
	Для Каждого Элемент Из МассивСтрок Цикл
		НоваяСтрока = ТабРаспредКаналы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;
	
	// 2. Внести изменения в документ резервирования  по направлению 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Таб.Организация КАК Организация,
	|	ВТ_Таб.ПланПродаж КАК ПланПродаж,
	|	ВТ_Таб.Канал КАК Канал,
	|	ВТ_Таб.Коллекция КАК Коллекция,
	|	ВТ_Таб.Документ КАК Документ,
	|	ВТ_Таб.Номенклатура КАК Номенклатура,
	|	ВТ_Таб.Характеристика КАК Характеристика,
	|	ВТ_Таб.КолЗаказано КАК КолЗаказано,
	|	ВТ_Таб.КолКРаспределению КАК КолКРаспределению,
	|	ВТ_Таб.КолРаспределено КАК КолРаспределено,
	|	ВТ_Таб.РаспределеноПроц КАК РаспределеноПроц,
	|	ВТ_Таб.Уровень КАК Уровень,
	|	ВТ_Таб.НомерЗаписи КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_Таб
	|ИЗ
	|	&ТабРаспредКаналы КАК ВТ_Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таб.Организация КАК Организация,
	|	ВТ_Таб.ПланПродаж КАК ПланПродаж,
	|	ВТ_Таб.Канал КАК Канал,
	|	ВТ_Таб.Коллекция КАК Коллекция,
	|	ВТ_Таб.Документ КАК Документ,
	|	ВТ_Таб.Номенклатура КАК Номенклатура,
	|	ВТ_Таб.Характеристика КАК Характеристика,
	|	СУММА(ВТ_Таб.КолЗаказано) КАК КолЗаказано,
	|	ВТ_Таб.КолКРаспределению КАК КолКРаспределению,
	|	СУММА(ВТ_Таб.КолРаспределено) КАК КолРаспределено,
	|	ВТ_Таб.РаспределеноПроц КАК РаспределеноПроц,
	|	ВТ_Таб.Уровень КАК Уровень,
	|	ВТ_Таб.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	ВТ_Таб КАК ВТ_Таб
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Таб.Документ,
	|	ВТ_Таб.Характеристика,
	|	ВТ_Таб.Номенклатура,
	|	ВТ_Таб.Организация,
	|	ВТ_Таб.ПланПродаж,
	|	ВТ_Таб.НомерЗаписи,
	|	ВТ_Таб.Канал,
	|	ВТ_Таб.Коллекция,
	|	ВТ_Таб.Уровень,
	|	ВТ_Таб.КолКРаспределению,
	|	ВТ_Таб.РаспределеноПроц
	|ИТОГИ
	|	СУММА(КолЗаказано),
	|	МИНИМУМ(КолКРаспределению),
	|	СУММА(КолРаспределено)
	|ПО
	|	Документ,
	|	Номенклатура,
	|	Характеристика";
	
	
	Запрос.УстановитьПараметр("ТабРаспредКаналы", ТабРаспредКаналы);
	РезультатЗапроса = Запрос.Выполнить();
	
	
	НачатьТранзакцию();
	
	ВыборкаДокумент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		// Вставить обработку выборки ВыборкаДокумент                                 		
		ДокОбъект = ВыборкаДокумент.Документ.ПолучитьОбъект();
		
		ВыборкаНоменклатура = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			// Вставить обработку выборки ВыборкаНоменклатура
			
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристика.Следующий() Цикл
				// Вставить обработку выборки ВыборкаХарактеристика
				
				ТЧДокумента = ДокОбъект.Товары;
				
				ПараметрыОтбора = Новый Структура; 
				ПараметрыОтбора.Вставить("Номенклатура", ВыборкаХарактеристика.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", ВыборкаХарактеристика.Характеристика);
				
				СтрокаТЧ = ТЧДокумента.НайтиСтроки(ПараметрыОтбора)[0];
				СтрокаТЧ.Количество 		= СтрокаТЧ.Количество - ВыборкаХарактеристика.КолРаспределено; 
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок - ВыборкаХарактеристика.КолРаспределено;
				
				ДетальныеЗаписи = ВыборкаХарактеристика.Выбрать();  
				
				// Изменяем строку в регистре КСП_РС_ДиспетчерРаспределения. прописываем распределенное количество.
				
				НаборЗаписей = РегистрыСведений.КСП_РС_ДиспетчерРаспределения.СоздатьНаборЗаписей();
				//НаборЗаписей.Отбор.Коллекция.Установить(ВыборкаХарактеристика.Коллекция);
				НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаХарактеристика.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаХарактеристика.Характеристика);
				НаборЗаписей.Отбор.Документ.Установить(ВыборкаДокумент.Документ); 
				НаборЗаписей.Прочитать(); 
				Для Каждого Запись Из НаборЗаписей Цикл // записей должна быть 1 штука
					Запись.КоличествоРаспределено = Запись.КоличествоРаспределено + ВыборкаХарактеристика.КолРаспределено;		
				КонецЦикла;  
				НаборЗаписей.Записать();
				ВыборкаКаналы = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КонецЦикла;
			
		КонецЦикла; 
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	
	//Сформировать документы резервирования для каналов 
	
	Каналы = ЭтотОбъект.РаспределениеКаналы.Строки.ВыгрузитьКолонку("Канал");
	тзКаналы = ПодготовитьТзКаналы(Каналы);
	
	Для Каждого Элемент Из тзКаналы Цикл                                                                        
		
		ПараметрыПоиска = Новый Структура;
		
		ПараметрыПоиска.Вставить("Распределять", Истина);
		ПараметрыПоиска.Вставить("Канал", Элемент.Канал);
		МассивСтрок = ЭтотОбъект.РаспределениеКаналы.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
		
		ЗапросДок = Новый Запрос;
		ЗапросДок.Текст = "ВЫБРАТЬ
		                  |	ЗаказНаВнутреннееПотребление.Ссылка КАК Ссылка
		                  |ИЗ
		                  |	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		                  |ГДЕ
		                  |	ЗаказНаВнутреннееПотребление.КСП_Коллекция = &КСП_Коллекция
		                  |	И ЗаказНаВнутреннееПотребление.КСП_ТипДокументаСлужебногоРезерва = &КСП_ТипДокументаСлужебногоРезерва
		                  |	И ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение
		                  |	И ЗаказНаВнутреннееПотребление.Организация = &Организация
		                  |	И ЗаказНаВнутреннееПотребление.Проведен"; 
		
		ЗапросДок.УстановитьПараметр("КСП_Коллекция", Коллекция);
		ЗапросДок.УстановитьПараметр("КСП_ТипДокументаСлужебногоРезерва", Перечисления.КСП_ТипДокументаСлужебногоРезерва.РаспределениеГотовойПродукцииКаналы);
		ЗапросДок.УстановитьПараметр("Подразделение", Элемент.Канал);
		ЗапросДок.УстановитьПараметр("Организация", Организация);
		Выборка = ЗапросДок.Выполнить().Выбрать();
		
		// найти предыдущий документ резерва. Если не найден - создать
		Если Выборка.Следующий() Тогда
			ДокКанал = Выборка.Ссылка;
			ДокКаналОбъект = ДокКанал.ПолучитьОбъект();
		Иначе
			ДокКаналОбъект = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
		КонецЕсли;
		
		ДокКаналОбъект.Дата = ТекущаяДата();
		ДокКаналОбъект.КСП_Коллекция = Коллекция;
		ДокКаналОбъект.КСП_ТипДокументаСлужебногоРезерва = Перечисления.КСП_ТипДокументаСлужебногоРезерва.РаспределениеГотовойПродукцииКаналы;
		ДокКаналОбъект.Организация = Организация;
		ДокКаналОбъект.Подразделение = Элемент.Канал; 
		ДокКаналОбъект.Склад = СкладОстатков;
		ДокКаналОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
		ДокКаналОбъект.Автор = ПараметрыСеанса.ТекущийПользователь; 
		ДокКаналОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний"); 
		ДокКаналОбъект.Комментарий = "Создан автоматически обработкой 'Диспетчер распределения готовой продукции'";
		ДокКаналОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		Для Каждого Элемент Из МассивСтрок Цикл 
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Элемент.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", Элемент.Характеристика);
			Результат = ДокКаналОбъект["Товары"].НайтиСтроки(ПараметрыОтбора);
			Если Результат.Количество() > 0 Тогда
				СтрокаИзм = Результат[0];
				ЗаполнитьЗначенияСвойств(СтрокаИзм, Результат);
				СтрокаИзм.Количество = ?(Элемент.КолРаспределено < 0, СтрокаИзм.Количество + Элемент.КолРаспределено, Элемент.КолРаспределено);  
				СтрокаИзм.КоличествоУпаковок = ?(Элемент.КолРаспределено < 0, СтрокаИзм.КоличествоУпаковок + Элемент.КолРаспределено, Элемент.КолРаспределено);
				СтрокаИзм.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				СтрокаИзм.СтатьяРасходов = ПредопределенноеЗначение(
				"ПланВидовХарактеристик.СтатьиРасходов.ОтклонениеВСтоимостиТоваров");
			Иначе
				НоваяСтрока = ДокКаналОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент); 
				НоваяСтрока.Количество = Элемент.КолРаспределено; 
				НоваяСтрока.КоличествоУпаковок = Элемент.КолРаспределено;
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				НоваяСтрока.СтатьяРасходов = ПредопределенноеЗначение(
				"ПланВидовХарактеристик.СтатьиРасходов.ОтклонениеВСтоимостиТоваров");
			КонецЕсли;	
		КонецЦикла;                                         
		
		ДокКаналОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТзКаналы(Массив)
	
	тзКаналы = Новый ТаблицаЗначений;
	тзКаналы.Колонки.Добавить("Канал");
	Для Каждого Канал Из Массив Цикл 
		Если ЗначениеЗаполнено(Канал) Тогда
			Стр = тзКаналы.Добавить();
			Стр.Канал = Канал;                 
		КонецЕсли;
	КонецЦикла;
	
	тзКаналы.Свернуть("Канал");
	
	Возврат тзКаналы;	       
	
КонецФункции	



Процедура ИнициализироватьДеревоРаспределения()
	
	Если ЗначениеЗаполнено(Распределение.Колонки) Тогда
		Возврат;
	КонецЕсли;
	
	Распределение = Новый ДеревоЗначений;
	Для Каждого Колонка Из ТаблицаРаспределения().Колонки Цикл
		Распределение.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
	КонецЦикла;
	
КонецПроцедуры


Функция ТаблицаРаспределения()
	
	тзРаспределение = Новый ТаблицаЗначений;
	
	// Все доступные типы колонок для структур распределения
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипЧисло_10_0		= ОбщегоНазначения.ОписаниеТипаЧисло(10, 0);
	ТипЧисло_15_3		= ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ТипЧисло_1_0		= ОбщегоНазначения.ОписаниеТипаЧисло(1, 0);
	
	тзРаспределение.Колонки.Добавить("Номенклатура",					ТипНоменклатура);
	тзРаспределение.Колонки.Добавить("Характеристика",					ТипХарактеристика);
	тзРаспределение.Колонки.Добавить("КоличествоОстаток",				ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоДоступно",				ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоПлановоеОпт",			ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоПлановоеРозница",		ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоПлановоеECOM",			ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоРаспределеноОпт",		ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоРаспределеноРозница",	ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоРаспределеноECOM",		ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоНеРаспределеноОпт",		ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоНеРаспределеноРозница",	ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоНеРаспределеноECOM",	ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("ПроцентОбеспеченияОпт",			ТипЧисло_15_3);
	тзРаспределение.Колонки.Добавить("ПроцентОбеспеченияРозница",		ТипЧисло_15_3);
	тзРаспределение.Колонки.Добавить("ПроцентОбеспеченияECOM",			ТипЧисло_15_3);
	тзРаспределение.Колонки.Добавить("КоличествоДоступноОпт",			ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоДоступноРозница",		ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("КоличествоДоступноECOM",			ТипЧисло_10_0);
	тзРаспределение.Колонки.Добавить("Уровень",							ТипЧисло_1_0);
	тзРаспределение.Колонки.Добавить("НомерЗаписи",						ТипЧисло_10_0);
	
	Возврат тзРаспределение;
	
КонецФункции  


Функция ТаблицаРаспределенияКаналы()
	
	тзРаспределениеКаналы = Новый ТаблицаЗначений;
	
	// Все доступные типы колонок для структур распределения
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипДокумент		= Новый ОписаниеТипов("ДокументСсылка.ЗаказНаВнутреннееПотребление");
	ТипКанал		= Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ТипПланПродаж 	= Новый ОписаниеТипов("ДокументСсылка.ПланПродаж");
	ТипОрганизация  = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипКоллекция	= Новый ОписаниеТипов("СправочникСсылка.КоллекцииНоменклатуры");
	
	
	ТипЧисло_10_0		= ОбщегоНазначения.ОписаниеТипаЧисло(10, 0);
	ТипЧисло_15_3		= ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);                                                       	
	ТипЧисло_1_0		= ОбщегоНазначения.ОписаниеТипаЧисло(1, 0);
	
	тзРаспределениеКаналы.Колонки.Добавить("Организация",						ТипОрганизация);
	тзРаспределениеКаналы.Колонки.Добавить("ПланПродаж",						ТипПланПродаж);
	тзРаспределениеКаналы.Колонки.Добавить("Коллекция",							ТипКоллекция);					
	тзРаспределениеКаналы.Колонки.Добавить("Канал",                             ТипКанал); 
	тзРаспределениеКаналы.Колонки.Добавить("Номенклатура",						ТипНоменклатура);
	тзРаспределениеКаналы.Колонки.Добавить("Характеристика",					ТипХарактеристика);
	тзРаспределениеКаналы.Колонки.Добавить("Документ", 							ТипДокумент);
	
	тзРаспределениеКаналы.Колонки.Добавить("КолКРаспределению",					ТипЧисло_10_0);
	тзРаспределениеКаналы.Колонки.Добавить("КолРаспределено",					ТипЧисло_10_0);
	тзРаспределениеКаналы.Колонки.Добавить("КолЗаказано",						ТипЧисло_10_0);
	тзРаспределениеКаналы.Колонки.Добавить("РаспределеноПроц",					ТипЧисло_15_3);
	тзРаспределениеКаналы.Колонки.Добавить("Уровень",							ТипЧисло_1_0);
	тзРаспределениеКаналы.Колонки.Добавить("НомерЗаписи",						ТипЧисло_10_0);
	
	Возврат тзРаспределениеКаналы;
	
КонецФункции



Процедура РезервироватьНоменклатуруДляРаспределения(Подразделение, ПолеКоличество)
	
	Если НЕ ЗначениеЗаполнено(Распределение.Строки) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	// Записывать распределение будем через "Документ.ЗаказНаВнутреннееПотребление".
	// Он позволяет зарезервировать товар, забрав его со свободного остатка - из колонки "КоличествоДоступно".
	// Товары, которые будут в этом документе попадут после проведения документа в колонки "КоличествоРаспределеноОпт",
	// "КоличествоРаспределеноРозница" и "КоличествоРаспределеноECOM" соответственно.
	
	// 1. Определим товары для обработки и достанем их вспомогательные реквизиты.
	ТоварыДляОбработки = Новый Массив;
	Для Каждого СтрДерТовар Из Распределение.Строки Цикл
		Если ЗначениеЗаполнено(СтрДерТовар[ПолеКоличество]) Тогда
			ТоварыДляОбработки.Добавить(СтрДерТовар.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	НужныеРеквизитыТоваров = "Код, Наименование, ЕдиницаИзмерения, КоллекцияНоменклатуры";
	РеквизитыТоваров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТоварыДляОбработки, НужныеРеквизитыТоваров);
	
	// 2. Подготовим строки для записи, сгруппировав их по полю "КоллекцияНоменклатуры".
	// Нужны только строки, где заполнено "КолВоТовараКРаспределению".
	
	СтрокиКоллекций = Новый Соответствие;
	Для Каждого СтрДерТовар Из Распределение.Строки Цикл
		РеквизитыТовара = РеквизитыТоваров.Получить(СтрДерТовар.Номенклатура);
		Если РеквизитыТовара = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыТовара.КоллекцияНоменклатуры) Тогда
			ТекстОшибки = НСтр(
			"ru = 'Для товара [%1] (код = %2) не указана коллекция!'");
			ТекстОшибки = СтрШаблон(ТекстОшибки,
			РеквизитыТовара.Наименование, РеквизитыТовара.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СтрДерТовар.Номенклатура);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		СтрокиТекущейКоллеции = СтрокиКоллекций.Получить(РеквизитыТовара.КоллекцияНоменклатуры);
		Если СтрокиТекущейКоллеции = Неопределено Тогда
			СтрокиТекущейКоллеции = Новый Массив;
			СтрокиКоллекций.Вставить(РеквизитыТовара.КоллекцияНоменклатуры, СтрокиТекущейКоллеции);
		КонецЕсли;
		
		Для Каждого СтрДерХаракт Из СтрДерТовар.Строки Цикл
			Если ЗначениеЗаполнено(СтрДерХаракт[ПолеКоличество]) Тогда
				СтрокиТекущейКоллеции.Добавить(СтрДерХаракт);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// 3. Теперь обрабатываем эти группы из п.2.
	// Для каждой группы до найти подходящий документ вида "Документ.ЗаказНаВнутреннееПотребление" по реквизитам:
	// - "Подразделение" = "ПодразделениеОпт"/"ПодразделениеРозница"/"ПодразделениеECOM"
	// - "КСП_Коллекция" = "КоллекцияНоменклатуры"
	// Чтобы не спутать с другими документами, ищем его по дополнительному реквизиту с именем
	// "ДокументРаспределенияГотовойПродукции" в ТЧ "Документ.ЗаказНаВнутреннееПотребление.ДополнительныеРеквизиты".
	// Если не находим - создаём новый.
	
	МенеджерДокумента = Документы.ЗаказНаВнутреннееПотребление;
	
	Для Каждого ДанныеКоллекции ИЗ СтрокиКоллекций Цикл
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		КоллекцияНоменклатуры = ДанныеКоллекции.Ключ;
		СтрокиДерева = ДанныеКоллекции.Значение;
		
		ЗаказОбъект = ЗаказНаВнутреннееПотреблениеДляРезерва(Подразделение, КоллекцияНоменклатуры);
		
		// Дополняем ТЧ "Документ.ЗаказНаВнутреннееПотребление.Товары"
		
		// Служебные данные для обработки строки добавленного товара (урезанная бизнес-логика
		// из формы "Документ.ЗаказНаВнутреннееПотребление"
		ВариантОбеспеченияРезерв = Перечисления.ВариантыОбеспечения.СоСклада;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Для Каждого СтрДерХаракт Из СтрокиДерева Цикл
			
			СтрДерТовар = СтрДерХаракт.Родитель;
			
			ТекущийТовар = СтрДерТовар.Номенклатура;
			РеквизитыТовара = РеквизитыТоваров.Получить(ТекущийТовар);
			
			КолВоКРаспределению = СтрДерХаракт[ПолеКоличество];
			
			СтрокиТовара = ЗаказОбъект.Товары.НайтиСтроки(
			Новый Структура("Номенклатура, Характеристика", ТекущийТовар, СтрДерХаракт.Характеристика));
			
			Если ЗначениеЗаполнено(СтрокиТовара) Тогда
				ТекущаяСтрока = СтрокиТовара[0];
				НовоеКоличество = ТекущаяСтрока.Количество + КолВоКРаспределению;
				
				Если НовоеКоличество < 0 Тогда
					ТекстОшибки = НСтр(
					"ru = 'Для товара [%1] (код = %2), характ-ка [%3] в [%4] будет отрицательное количество!'");
					ТекстОшибки = СтрШаблон(ТекстОшибки,
					РеквизитыТовара.Наименование,
					РеквизитыТовара.Код,
					СтрДерХаракт.Характеристика,
					ЗаказОбъект);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЗаказОбъект.Ссылка);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ТекущаяСтрока.Количество			= НовоеКоличество;
				ТекущаяСтрока.КоличествоУпаковок	= НовоеКоличество;
				
			Иначе
				ТекущаяСтрока = ЗаказОбъект.Товары.Добавить();
				
				ТекущаяСтрока.Номенклатура			= ТекущийТовар;
				ТекущаяСтрока.Характеристика		= СтрДерХаракт.Характеристика;
				ТекущаяСтрока.Упаковка				= РеквизитыТовара.ЕдиницаИзмерения;
				ТекущаяСтрока.Количество			= КолВоКРаспределению;
				ТекущаяСтрока.КоличествоУпаковок	= КолВоКРаспределению;
				ТекущаяСтрока.ВариантОбеспечения	= ВариантОбеспеченияРезерв;
				
			КонецЕсли;
			
			ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.СтатьиРасходов.ОтклонениеВСтоимостиТоваров");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			Если ТекущаяСтрока.Количество <= 0 Тогда
				ЗаказОбъект.Товары.Удалить(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		// 3. Проводим документ, он должен убрать из свободного остатка выбранные товары
		
		Если (ЗаказОбъект.ЭтоНовый() И ЗначениеЗаполнено(ЗаказОбъект.Товары))
			ИЛИ (НЕ ЗаказОбъект.ЭтоНовый() И ЗаказОбъект.Модифицированность()) Тогда
			
			МенеджерДокумента.КСП_УстановитьДопСвойствоДиспетчераРаспределенияГотовойПродукции(ЗаказОбъект);
			Если ЗначениеЗаполнено(ЗаказОбъект.Товары) Тогда
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);  // оставим его просто записанным
			КонецЕсли;
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию(); 
		
		// 4. Записываем движения в регистре КСП_РС_ДиспетчерРаспределения.  
		
		ДокСсылка = ЗаказОбъект.Ссылка;
		Отбор = Новый Структура("Документ", ЗаказОбъект.Ссылка);
		НаборЗаписей = РегистрыСведений.КСП_РС_ДиспетчерРаспределения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ДокСсылка);
		НаборЗаписей.Записать(Истина);
		
		Для Каждого Строка Из ДокСсылка.Товары Цикл
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.Организация = ДокСсылка.Организация;
			НоваяСтрока.Коллекция = Коллекция;
			НоваяСтрока.Склад = ДокСсылка.Склад; 
			НоваяСтрока.Источник = ДокСсылка.Подразделение;
			//НоваяСтрока.Приемник =  ; // На этом этапе не заполняется
			НоваяСтрока.Номенклатура = Строка.Номенклатура;
			НоваяСтрока.Характеристика = Строка.Характеристика; 
			НоваяСтрока.ПланПродаж = ПланПродаж;
			НоваяСтрока.Документ = ДокСсылка;
			//НоваяСтрока.ДокументРаспределения = ; // На этом этапе не заполняется
			НоваяСтрока.КоличествоВход = Строка.КоличествоУпаковок;
			//НоваяСтрока.КоличествоРаспределено = ; // На этом этапе не заполняется						;
			НоваяСтрока.Период = ДокСсылка.Дата;
			
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		
		
	КонецЦикла;
	
	
КонецПроцедуры


Функция ЗаказНаВнутреннееПотреблениеДляРезерва(Подразделение, КоллекцияНоменклатуры)
	
	ТипДокументаРезерва = ОбщегоНазначения.ПредопределенныйЭлемент(
	"Перечисление.КСП_ТипДокументаСлужебногоРезерва.РаспределениеГотовойПродукции");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение",			Подразделение);
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры",	КоллекцияНоменклатуры);
	Запрос.УстановитьПараметр("ТипДокумента",			ТипДокументаРезерва);
	
	Запрос.Текст =
	"ВЫБРАТь
	|	Док.Ссылка
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК Док
	|ГДЕ
	|	Док.Подразделение = &Подразделение
	|	И Док.КСП_Коллекция = &КоллекцияНоменклатуры
	|	И Док.КСП_ТипДокументаСлужебногоРезерва = &ТипДокумента
	|	И НЕ Док.ПометкаУдаления
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		ТекстОшибки = НСтр(
		"ru = 'Найдено более одного документа для распределения готовой продукции коллекции [%1] подразделения [%2]'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, КоллекцияНоменклатуры, Подразделение);
	ИначеЕсли Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаказОбъект = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
	
	ЗаказОбъект.Дата					= ТекущаяДатаСеанса();
	ЗаказОбъект.Приоритет				= Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ЗаказОбъект.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ЗаказОбъект.Организация				= Организация;
	ЗаказОбъект.Склад					= СкладОстатков;
	ЗаказОбъект.Подразделение			= Подразделение;
	ЗаказОбъект.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
	
	ЗаказОбъект.КСП_Коллекция						= КоллекцияНоменклатуры;
	ЗаказОбъект.КСП_ТипДокументаСлужебногоРезерва	= ТипДокументаРезерва;
	
	ЗаказОбъект.Комментарий = "Создан автоматически обработкой 'Диспетчер распределения готовой продукции'";
	
	Возврат ЗаказОбъект;
	
КонецФункции


Функция НовыйАдресИсходныхДанных(Знач ИдентификаторАдреса = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресИсходныхДанных) Тогда
		УдалитьИзВременногоХранилища(АдресИсходныхДанных);
	КонецЕсли;
	
	Если ИдентификаторАдреса = Неопределено Тогда
		ИдентификаторАдреса = Новый УникальныйИдентификатор;
	КонецЕсли;                                                                    
	
	АдресИсходныхДанных = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторАдреса);
	
	Возврат АдресИсходныхДанных;
	
КонецФункции   


Функция НовыйАдресИсходныхДанныхКаналы(Знач ИдентификаторАдреса = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресИсходныхДанныхКаналы) Тогда
		УдалитьИзВременногоХранилища(АдресИсходныхДанныхКаналы);
	КонецЕсли;
	
	Если ИдентификаторАдреса = Неопределено Тогда
		ИдентификаторАдреса = Новый УникальныйИдентификатор;
	КонецЕсли;                                                                    
	
	АдресИсходныхДанныхКаналы = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторАдреса);
	
	Возврат АдресИсходныхДанныхКаналы;
	
КонецФункции


Функция НовыйАдресОтборовСКД(Знач ИдентификаторАдреса = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресОтборовСКД) Тогда
		УдалитьИзВременногоХранилища(АдресОтборовСКД);
	КонецЕсли;
	
	Если ИдентификаторАдреса = Неопределено Тогда
		ИдентификаторАдреса = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресОтборовСКД = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторАдреса);
	
	ПоместитьВоВременноеХранилище(ПолучитьМакет("Отборы"), АдресОтборовСКД);
	
	Возврат АдресОтборовСКД;
	
КонецФункции 


Функция НовыйАдресОтборовСКДКаналы(Знач ИдентификаторАдреса = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресОтборовСКДКаналы) Тогда
		УдалитьИзВременногоХранилища(АдресОтборовСКДКаналы);
	КонецЕсли;
	
	Если ИдентификаторАдреса = Неопределено Тогда
		ИдентификаторАдреса = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресОтборовСКДКаналы = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторАдреса);
	
	ПоместитьВоВременноеХранилище(ПолучитьМакет("ОтборыКаналы"), АдресОтборовСКДКаналы);
	
	Возврат АдресОтборовСКДКаналы;
	
КонецФункции


Процедура ИнициализироватьКомпоновщик(Знач ИспользуемыйКомпоновщик = Неопределено) Экспорт
	
	Если ИспользуемыйКомпоновщик = Неопределено Тогда
		ИспользуемыйКомпоновщик = Компоновщик;
	КонецЕсли;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресОтборовСКД);
	ИспользуемыйКомпоновщик.Инициализировать(ИсточникНастроек);
	
	СКД = ПолучитьИзВременногоХранилища(АдресОтборовСКД);
	ИспользуемыйКомпоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры 


Процедура ИнициализироватьКомпоновщикКаналы(Знач ИспользуемыйКомпоновщик = Неопределено) Экспорт
	
	Если ИспользуемыйКомпоновщик = Неопределено Тогда
		ИспользуемыйКомпоновщик = КомпоновщикКаналы;
	КонецЕсли;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресОтборовСКДКаналы);
	ИспользуемыйКомпоновщик.Инициализировать(ИсточникНастроек);
	
	СКД = ПолучитьИзВременногоХранилища(АдресОтборовСКДКаналы);
	ИспользуемыйКомпоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры


// Исполняет макет компоновки, применяя настройки, и возвращает таблицу значений или дерево значений
//
// Параметры:
//  Параметры - см. КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД
//  АдресВременногоХранилища - Строка - если в этом параметре передается адрес временного хранилища,
//  				то результатирующая таблица помещается по этому адресу.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Строка - результирующая таблица значений или ее адрес во временном хранилище 
//
Функция ВыгрузитьРезультатСКД(Параметры, АдресВременногоХранилища = "")
	
	Перем МенеджерВременныхТаблиц;
	
	Параметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Если Параметры.ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СхемаКомпоновки = КомпоновкаДанныхСервер.СхемаКомпоновкиПоПараметру(Параметры.СхемаКомпоновки);
	
	// В выбранных полях в настройках компоновщика должны обязательно
	// быть поля, которые есть в выбранных полях в настройках по умолчанию
	// для СКД
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(
	Параметры.НастройкиКомпоновки.Выбор,
	СхемаКомпоновки.НастройкиПоУмолчанию.Выбор
	);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
	КомпоновкаДанныхСервер.НастройкиКомпоновкиПоПараметру(СхемаКомпоновки, Параметры.НастройкиКомпоновки),,,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если Параметры.ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,,,
		Параметры.ВозможностьИспользованияВнешнихФункций,,
		МенеджерВременныхТаблиц);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
		Параметры.ВнешниеНаборыДанных,,
		Параметры.ВозможностьИспользованияВнешнихФункций,,
		МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если Параметры.ТипРезультата = "ТаблицаЗначений" Тогда
		РезультирующаяТаблица = Новый ТаблицаЗначений;
	ИначеЕсли Параметры.ТипРезультата = "ДеревоЗначений" Тогда
		РезультирующаяТаблица = Новый ДеревоЗначений;
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестный тип результата %ТипРезультата%';
		|en = 'Unknown result type %ТипРезультата%'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРезультата%", Параметры.ТипРезультата);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультирующаяТаблица);	
	РезультирующаяТаблица = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Параметры.ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Для Каждого Колонка Из Параметры.ОжидаемыеКолонки.Колонки Цикл
		Если РезультирующаяТаблица.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			РезультирующаяТаблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультирующаяТаблица, АдресВременногоХранилища);
		Возврат АдресВременногоХранилища;
	Иначе
		Возврат РезультирующаяТаблица;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
