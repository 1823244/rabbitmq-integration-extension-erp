// Обработка создает заказы клиентов

// схема работы:
//	Мод_ЗагрузитьЗаказы()
//		ПолучитьИсториюИзменений()
//		ЗагрузкаЗаказов()
//			Мод_СозданиеЗаказов()
//				УТ11_СоздатьЗаказ()

// настройки
Перем ИмяСервера;
Перем КлючCRM;
Перем КодМагазина;
Перем мСклад;
Перем мДоставка;
Перем ЗакупочнаяЦена;
Перем ЦенаПродажи;
Перем Организация;
Перем БанковскийСчет;
Перем ОсновнаяКасса;
Перем Валюта;
Перем Налогообложение;
Перем ЦенаВключаетНДС;
Перем Приоритет;
Перем ТиповоеСоглашение;
Перем ГруппаДоступаПартнеров;
Перем ОтсрочкаДней;
Перем РозничныйПокупатель;
Перем СозданиеВозвратов;
Перем мGUIDОрганизации;


Перем мЗапросСостоянияЗаказов;
Перем мЗапросПоискаЗаказов;   
Перем мЗапросПоискаРеализаций1;




// Точка входа - создание заказов
// Параметры
// 	НастройкиПодключенияКСП - ПВХ КСП_НастройкиRetailCRM - группа
Процедура Мод_ЗагрузитьЗаказы(ИспДатыАктуальности = Неопределено, 
								ДатаИзменений = Неопределено, 
								Знач ИДИзменений = Неопределено,
								НастройкиПодключенияКСП = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")  = Ложь Или 
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")  = Неопределено Тогда
		т = "В программе отключено использование заказов. " + 
		Символы.ПС +  "Для включение опции перейдите в Администрирование - Настройка НСИ и разделов - Продажи - Оптовые продажи." +		
		Символы.ПС + " Установите галочку Заказы клиентов в одноименном разделе";
		ВызватьИсключение т;
	КонецЕсли;
	
	
	НастройкиПодключения = crm_RetailCRMОбщий.ПолучитьНастройки(НастройкиПодключенияКСП); 
	
	ИмяСервера 		= НастройкиПодключения.ИмяСервера;
	КлючCRM 		= НастройкиПодключения.КлючCRM;
	КодМагазина 	= НастройкиПодключения.КодМагазина;
	мСклад 			= НастройкиПодключения.Склад;
	мДоставка 		= НастройкиПодключения.Доставка;
	ЗакупочнаяЦена 	= НастройкиПодключения.ЗакупочнаяЦена;
	ЦенаПродажи 	= НастройкиПодключения.ЦенаПродажи;
	Организация 	= НастройкиПодключения.Организация;
	БанковскийСчет 	= НастройкиПодключения.БанковскийСчет;
	ОсновнаяКасса 	= НастройкиПодключения.ОсновнаяКасса;
	Валюта 			= НастройкиПодключения.Валюта;
	Налогообложение = НастройкиПодключения.Налогообложение;
	ЦенаВключаетНДС = НастройкиПодключения.ЦенаВключаетНДС;
	Приоритет 		= НастройкиПодключения.Приоритет;
	ТиповоеСоглашение = НастройкиПодключения.ТиповоеСоглашение;
	ГруппаДоступаПартнеров = НастройкиПодключения.ГруппаДоступаПартнеров;
	ОтсрочкаДней = НастройкиПодключения.ОтсрочкаДней;
	РозничныйПокупатель = НастройкиПодключения.РозничныйПокупатель;
	СозданиеВозвратов = НастройкиПодключения.СозданиеВозвратов;	
	мGUIDОрганизации = НастройкиПодключения.GUIDОрганизации;	
	
	Если НЕ ЗначениеЗаполнено(ИДИзменений) Тогда
		//ИДИзменений = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("since_Id");
		ИДИзменений = Константы.КСП_Последний_ID_Заказа_RCRM.Получить();
	КонецЕсли;
	
	
	ДатаЗагрузки = ТекущаяДата();
	
	//ЕНС. надо переделать на Исключение
	
	//Отказ = Ложь;
	//Если СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера")) = "" Тогда
	//	лог_("Не указано имя сервера в настройках.");
	//	ЗаписьЖурналаРегистрации("RetailCRM",,,,"Не указано имя сервера." + ДатаЗагрузки);
	//	Отказ = Истина;
	//КонецЕсли;
	//
	//Если СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM")) = "" Тогда
	//	лог_("Не указан ключ api в настройках.");
	//	ЗаписьЖурналаРегистрации("RetailCRM",,,,"Не указан ключ api." + ДатаЗагрузки);
	//	Отказ = Истина;
	//КонецЕсли;
	//
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;

	фильтрИд = "";
	Если ИспДатыАктуальности = Истина Тогда //и ДатаИзменений <> Дата(1,1,1) Тогда          //если стоит флажок загрузки по дате
		Если ДатаИзменений = Неопределено или ДатаИзменений = "" или ДатаИзменений = Дата(1,1,1) Тогда 
			ВызватьИсключение "Не указана дата актуальности!";
		Иначе
			ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка заказов по дате актуальности: " + ДатаИзменений);
			фильтрИд = "";
			фильтрИд = ПолучитьИсториюИзменений(ДатаИзменений,ИспДатыАктуальности);
		КонецЕсли;
	Иначе                                           //загрузка по sinceId
		ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка заказов по sinceId: " + ИДИзменений);
		Если ИДИзменений = 0 Тогда 
			ВызватьИсключение "Не указан id последних изменений. Укажите id или загрузите по дате актуальности, id заполнится автоматически";
		КонецЕсли;
		фильтрИд = "";
		фильтрИд = ПолучитьИсториюИзменений(ИДИзменений,ИспДатыАктуальности);
	КонецЕсли;	
	
	
	// ЕНС. не понимаю пока, как это работает	
	// 
	ТЗБрони = Новый ТаблицаЗначений;
	//Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") = Истина Тогда
	//	packs_sinceId = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("packs_sinceId");
	//	
	//	Мод_ЗагрузитьБрони(packs_sinceId, ТЗБрони, ИспДатыАктуальности, ДатаИзменений);	
	//	
	//КонецЕсли;
	
	Если фильтрИд <> "" и фильтрИд.Количество()>0 Тогда 
		ЗагрузкаЗаказов(фильтрИд, ТЗБрони, НастройкиПодключенияКСП);
		
	ИначеЕсли ТЗБрони.Количество()>0 Тогда
		
		
		//ЕНС. пока отключу
		//ЗагрузкаРезервов(ТЗБрони);
		
		
		
		//были изменения только по броням, их надо подгрузить
	Иначе 
		лог_("За данный период изменения в RetailCRM отсутствовали!");
		Возврат
	КонецЕсли;
	
	лог_(" - Запрос к retailCRM завершён - ");
	
КонецПроцедуры




// Получает измененные заказы с сервера RetailCRM
// Есть 2 режима работы:
// 	ИспДатыАктуальности = Ложь - фильтр должен содержать параметр sinceId, 
//		в котором надо передать последний успешно полученный ИД изменения 
//		(это ИД в таблице History, а не ИД заказа!)
//	ИспДатыАктуальности = Истина - фильтр должен содержать параметр startDate, 
//		в котором надо передать дату, начиная с которой будут выбраны изменения
// Подробнее здесь:
//	https://docs.retailcrm.ru/Developers/API/APIFeatures/WorkingHistoryAPI
// и здесь:
//	http://localhost:9090/pages/viewpage.action?pageId=63078537
//
// Возвращаемое значение
//	Таблица значений, идентификаторы заказов. Колонки:
//		* НомерЗаказа - число - например, 942015 (без буквы S в конце, как у номера заказа)
//
Функция ПолучитьИсториюИзменений(Фильтр="", ИспДатыАктуальности = Ложь) 
	
	Если Фильтр <> "" Тогда 
		Если ИспДатыАктуальности = Истина Тогда 
			АдресСкрипта = "/api/v5/orders/history?filter[startDate]="+ crm_RetailCRMОбщий.ДатаВремяДляCRM(Фильтр) +"&apiKey=" + КлючCRM;
		Иначе 
			АдресСкрипта = "/api/v5/orders/history?filter[sinceId]="+ Формат(Фильтр,"ЧГ=0") +"&apiKey=" + КлючCRM;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = crm_RetailCRMОбщий.ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	ТЗЗаказы = Новый ТаблицаЗначений;
	ТЗЗаказы.Колонки.Добавить("НомерЗаказа");
	//начало - Елисеев :: 23.11.2023
	ТЗЗаказы.Индексы.Добавить("НомерЗаказа");
	//конец - Елисеев :: 23.11.2023
	
	Для каждого стр из Ответ["history"] Цикл
		ПоследнееИзменение = стр["id"]; 
		
		Если стр["source"] = "api" Тогда 
			Если стр["apiKey"] <> Неопределено Тогда 
				Если стр["apiKey"]["current"] = Истина Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрТЗ = ТЗЗаказы.Добавить();
		СтрТЗ.НомерЗаказа = стр["order"]["id"];
		//ПоследнееИзменение = стр["id"]; 
	КонецЦикла;
	
	лог_("ПоследнееИзменение = "+ПоследнееИзменение);
	
	//постраничая разбивка истории
	//вместо постраничной разбивки теперь используется смещение sinceId
	Если ответ["pagination"] <> Неопределено Тогда
		
		всегоСтраниц = ответ["pagination"]["totalPageCount"];
		Счетчик = 2;
		
		Пока всегоСтраниц > 1 Цикл 
			
			АдресСкрипта = "/api/v5/orders/history?filter[sinceId]="+ Формат(ПоследнееИзменение,"ЧГ=0") +"&apiKey=" + КлючCRM;
			
			процент = Окр(Счетчик * 100 / всегоСтраниц,2);
			лог_("Запрос к RetailCRM " + Счетчик + "; " + строка(процент) + "% ...");
			
			ответ = crm_RetailCRMОбщий.ЗапросCRM(АдресСкрипта, ИмяСервера);
			
			Для каждого стр из Ответ["history"] Цикл
				ПоследнееИзменение = стр["id"];
				Если стр["source"] = "api" Тогда 
					Если стр["apiKey"] <> Неопределено Тогда 
						Если стр["apiKey"]["current"] = Истина Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//начало - Елисеев :: 23.11.2023
				//добавил предварительный поиск
				_ид = стр["order"]["id"];
				Если ТЗЗаказы.Найти(_ид,"НомерЗаказа") = Неопределено Тогда
					СтрТЗ = ТЗЗаказы.Добавить();
					СтрТЗ.НомерЗаказа = _ид;
				КонецЕсли;
				//конец - Елисеев :: 23.11.2023
			КонецЦикла;
			лог_("ПоследнееИзменение = "+ПоследнееИзменение);
			всегоСтраниц = ответ["pagination"]["totalPageCount"];
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЕсли;
	//

	Если ПоследнееИзменение <> Неопределено  Тогда 
		//УстановитьЗначениеКонстанты("since_Id", ПоследнееИзменение);
		
		Константы.КСП_Последний_ID_Заказа_RCRM.Установить(ПоследнееИзменение);
		
		
		//ЭтотОбъект.ИДПоследнихИзменений = ПоследнееИзменение;
	КонецЕсли;
	
	ТЗЗаказы.Свернуть("НомерЗаказа");
	
	лог_("Количество заказов к импорту = "+строка(ТЗЗаказы.Количество()));
	
	возврат ТЗЗаказы;
	
КонецФункции

//ЕНС. Вызывается из Мод_ЗагрузитьЗаказы()
Процедура ЗагрузкаЗаказов(МассивИД, ТЗброни = Неопределено, НастройкиПодключенияКСП = Неопределено)
	
	//Загружаем заказы пачками чтобы избавиться от переполнения строки запроса и памяти на сервере на одну операцию
	ApiKey 		= КлючCRM;
	
	КоличествоЗаказов = 0;
	
	МассивИДЗаказов = Новый Массив;
	
	фильтрИд = "";	
	
	Для Инд = 1 по МассивИД.Количество() Цикл
		
		КоличествоЗаказов = КоличествоЗаказов  + 1;
		
		МассивИДЗаказов.Добавить(МассивИД[Инд -1]);
		
		фильтрИд = фильтрИд + "filter[ids][]=" + Формат(МассивИД[Инд -1].НомерЗаказа,"ЧГ=") + "&";
		
		Если  КоличествоЗаказов = 50 тогда 
			
			АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;	  		
			
			Ответ = crm_RetailCRMОбщий.ЗапросCRM(АдресСкрипта, ИмяСервера); 
			//ЕНС. Это похоже баг вендора - не указана ТЗБрони :)
			Мод_СозданиеЗаказов(Ответ["orders"], , НастройкиПодключенияКСП);
			
			КоличествоЗаказов =0;
			МассивИДЗаказов = Новый Массив; 
			фильтрИд = "";	
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ЕНС. Может так получиться, что выйдем из цикла загрузив все заказы. Поэтому проверим сначала.
	Если НЕ фильтрИд = "" Тогда
		
		АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;
		
		Ответ = crm_RetailCRMОбщий.ЗапросCRM(АдресСкрипта, ИмяСервера); 
		
		Мод_СозданиеЗаказов(Ответ["orders"], ТЗброни, НастройкиПодключенияКСП);
		
	КонецЕсли;
	
	лог_("Загрузка заказов завершена");
	
КонецПроцедуры

//МасивЗаказов - массив - элементы массива - структуры или соответствия?
//
Процедура Мод_СозданиеЗаказов(МасивЗаказов, ТЗброни = Неопределено, НастройкиПодключенияКСП = Неопределено) Экспорт
	
	
	НастройкиПодключения = crm_RetailCRMОбщий.ПолучитьНастройки(НастройкиПодключенияКСП);
	
	#Область ПроверкаСтатусовОтключена
	
	// ЕНС. Отключено. Будем загружать все статусы
	
	//НаборСтатусов 	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТабСтатусов");
	
	//Если НаборСтатусов = Неопределено Тогда
	//	т = "Таблица соответствия статусов пуста, заказы не будут загружены в 1С. Чтобы это исправить, перейдите на вкладку ""Статусы"" и добавьте статусы в таблицу.";
	//	ВызватьИсключение т;
	//КонецЕсли;
	
	//Если ТипЗнч(НаборСтатусов) = Тип ("ТаблицаЗначений") И НаборСтатусов.Количество() = 0 Тогда
	//	т = "Таблица соответствия статусов пуста, заказы не будут загружены в 1С. Чтобы это исправить, перейдите на вкладку ""Статусы"" и добавьте статусы в таблицу.";
	//	ВызватьИсключение т;
	//КонецЕсли;    
	
	#КонецОбласти      
	
	// ЕНС. Пока не будем создавать возвраты.
	СоздаватьВозвраты = Ложь; //НастройкиПодключения.СозданиеВозвратов;
	
	Для каждого стр из МасивЗаказов Цикл
		
		Если стр["orderMethod"] = "offline" или стр["orderType"] = "offline" Тогда
			лог_("Заказ № " + стр["number"] + " не был загружен в 1С, т.к orderMethod = offline");
			Продолжить;
		КонецЕсли;
		
		Если стр["items"].Количество() = 0 Тогда
			лог_("Заказ № " + стр["number"] + " не был загружен в 1С, т.к в нем отсутствуют товары!");
			Продолжить;
		КонецЕсли;
		
		// ЕНС. Отключено. Загрузим все статусы, потом разберемся, что с ними делать
		//Если Не СопоставитьСтатус(стр["status"], НаборСтатусов) Тогда 
		//	лог_("ID:"+строка(стр["id"])+". Заказы в статусе " + стр["status"] + " не загружаются в 1С. Чтобы это исправить, перейдите на вкладку ""Статусы"" и добавьте этот статус в список.");
		//	Продолжить;
		//КонецЕсли;
		
		стрЗаказа = ФормированиеСтруктурыЗаказа(стр); // В этой структуре собраны данные заказа		
		
		//искДок = УТ11_ВернутьДокументЗаказ(Строка(стрЗаказа["id"])); //ЕНС. оптимизировано
		искДок = УТ11_ВернутьДокументЗаказ_РС(стрЗаказа["id"], стрЗаказа["site"]);
		
		
		
		Если ЗначениеЗаполнено(искДок) Тогда  
			
			// ЕНС. надо переделать эту схему: вместо флажков на форме настроек сделать хардкод по статусом, где нужен возврат!
			// А пока отключу, чтобы не создавать возвраты
			
			СоздВозврат = Ложь;
			
			//СоответствиеСтатусов = НаборСтатусов.Найти(стр["status"], "КодCRM"); 
			//Если СоответствиеСтатусов <> Неопределено Тогда
			//	СоздВозврат = СоответствиеСтатусов.Возврат;// булево. на форме это флажок в колонке ТЗ
			//КонецЕсли;
			
			Если стр["status"] = "partially-returned" или стр["status"] = "return" или СоздВозврат = Истина Тогда
				Если не СоздаватьВозвраты Тогда 
					Продолжить;
				КонецЕсли;
				
				//проверяем наличие реализации 
				
				ДокРеализация = УТ11_ВернутьРеализацию(искДок.Ссылка);  //ЕНС. Возвращает ТОЛЬКО ПРОВЕДЕННУЮ реализацию!!!!!!!!!
				
				Если ЗначениеЗаполнено(ДокРеализация) и ДокРеализация.Проведен Тогда 
					//делаем возврат на основании реализации, предварительно проверяем был ли уже возврат по реализации
					
					
					//ЕНС пока отключу
					//ДокВозврат = УТ11_ВернутьВозврат(ДокРеализация);
					
					Попытка
						
						
						//ЕНС пока отключу
						//УТ11_СоздатьВозврат(ДокВозврат, ДокРеализация, стрЗаказа.Товары);
						
						
						
					Исключение
					    ЗаписьЖурналаРегистрации("Мод_СозданиеЗаказов_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,искДок,"Не удалось создать/обновить ВОЗВРАТ. ID заказа "+стр["id"]+". Подробности: " + ОписаниеОшибки());
					КонецПопытки;
					
				Иначе 
					лог_("По заказу не было реализации, возврат товаров не будет сделан!");
				КонецЕсли;
			Иначе 
				
				Попытка
					УТ11_СоздатьЗаказ(стрЗаказа, стр, искДок, ТЗброни);            //редактируем заказ 
				Исключение
				    ЗаписьЖурналаРегистрации("Мод_СозданиеЗаказов_УТ11_СоздатьЗаказ", 
						УровеньЖурналаРегистрации.Ошибка,,искДок,"Не удалось обновить заказ. ID "+стр["id"]+". Подробности: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		Иначе
			Попытка
				УТ11_СоздатьЗаказ(стрЗаказа, стр, , ТЗброни);                  //создаем заказ
			Исключение
			    ЗаписьЖурналаРегистрации("Мод_СозданиеЗаказов_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось создать заказ. ID "+стр["id"]+". Подробности: "+ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры
//	ДанныеЗаказа - структура - данные заказа из json. см. ФормированиеСтруктурыЗаказа()
//	стр - соответствие - один объект заказа, конвертированный из json
//	искДок - документ ссылка ЗаказКлиента - может быть пустым, если не найден
//	ТЗброни - таб значение - см. ПолучитьИсториюИзмененияБроней() - здесь создается эта ТЗ,
//							а также: 
//								ЗагрузкаРезервов(), 
//								Мод_ЗагрузитьБрони()
//
Процедура УТ11_СоздатьЗаказ(ДанныеЗаказа, стр, искДок, ТЗброни = Неопределено) Экспорт
	
	
	
	Если СокрЛП(ДанныеЗаказа["id"]) = "" Тогда
		ЗаписьЖурналаРегистрации("RetailCRM_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,,"Не указан id заказа в ответе сайта!");
		Возврат;
	КонецЕсли;
	
	ИДЗаказа = ДанныеЗаказа["id"];
	
	Эталонная = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная");
	
	НесколькоОрганизаций = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеЗаказа.КодМагазина)Тогда 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM",ДанныеЗаказа.КодМагазина);
			Организация = crmОрганизация.Организация;                                         
		КонецЕсли;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда 
		Организация = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(искДок) Тогда
		док = Документы.ЗаказКлиента.СоздатьДокумент();
		док.Дата = ДанныеЗаказа.ДатаСоздания;
		док.Статус				= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		док.Приоритет			=  ?(НесколькоОрганизаций = Истина, crmОрганизация.Приоритет, crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Приоритет"));
		док.Организация 		= Организация;
		док.НалогообложениеНДС 	=  ?(НесколькоОрганизаций = Истина, crmОрганизация.Налогообложение, crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Налогообложение"));
		док.ЦенаВключаетНДС    = ?(НесколькоОрганизаций = Истина, crmОрганизация.ЦенаВключаетНДС, crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЦенаВключаетНДС"));
		Если НесколькоОрганизаций = Истина Тогда 
			Валюта			= crmОрганизация.Валюта;
		Иначе 
			Валюта			= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Валюта");
		КонецЕсли;
		док.Валюта 				= Валюта;
		док.Согласован          = Истина;
		док.ДатаСогласования    = док.Дата;
		док.ФормаОплаты         = Перечисления.ФормыОплаты.Наличная;
		док.СпособДоставки		= ?(НесколькоОрганизаций = Истина, crmОрганизация.СпособДоставки, Перечисления.СпособыДоставки.Самовывоз);
		док.НомерПоДаннымКлиента= ДанныеЗаказа["НомерЗаказа"];
		док.ДатаПоДаннымКлиента = ДанныеЗаказа.ДатаСоздания;
	Иначе
		
		СостояниеЗаказа = УТ11_ПолучитьСостояниеЗаказа(искДок);
		Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда 
			лог_("Заказ №" + искДок.Номер + " закрыт!!! Обновление не выполнено!!!");
			Возврат
		КонецЕсли;
		
		док = искДок.ПолучитьОбъект();
		
	КонецЕсли;
	
	
	СтатусЗаказа 		= СокрЛП(ДанныеЗаказа["СтатусЗаказа"]);
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	
	ОтменаЗаказа = Ложь; 
	
	СоответствиеСтатусов = Неопределено;  
	
	Если Эталонная Тогда
		
		ТаблицаСтатусов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТабСтатусов");
		СоответствиеСтатусов = ТаблицаСтатусов.Найти(СтатусЗаказа, "КодCRM"); 
		Если СоответствиеСтатусов <> Неопределено Тогда
			ОтменаЗаказа = СоответствиеСтатусов.Отмена;
			док.Статус = СоответствиеСтатусов.Статус1С;
		Иначе
			лог_("Для статуса " + СтатусЗаказа + " не указано соответствие статуса в 1С. Перейдти на вкладку ""Статусы"" и настройте соответствие.");
		КонецЕсли;
		
	Иначе 
		Если СтатусЗаказа = "cancel" или СтатусЗаказа = "cancel-other" Тогда
			ОтменаЗаказа = Истина;
		ИначеЕсли СтатусЗаказа = "new" Тогда 
			док.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		ИначеЕсли СтатусЗаказа = "assembling" Тогда  
			док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ИначеЕсли СтатусЗаказа = "for-shipment" или  СтатусЗаказа = "otgruzhen" Тогда
			Если ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ" Тогда
				док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			ИначеЕсли ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
				док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			КонецЕсли;
		//ЕНС
		ИначеЕсли СтатусЗаказа = "complete" Тогда 
			док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			
		КонецЕсли; 
	КонецЕсли;
	//---
	
	Если ИспользованиеЗаказов = "ЗаказКакСчет" Тогда
		док.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;

	
	// ЕНС. Отключено. У нас своя схема работы с реализациями
	////отмена заказа
	//Если ЗначениеЗаполнено(док.Ссылка) Тогда
	//	Реализация = УТ11_ВернутьРеализацию(док.Ссылка);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Реализация) Тогда
	//	Если Реализация.Проведен Тогда
	//		РеализацияОб = Реализация.ПолучитьОбъект();
	//		РеализацияОб.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
	//	КонецЕсли;
	//КонецЕсли;
	
	//КлиентПартнер 	= УТ11_ОпределениеКонтрагента(ДанныеЗаказа,организация);
	
	РозничныйПокупатель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("РозничныйПокупатель");
	
	док.Контрагент 			= РозничныйПокупатель;//КлиентПартнер.Получить("Клиент");
	док.Партнер 			= РозничныйПокупатель.Партнер;//КлиентПартнер.Получить("Партнер");
	
	док.Склад 				= УТ11_СоздатьЗаказ_НайтиСкладОтгрузки(ДанныеЗаказа, crmОрганизация);
	
	Если ЗначениеЗаполнено(ДанныеЗаказа["ДатаОтгрузкиПлан"]) Тогда 
		док.ДатаОтгрузки 	= ДанныеЗаказа["ДатаОтгрузкиПлан"];
	Иначе 
		док.ДатаОтгрузки 	= док.Дата;
	КонецЕсли;
	
	ИспользуютсяДоговорыКонтрагентов = Истина; 
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Если НесколькоОрганизаций = Истина Тогда 
			док.Соглашение = crmОрганизация.ТиповоеСоглашение;
		Иначе 
			док.Соглашение = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТиповоеСоглашение");
		КонецЕсли;
		Если ЗначениеЗаполнено(док.Соглашение) Тогда 
			ИспользуютсяДоговорыКонтрагентов = док.Соглашение.ИспользуютсяДоговорыКонтрагентов;
			док.ХозяйственнаяОперация = док.Соглашение.ХозяйственнаяОперация;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") и ИспользуютсяДоговорыКонтрагентов Тогда
		док.Договор = crm_RetailCRMПовтИсп.ПолучитьДоговорКонтрагента(док.ХозяйственнаяОперация, док.Валюта, док.Контрагент, док.Организация);
	КонецЕсли;

	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	Структура.Организация = Организация;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Структура);

	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM",ДанныеЗаказа.КодМагазина);
			БанковскийСчет = crmОрганизация.БанковскийСчет;
		Иначе 
			БанковскийСчет = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("БанковскийСчет");
		КонецЕсли;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	Структура.Вставить("ФизическоеЛицо");
	Структура = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	Структура.Организация    	= Организация;
	Структура.Валюта    		= док.Валюта;
	
	Касса	= ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Структура);
	
	Если не ЗначениеЗаполнено(Касса) Тогда 
		//получаем из константы
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM",ДанныеЗаказа.КодМагазина);
			Касса = crmОрганизация.Касса;
		Иначе 
			Касса = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ОсновнаяКасса");
		КонецЕсли;
	КонецЕсли;	
	
	док.Касса = Касса;
	док.БанковскийСчет 				= БанковскийСчет;	
	док.БанковскийСчетКонтрагента	= Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(док.Контрагент);
	
	док.НеОтгружатьЧастями	=   Истина;
	
	//доставка
	Если ДанныеЗаказа.СпособДоставки <> Неопределено Тогда 
		СписокДоставок = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеДоставок");
		Если СписокДоставок <> Неопределено Тогда 
			НайденнаяСтрока = СписокДоставок.Найти(ДанныеЗаказа.СпособДоставки, "КодCRM"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				док.СпособДоставки = НайденнаяСтрока.СпособДоставки;
				Если НайденнаяСтрока.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу или 
					 НайденнаяСтрока.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда 
					док.ПеревозчикПартнер = НайденнаяСтрока.Перевозчик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если док.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки или 
		 док.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу или
		 док.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда 
		док.ВремяДоставкиС = ДанныеЗаказа.ВремяДоставкиC;
		док.ВремяДоставкиПо = ДанныеЗаказа.ВремяДоставкиПо;
	КонецЕсли;
	
	Если док.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда 
		док.ДополнительнаяИнформацияПоДоставке = ДанныеЗаказа.ДопИнформацияПоДоставке;
	КонецЕсли;
	
	док.АдресДоставки = СокрЛП(ДанныеЗаказа["АдресДоставки"]);
	//доставка
	
	////версия
	////с 11.5.7.390 изменили наименование реквизита с Требуется на КОбеспечению
	//Выше11_5_7_390 = Ложь; 
	//Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1157390 Тогда 
	//	Выше11_5_7_390 = Истина;
	//КонецЕсли;
	////для ут 11.5.10 и выше
	//Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда
	////Если Найти(Метаданные.Версия, "11.5.10") > 0 Тогда 
	//	Выше11_5_7_390 = Истина;	
	//КонецЕсли;
	////
	
	//начало - Елисеев :: 22.11.2023
	// у нас ЕРП, для которой актуально значение Истина в этой переменной
	Выше11_5_7_390 = Истина;	
	//конец - Елисеев :: 22.11.2023

		
	//ЕНС. 
	док.Товары.Очистить();
	Для каждого стрк Из ДанныеЗаказа["ТЗТовары"] Цикл
		
		УТ11_СоздатьСтрокуДокумента(док,стрк, ОтменаЗаказа, Выше11_5_7_390, Эталонная, СоответствиеСтатусов);
		
	КонецЦикла;
	
	
	// ЕНС. Пока не понятно, как это работает в Элис
	//Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") = Истина Тогда
	//	УТ11_БронированиеТоваров(ТЗброни,док,ДанныеЗаказа["ТЗТовары"],ДанныеЗаказа["id"]);
	//КонецЕсли;
	
	Если ОтменаЗаказа = Ложь Тогда 
		УТ11_Услуги(док,ДанныеЗаказа);
	КонецЕсли;
	
	// Менеджер
	Если ДанныеЗаказа["КодМенеджера"]<> Неопределено Тогда  
		СписокМенеджеров = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеМенеджеров");
		Если СписокМенеджеров = Неопределено Тогда 
			док.Менеджер = ПараметрыСеанса.ТекущийПользователь;
		Иначе 
			НайденнаяСтрока = СписокМенеджеров.Найти(ДанныеЗаказа["КодМенеджера"], "ИД"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				док.Менеджер = НайденнаяСтрока.Менеджер;
				док.Подразделение = док.Менеджер.Подразделение;
				док.Автор = док.Менеджер;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		док.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	//
	
	//Комментарий
	Индекс = Найти(ДанныеЗаказа["КомментарийКлиента"], "#");
	Если Индекс > 0 Тогда 
		док.Комментарий 		= ?(ДанныеЗаказа.КомментарийКлиента 	<> "", ДанныеЗаказа.КомментарийКлиента, 	"") + 
		?(ДанныеЗаказа.КомментарийМенеджера <> "", Символы.ПС + ДанныеЗаказа.КомментарийМенеджера, 	"");
	Иначе 
		док.Комментарий 		= ?(ДанныеЗаказа.КомментарийКлиента 	<> "","#","") + ?(ДанныеЗаказа.КомментарийКлиента 	<> "", ДанныеЗаказа.КомментарийКлиента, 	"") + 
		?(ДанныеЗаказа.КомментарийМенеджера <> "", Символы.ПС + ДанныеЗаказа.КомментарийМенеджера, 	"");
	КонецЕсли;
	
	док.СкидкиРассчитаны    = 	Истина;
	док.СуммаДокумента 		= 	ДанныеЗаказа["СтоимостьЗаказаСоСкидкамиИДоставкой"];
	
	Если ЗначениеЗаполнено(док.Соглашение) Тогда 
		Док.ГрафикОплаты = Док.Соглашение.ГрафикОплаты;
		Док.ФормаОплаты  = Док.ГрафикОплаты.ФормаОплаты;
		док.ПорядокРасчетов = Док.Соглашение.ПорядокРасчетов;
		Для Каждого строкаГрафика из док.ГрафикОплаты.Этапы Цикл
			ВариантОплаты = строкаГрафика.ВариантОплаты;
			Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1158207 или Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда
				ВариантОтсчета = строкаГрафика.ВариантОтсчета;
				Сдвиг = строкаГрафика.Сдвиг; 
			КонецЕсли;
			Прервать;;
		КонецЦикла;
	Иначе 
		//док.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	
	Док.ЭтапыГрафикаОплаты.Очистить();
	
	Если ОтменаЗаказа = Ложь Тогда  
		СтрокаОплата = док.ЭтапыГрафикаОплаты.Добавить();
		//начало - Елисеев :: 22.11.2023

		//Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1158207 или Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда 
		//	СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки);
		//	СтрокаОплата.ВариантОтсчета =  ?(ЗначениеЗаполнено(ВариантОтсчета), ВариантОтсчета,Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа);
		//	Если ЗначениеЗаполнено(Сдвиг) Тогда 
		//		СтрокаОплата.Сдвиг = Сдвиг;
		//	Иначе 
		//		СтрокаОплата.Сдвиг =  Формат(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ОтсрочкаДней"),"ЧЦ=10; ЧДЦ=0");
		//	КонецЕсли;
		//Иначе 
		//	СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
		//КонецЕсли;
		
		Если Выше11_5_7_390 Тогда //енс поменял условие
			СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки);
			СтрокаОплата.ВариантОтсчета =  ?(ЗначениеЗаполнено(ВариантОтсчета), ВариантОтсчета,Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа);
			Если ЗначениеЗаполнено(Сдвиг) Тогда 
				СтрокаОплата.Сдвиг = Сдвиг;
			Иначе 
				СтрокаОплата.Сдвиг =  Формат(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ОтсрочкаДней"),"ЧЦ=10; ЧДЦ=0");
			КонецЕсли;
		Иначе 
			СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
		КонецЕсли;
		//конец - Елисеев :: 22.11.2023

		СтрокаОплата.ДатаПлатежа	= док.ДатаОтгрузки;
		СтрокаОплата.ПроцентПлатежа = 100;
		СтрокаОплата.СуммаПлатежа	= док.СуммаДокумента;
	КонецЕсли;
		
	Если ОтменаЗаказа = Истина Тогда
		док.Согласован          =   истина;
		док.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	КонецЕсли;

	#Область ЗаписьЗаказа
	
	НачатьТранзакцию();
	
	Попытка
		ЗаписатьЗаказ_Вендор(Док);	
		
		//Док.ОбменДанными.Загрузка = Ложь;
		//Док.Записать();
		
		
		НЗ = РегистрыСведений.ксп_ИсходныеДанныеЗаказов.СоздатьНаборЗаписей();
		НЗ.Отбор.id.Установить(ДанныеЗаказа["id"]);
		НЗ.Отбор.site.Установить(ДанныеЗаказа["site"]);
		
		НовСтр 				= НЗ.Добавить();
		НовСтр.id 			= ДанныеЗаказа["id"];
		НовСтр.site 		= ДанныеЗаказа["site"];
		НовСтр.ЗаказКлиента = Док.Ссылка;
		НовСтр.json 		= ""; 	//todo передать сюда исходный json
		НовСтр.status 		= СтатусЗаказа;
		НовСтр.ДатаЗаписи 	= ТекущаяУниверсальнаяДата();
		
		НЗ.Записать();    
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	    лог_("Не удалось записать заказ клиента "+строка(ИДЗаказа)+", подробности: " + т);
		
	КонецПопытки;
	
	
	
	
	#КонецОбласти
	
	
	// ЕНС. Установка свойств заказа в "Дополнительные сведения". Отключено, т.к. есть РС.ксп_ИсходныеДанныеЗаказов
	//crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Док.Ссылка, мСвойствоЗаказов_ИД, ДанныеЗаказа["id"]);  
	//crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Док.Ссылка, мСвойствоЗаказовМагазин, ДанныеЗаказа["site"]);
	
	
	// ЕНС. Создание оплат
	// Отключено, т.к. не нужно в нашей схеме работы	
	//УТ11_СоздатьЗаказ_СозданиеОплат(ДанныеЗаказа, стр, искДок, док, Касса, ТЗброни);
	
	
	// ЕНС. Создание Реализаций
	// Отключено, т.к. не нужно в нашей схеме работы	
	//УТ11_СоздатьЗаказ_СозданиеРеализаций(ДанныеЗаказа, Эталонная, СоответствиеСтатусов, crmОрганизация, док.ссылка, док);
	
	
	// ЕНС. Обновление заказов на сервере. На случай, если в них были изменения в 1С
	// Отключено, т.к. не нужно в нашей схеме работы	
	//УТ11_СоздатьЗаказ_ОбновитьЗаказНаСервере(Док);
	
КонецПроцедуры

// рефакторинг
//
// Параметры:
//	Док - ДокументОбъект.ЗаказКлиента - 
//
Процедура ЗаписатьЗаказ_Вендор(Док)
	Успешно = Истина;
	т = "";
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументСсылка.Установить(Док.Ссылка);
		
		стрк = НЗ.Добавить();
		стрк.ДокументСсылка = Док.Ссылка;
		
		стрк.СтатусОбъекта = Перечисления.ксп_СтатусыКачестваДокументов.ОК;
		стрк.СтатусПроведения = Перечисления.КСП_СтатусыОтложенногоПроведения.Проведен;
		
		стрк.ДатаОбработки = ТекущаяДатаСеанса();
		
		НЗ.Записать();
		
		лог_("Проведен: " + Док , СтатусСообщения.Информация);
		
	Исключение
		т = ОписаниеОшибки();
		лог_("Не удалось записать: " + Док + " " + т, СтатусСообщения.Важное); 
		
		//Для Каждого стр из ПолучитьСообщенияПользователю() цикл
		//	позиция = СтрНайти(стр.Текст, "недостаточно свободного остатка");
		//	Если позиция > 0 Тогда 
		//		//если мы резервируем товары, значит бронируем что можно 
		//		ПроверитьНаличие(док);
		//	Иначе 
		//		Продолжить;
		//	КонецЕсли;
		//КонецЦикла;
		
		ВызватьИсключение;
	КонецПопытки;
	
		
КонецПроцедуры

// Добавляет в документ услугу "Доставка". Эта номенклатура должна быть предварительно указана в "константах"
//
Процедура УТ11_Услуги(док,стр)
	
	Если стр["СтоимостьДоставки"]<>Неопределено Тогда
		Если ЗначениеЗаполнено(стр["СтоимостьДоставки"]) и стр["СтоимостьДоставки"]<>"0" Тогда  
			стрУслуги = док["Товары"].Добавить();		
			СпособДоставки 					= СокрЛП(стр["СпособДоставки"]);
			стрУслуги.Номенклатура			= мДоставка;//crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
			стрУслуги.Количество			= 1;
			стрУслуги.КоличествоУпаковок 	= стрУслуги.Количество;
			стрУслуги.Цена					= стр["СтоимостьДоставки"];
			стрУслуги.Сумма					= стрУслуги.Количество * стрУслуги.Цена;
			стрУслуги.Содержание			= "Доставка";
			// ЕНС. Надо "Отгрузить", иначе Реализация не видит строку доставки из Заказа
			стрУслуги.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;//НеТребуется;
			стрУслуги.ДатаОтгрузки 			= ТекущаяДата();
			
			стрУслуги.СтавкаНДС 			= Справочники.СтавкиНДС.БезНДС;
			стрУслуги.СуммаСНДС 			= стрУслуги.Сумма;
			
			Если док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС или
				док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда  
				стрУслуги.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;;
			ИначеЕсли док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда 
				стрУслуги.СтавкаНДС = стрУслуги.Номенклатура.СтавкаНДС;
				стрУслуги.СуммаНДС = crm_RetailCRMОбщий.РасчитатьНДС (стрУслуги.Сумма, стрУслуги.СтавкаНДС); 
			КонецЕсли;
			
		КонецЕсли;	 
	КонецЕсли;
	
КонецПроцедуры

// Параметры
//	стр - элемент массива строк товаров в json
Процедура УТ11_СоздатьСтрокуДокумента(док,стр,ОтменаЗаказа = Ложь, Выше11_5_7_390, Эталонная, СоответствиеСтатусов)
	
	//ищем строку по тч товары по идентификатору строки, если найдем, то редактируем ее
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если offers_id = "externalId" Тогда   	
		xmlIdТовара = стр["externalId"]; 		
	Иначе 		
		xmlIdТовара = стр["xmlId"]; 	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(xmlIdТовара) Тогда
		Если offers_id = "externalId" Тогда   	
			т = "Номенклатура не может быть найдена! Причина: нет значения в поле externalId"; 		
		Иначе 		
			xmlIdТовара = стр["xmlId"]; 	
			т = "Номенклатура не может быть найдена! Причина: нет значения в поле xmlId"; 		
		КонецЕсли;
		ВызватьИсключение т;
	КонецЕсли;
	
	//++ Работа с характеристиками
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда 
		
		СтруктураНоменклатуры		= УТ11_ВернутьНоменклатуру(xmlIdТовара);
		искХар						= СтруктураНоменклатуры.искХарактеристика;
		искНом 						= СтруктураНоменклатуры.искНоменклатура;
	Иначе 
		
		//ИдентификаторТовара
		ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
		Если ИдентифТовара = "Код" Тогда
			искНом	= Справочники.Номенклатура.найтиПоКоду(xmlIdТовара);
		ИначеЕсли ИдентифТовара = "Артикул" Тогда
			искНом	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", xmlIdТовара);
		ИначеЕсли ИдентифТовара = "GUID" Тогда
			уид 	= Новый УникальныйИдентификатор(xmlIdТовара);
			искНом	= Справочники.Номенклатура.ПолучитьСсылку(уид);	
		КонецЕсли;
		
	КонецЕсли;
	//-- Работа с характеристиками
	
	Если Не ЗначениеЗаполнено(искНом) Тогда 
		искНом = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	//ТипЦены
	Если стр["ТипЦены"] <> "" Тогда 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") = Истина Тогда
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда 
				НайдСтр = ТипыЦен.Найти(стр["ТипЦены"], "КодCRM");
				Если НайдСтр <> Неопределено Тогда 
					ТипЦены = НайдСтр.ТипЦены;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Цена 						= стр["Цена"];
	Количество 					= стр["Количество"];
	СуммаРучнойСкидки 			= ?(стр["ОбщаяСкидка"] 	= Неопределено, 	0, стр["ОбщаяСкидка"]);
	СуммаРучнойСкидки 			= СуммаРучнойСкидки*Количество;
	ЦенаСумма 					= Цена - стр["ОбщаяСкидка"];

	НовСтр 						= док["Товары"].Добавить();
	
	новСтр.Номенклатура 		= искНом.Ссылка;
	
	Если ЗначениеЗаполнено(искХар) Тогда
		новСтр.Характеристика 		= искХар.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦены) Тогда
		НовСтр.ВидЦены = ТипЦены;
	КонецЕсли;
	
	новСтр.Количество 			= стр["Количество"];
	новСтр.Цена 				= стр["Цена"];
	новСтр.Склад 				= док["Склад"];
	новСтр.КоличествоУпаковок 	= новСтр.Количество;
	новСтр.Сумма				= новСтр.Количество * ЦенаСумма;
	
	
	Если стр["Удален"] = Истина или ОтменаЗаказа Тогда
		новСтр.Отменено = Истина;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов") Тогда
			НовСтр.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров;  						
		КонецЕсли;
	Иначе 
		новСтр.Отменено = Ложь;
	КонецЕсли;
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	Если ИспользованиеЗаказов = "ЗаказКакСчет" Тогда
		новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	Иначе 
		Если новСтр.Отменено = Ложь Тогда
			новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
		Иначе 
			новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;// проверить
		КонецЕсли;
		
//		Если Выше11_5_7_390 Тогда
//			Если не ЗначениеЗаполнено(новСтр.ВариантОбеспечения) Тогда 
//				новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.кОбеспечению;
//			КонецЕсли;
//			Если Эталонная Тогда
//				Если ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
//					Если док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда 
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
//					ИначеЕсли док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда 
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
//					КонецЕсли;
//				Иначе 	
//					Если стр["СтатусТовара"] = "completed" 
//						или стр["СтатусТовара"] = "ready-for-assembly" 
//						или	стр["СтатусТовара"] = "sold" Тогда
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
//					ИначеЕсли стр["СтатусТовара"] = "in-reserve" Тогда
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
//					ИначеЕсли стр["СтатусТовара"] = "confirming" 
//						или стр["СтатусТовара"] = "new" Тогда
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.кОбеспечению;
//					КонецЕсли;
//				КонецЕсли;	
//			КонецЕсли; 
//		Иначе 
//			//начало - Елисеев :: 22.11.2023 нет такого значения0
////			новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Требуется;
//			новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
//			//конец - Елисеев :: 22.11.2023
//			
//		КонецЕсли;
	КонецЕсли;
	
	новСтр.ДатаОтгрузки 		= ?(ЗначениеЗаполнено(док.ДатаОтгрузки), док.ДатаОтгрузки, ТекущаяДата());
	
	новСтр.СуммаРучнойСкидки 	= СуммаРучнойСкидки;
	
	Если док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС или
		док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД или 
		док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда  
		новСтр.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда 
		новСтр.СтавкаНДС = новСтр.Номенклатура.СтавкаНДС;
		новСтр.СуммаНДС = crm_RetailCRMОбщий.РасчитатьНДС(новСтр.Сумма, новСтр.СтавкаНДС); 
	КонецЕсли;
	
	новСтр.СуммаСНДС = новСтр.Сумма;
	
КонецПроцедуры

Функция УТ11_ВернутьНоменклатуру(xmlIdТовара) Экспорт 
	
	
	
	//если нет # то это товар без характеристики
	Индекс = Найти(xmlIdТовара, "#");
	
	//сначала отбрасываем гуид организации, затем по старой схеме
	Если мGUIDОрганизации Тогда 
		xmlIdТовара = Сред(xmlIdТовара,(Индекс+1));
	КонецЕсли;
	
	Инд = Найти(xmlIdТовара, "#");
	Если Инд = 0 Тогда
		уид 				= Новый УникальныйИдентификатор(xmlIdТовара);
		искНоменклатура		= Справочники.Номенклатура.ПолучитьСсылку(уид);
		искХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе 
		МассивЗначений = crm_RetailCRMОбщий.РазложитьСтрокуВМассивПодстрок(xmlIdТовара, "#");
		
		Если МассивЗначений.Количество() < 2 Тогда
			лог_("Невозможно найти товар по id: " + xmlIdТовара);
			Возврат искХарактеристика;
		КонецЕсли;
		
		уид 				= Новый УникальныйИдентификатор(МассивЗначений[0]);
		искНоменклатура		= Справочники.Номенклатура.ПолучитьСсылку(уид);
		уид2 				= Новый УникальныйИдентификатор(МассивЗначений[1]);
		искХарактеристика	= Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(уид2);
			
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("искХарактеристика", 		искХарактеристика);
	СтруктураВозврата.Вставить("искНоменклатура", 			искНоменклатура);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция УТ11_СоздатьЗаказ_НайтиСкладОтгрузки(ДанныеЗаказа, crmОрганизация) Экспорт
	//СкладОтг = ДанныеЗаказа["СкладОтгрузки"];
	//Рез = Неопределено;
	//Если ЗначениеЗаполнено(СкладОтг) Тогда 
	//	СписокСкладов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
	//	Если СписокСкладов <> Неопределено Тогда 
	//		НайденнаяСтрока = СписокСкладов.Найти(СкладОтг, "КодCRM"); 
	//		Если НайденнаяСтрока <> Неопределено Тогда
	//			Рез = НайденнаяСтрока.Склад;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Рез) Тогда 
	//	Если НесколькоОрганизаций = Истина Тогда 
	//		Рез = crmОрганизация.Склад;
	//	Иначе 
			Рез = мСклад;
	//	КонецЕсли;
	//КонецЕсли;
	Возврат Рез;
КонецФункции

// Параметры
//	док - ДокументОбъект.ЗаказКлиента / ДокументСсылка.ЗаказКлиента
//
Функция УТ11_ПолучитьСостояниеЗаказа(док)

	Если мЗапросСостоянияЗаказов = Неопределено Тогда
		мЗапросСостоянияЗаказов = СоздатьЗапросСостоянияЗаказов();
	КонецЕсли;
	
	мЗапросСостоянияЗаказов.УстановитьПараметр("Заказ", док.Ссылка);
	Результат = мЗапросСостоянияЗаказов.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Состояние;
	КонецЦикла;
	
	Возврат Неопределено;	
	
КонецФункции

// Возвращает ТОЛЬКО ПРОВЕДЕННУЮ реализацию
//
Функция УТ11_ВернутьРеализацию (Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	|	И РеализацияТоваровУслуг.Проведен";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	искРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		искРеализация = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат искРеализация;
	
КонецФункции

// ЕНС
Функция УТ11_ВернутьДокументЗаказ_РС(id, site) Экспорт
	
	мЗапросПоискаЗаказов.УстановитьПараметр("id", id);
	мЗапросПоискаЗаказов.УстановитьПараметр("site", site);
	
	Результат = мЗапросПоискаЗаказов.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
			Возврат Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.ЗаказКлиента.ПустаяСсылка();
	
КонецФункции

Функция ФормированиеСтруктурыЗаказа(стр)
	
	стрДанных = Новый Структура();
	стрДанных.Вставить("id",				Формат(стр["id"],"ЧГ="));
	ДатаСоздания = стр["createdAt"];
	Если ДатаСоздания <> Неопределено Тогда 
		ДатаСоздания =  crm_RetailCRMОбщий.ПреобразоватьДатуCRM(ДатаСоздания);
	Иначе
		ДатаСоздания =  '00010101000000';
	КонецЕсли;
	
	стрДанных.Вставить("ДатаСоздания",		ДатаСоздания);			// Дата и время заказа
	стрДанных.Вставить("КодМагазина",		стр["site"]);				
	стрДанных.Вставить("site",				стр["site"]);
	стрДанных.Вставить("КодМенеджера",		стр["managerId"]);
	стрДанных.Вставить("НомерЗаказа",		стр["number"]);
	
	дст = стр["delivery"]["address"];
	АдресДоставки = "";
	ДопИнформация = "";	
	Если дст <> Неопределено Тогда 
		АдресДоставки = СокрЛП(Строка(дст["index"])+" "+дст["city"]+" "+дст["metro"]+" "+дст["text"]);
		ДопИнформация = СокрЛП(стр["delivery"]["address"]["notes"]);
	КонецЕсли;
	стрДанных.Вставить("СпособДоставки",	стр["delivery"]["code"]);
	стрДанных.Вставить("ДопИнформацияПоДоставке", ДопИнформация);
	
	ДатаДоставки = стр["delivery"]["date"];
	Если ДатаДоставки <> Неопределено Тогда 
		ДатаДоставки =  crm_RetailCRMОбщий.ПреобразоватьДатуCRM(ДатаДоставки);
	Иначе
		ДатаДоставки =  '00010101000000';
	КонецЕсли;
	//начало - Елисеев :: 24.11.2023
	Если стр["delivery"]["time"] = Неопределено Тогда
		ТочноеВремя = "00:00:00"; 
		ВремяДоставкиC = ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
		ВремяДоставкиПо= ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
	Иначе
		Если (стр["delivery"]["time"]["from"] = Неопределено
			ИЛИ стр["delivery"]["time"]["to"] = Неопределено)
			И НЕ стр["delivery"]["time"]["custom"] = Неопределено Тогда
			ТочноеВремя = стр["delivery"]["time"]["custom"]; 
			ВремяДоставкиC = ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
			ВремяДоставкиПо= ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
		Иначе 
			Если стр["delivery"]["time"]["from"] <> Неопределено Тогда
				ВремяДоставкиC = ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+стр["delivery"]["time"]["from"] + ":00"), Дата(1,1,1));
			КонецЕсли;
			Если стр["delivery"]["time"]["to"] = Неопределено Тогда
				ВремяДоставкиПо= ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+стр["delivery"]["time"]["to"] + ":00"), Дата(1,1,1));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//конец - Елисеев :: 24.11.2023
	//ЕНС
	Попытка
		ВремяДоставкиC = crm_RetailCRMОбщий.ПреобразоватьДатуCRM(ВремяДоставкиC);
	Исключение
	    т=ОписаниеОшибки();
		ВремяДоставкиC = "";
		ЗаписьЖурналаРегистрации("retailcrm",УровеньЖурналаРегистрации.Ошибка,,,
		"Неважная ошибка. НЕ удалось преобразовать ВремяДоставкиC <"+строка(ВремяДоставкиC)+">. Заказ id "+стрДанных.id);
	КонецПопытки;
	//ЕНС
	Попытка
		ВремяДоставкиПо= crm_RetailCRMОбщий.ПреобразоватьДатуCRM(ВремяДоставкиПо);
	Исключение
	    т=ОписаниеОшибки();
		ВремяДоставкиC = "";
		ЗаписьЖурналаРегистрации("retailcrm",УровеньЖурналаРегистрации.Ошибка,,,
		"Неважная ошибка. НЕ удалось преобразовать ВремяДоставкиПо <"+строка(ВремяДоставкиПо)+">. Заказ id "+стрДанных.id);
	КонецПопытки;
	
	
	
	стрДанных.Вставить("ДатаДоставки",		ДатаДоставки);     	
	стрДанных.Вставить("ВремяДоставкиC",	ВремяДоставкиC);
	стрДанных.Вставить("ВремяДоставкиПо",	ВремяДоставкиПо);
	стрДанных.Вставить("АдресДоставки",		АдресДоставки);
	стрДанных.Вставить("СтоимостьДоставки",	стр["delivery"]["cost"]);
	
	ФИО = СокрЛП(Строка(стр["lastName"]) + " " + стр["firstName"] + " " + стр["patronymic"]);
	
	стрДанных.Вставить("ФИО",				ФИО);
	
	//корпоративные клиенты
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты") = Истина Тогда 
		
		ДанныеКорпКлиента = стр["customer"];
		
		СтруктураДанныхКорпКлиента = Новый Структура;
		СтруктураДанныхКорпКлиента.Вставить("Тип", 				ДанныеКорпКлиента["type"]);         
		СтруктураДанныхКорпКлиента.Вставить("ID", 				Формат(ДанныеКорпКлиента["id"],"ЧГ="));
		СтруктураДанныхКорпКлиента.Вставить("НаименованиеКорп", ДанныеКорпКлиента["nickName"]);
		СтруктураДанныхКорпКлиента.Вставить("ОсновнойАдрес", 	ДанныеКорпКлиента["mainAddress"]);
		СтруктураДанныхКорпКлиента.Вставить("КонтактноеЛицо", 	ДанныеКорпКлиента["mainCustomerContact"]);
		СтруктураДанныхКорпКлиента.Вставить("Компания", 		ДанныеКорпКлиента["mainCompany"]);
		
		стрДанных.Вставить("ДанныеКорпКлиента", СтруктураДанныхКорпКлиента);
		
		ДанныеКонтактногоЛица = стр["contact"];
		
		ФИО = СокрЛП(Строка(ДанныеКонтактногоЛица["lastName"]) + " " + ДанныеКонтактногоЛица["firstName"] + " " + ДанныеКонтактногоЛица["patronymic"]);
		
		СтруктураДанныхКонтЛица = Новый Структура;
		СтруктураДанныхКонтЛица.Вставить("Тип", 			ДанныеКонтактногоЛица["type"]);         
		СтруктураДанныхКонтЛица.Вставить("ID", 				Формат(ДанныеКонтактногоЛица["id"],"ЧГ="));
		СтруктураДанныхКонтЛица.Вставить("КонтактноеЛицо", 	ДанныеКонтактногоЛица["isContact"]);
		СтруктураДанныхКонтЛица.Вставить("ФИО", 			ФИО);
		СтруктураДанныхКонтЛица.Вставить("Почта", 			ДанныеКонтактногоЛица["email"]);
		стрДанных.Вставить("ДанныеКонтактногоЛица", 		СтруктураДанныхКонтЛица);
		
		СтруктураДанныхКонтрагента = Новый Структура;
		
		Если стр["company"] <> Неопределено Тогда              //значит компания не заполнена и данные для контрагента нужно взять из данных контактного лица
			//id контрагента в этом случае не прописывать, т.к по факту такой сущности в crm нет
			ДанныеКонтрагента = стр["company"]["contragent"];
			
			Если ДанныеКонтрагента["contragentType"] = "legal-entity" Тогда 
				ТипКонтрагента = "ЮрЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "enterpreneur" Тогда 
				ТипКонтрагента = "ИндивидуальныйПредприниматель";
			КонецЕсли;
			
			СтруктураДанныхКонтрагента.Вставить("НазваниеКомпании", 	стр["company"]["name"]);
			СтруктураДанныхКонтрагента.Вставить("ТипКонтрагента", 		ТипКонтрагента);
			СтруктураДанныхКонтрагента.Вставить("ПолноеНаименование", 	ДанныеКонтрагента["legalName"]);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	ДанныеКонтрагента["legalAddress"]);
			СтруктураДанныхКонтрагента.Вставить("ID", 					Формат(стр["company"]["id"],"ЧГ="));
			
			БанковскийСчет 	= ""; БИК = ""; КоррСчет = ""; ИНН = ""; КПП = ""; ОКПО = ""; ОГРН = "";
			
			ИНН				= ?(ДанныеКонтрагента["INN"] 			<> Неопределено, 	ДанныеКонтрагента["INN"] , 			"");
			КПП				= ?(ДанныеКонтрагента["KPP"] 			<> Неопределено, 	ДанныеКонтрагента["KPP"] , 			"");
			ОКПО			= ?(ДанныеКонтрагента["OKPO"] 			<> Неопределено, 	ДанныеКонтрагента["OKPO"] , 			"");
			ОГРН			= ?(ДанныеКонтрагента["OGRN"] 			<> Неопределено, 	ДанныеКонтрагента["OGRN"] , 			"");
			БИК				= ?(ДанныеКонтрагента["BIK"] 			<> Неопределено, 	ДанныеКонтрагента["BIK"] , 			"");
			БанковскийСчет 	= ?(ДанныеКонтрагента["bankAccount"] 	<> Неопределено, 	ДанныеКонтрагента["bankAccount"] , 	"");
			КоррСчет		= ?(ДанныеКонтрагента["corrAccount"] 	<> Неопределено, 	ДанныеКонтрагента["corrAccount"] , 	"");
		Иначе 
			
			СтруктураДанныхКонтрагента.Вставить("НазваниеКомпании", 	ФИО);
			СтруктураДанныхКонтрагента.Вставить("ТипКонтрагента", 		"ФизЛицо");
			СтруктураДанныхКонтрагента.Вставить("ПолноеНаименование", 	ФИО);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	АдресДоставки);
			СтруктураДанныхКонтрагента.Вставить("ID", 					"");
			
			БанковскийСчет 	= ""; БИК = ""; КоррСчет = ""; ИНН = ""; КПП = ""; ОКПО = ""; ОГРН = "";;
			
		КонецЕсли;
		
		СтруктураДанныхКонтрагента.Вставить("ИНН", 				ИНН);
		СтруктураДанныхКонтрагента.Вставить("КПП", 				КПП);
		СтруктураДанныхКонтрагента.Вставить("ОКПО", 			ОКПО);
		СтруктураДанныхКонтрагента.Вставить("ОГРН", 			ОГРН);
		СтруктураДанныхКонтрагента.Вставить("БИК", 				БИК);
		СтруктураДанныхКонтрагента.Вставить("БанковскийСчет", 	БанковскийСчет);
		СтруктураДанныхКонтрагента.Вставить("КоррСчёт", 		КоррСчет);
		стрДанных.Вставить("ДанныеКонтрагента", СтруктураДанныхКонтрагента);
		
		//корпоративные клиенты
	Иначе	
		
		ДанныеКонтрагента = стр["contragent"];
		СтруктураДанныхКонтрагента = Новый Структура;
		СтруктураДанныхКонтрагента.Вставить("Тип", 		"");
		НаименованиеЮрЛицаКонтрагента = "";
		idКлиента = Формат(стр["customer"]["id"],"ЧГ=");
		
		Если ДанныеКонтрагента <> Неопределено Тогда
			
			НаименованиеЮрЛицаКонтрагента = ДанныеКонтрагента["legalName"];
			
			Если ДанныеКонтрагента["contragentType"] = "individual" Тогда 
				ТипКонтрагента = "ФизЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "legal-entity" Тогда 
				ТипКонтрагента = "ЮрЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "enterpreneur" Тогда 
				ТипКонтрагента = "ИндивидуальныйПредприниматель";
			КонецЕсли;
			СтруктураДанныхКонтрагента.Вставить("Тип", 		ТипКонтрагента);
			АдресРегистрацииКонтрагента = ДанныеКонтрагента["legalAddress"];
			СтруктураДанныхКонтрагента.Вставить("НаименованиеЮрЛица", 	НаименованиеЮрЛицаКонтрагента);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	АдресРегистрацииКонтрагента);
			
			БанковскийСчет 	= ""; БИК = ""; КоррСчет = ""; ИНН = ""; КПП = "";
			
			Если ТипКонтрагента = "ЮрЛицо" или ТипКонтрагента = "ИндивидуальныйПредприниматель" Тогда // Юр. лицо   enterpreneur - ИП
				БанковскийСчет 	= ?(ДанныеКонтрагента["bankAccount"] 	<> Неопределено, 	ДанныеКонтрагента["bankAccount"] , 	"");
				БИК				= ?(ДанныеКонтрагента["BIK"] 			<> Неопределено, 	ДанныеКонтрагента["BIK"] , 			"");
				КоррСчет		= ?(ДанныеКонтрагента["corrAccount"] 	<> Неопределено, 	ДанныеКонтрагента["corrAccount"] , 	"");
				ИНН				= ?(ДанныеКонтрагента["INN"] 			<> Неопределено, 	ДанныеКонтрагента["INN"] , 			"");
				КПП				= ?(ДанныеКонтрагента["KPP"] 			<> Неопределено, 	ДанныеКонтрагента["KPP"] , 			"");
				
				СтруктураДанныхКонтрагента.Вставить("БанковскийСчет", 	БанковскийСчет);
				СтруктураДанныхКонтрагента.Вставить("БИК", 				БИК);
				СтруктураДанныхКонтрагента.Вставить("КоррСчет", 		КоррСчет);
				СтруктураДанныхКонтрагента.Вставить("ИНН", 				ИНН);                         
				СтруктураДанныхКонтрагента.Вставить("КПП", 				КПП);
				СтруктураДанныхКонтрагента.Вставить("ОКПО",				"");
			КонецЕсли;
			
		КонецЕсли;
		
		стрДанных.Вставить("ДанныеКонтрагента", СтруктураДанныхКонтрагента);
		стрДанных.Вставить("idКлиента",			idКлиента);
		
	КонецЕсли;
	
	стрДанных.Вставить("Телефон",			crm_RetailCRMОбщий.ПриведениеТелНомераСтандарт(стр["phone"]));
	стрДанных.Вставить("Почта",				стр["email"]);
	стрДанных.Вставить("СтоимостьЗаказа",	стр["summ"]);  	
	стрДанных.Вставить("СтоимостьЗаказаСоСкидкамиИДоставкой",	стр["totalSumm"]);	
	ДатаОтгрузкиПлан = стр["shipmentDate"];
	Если ДатаОтгрузкиПлан <> Неопределено Тогда 
		ДатаОтгрузкиПлан =  crm_RetailCRMОбщий.ПреобразоватьДатуCRM(ДатаОтгрузкиПлан);
	Иначе
		ДатаОтгрузкиПлан =  '00010101000000';
	КонецЕсли;
	стрДанных.Вставить("ДатаОтгрузкиПлан",	ДатаОтгрузкиПлан);
	стрДанных.Вставить("СкладОтгрузки",		стр["shipmentStore"]);
	
	стрДанных.Вставить("СтатусЗаказа",			стр["status"]);
	стрДанных.Вставить("КомментарийКлиента",	СокрЛП(стр["customerComment"]));
	стрДанных.Вставить("КомментарийМенеджера",	СокрЛП(стр["managerComment"]));
	
	ПользовательскиеПоля = Новый Соответствие;
	ПользовательскиеПоляЗаказа = стр["customFields"];
	Если ПользовательскиеПоляЗаказа <> Неопределено Тогда
		Для каждого Поле Из ПользовательскиеПоляЗаказа Цикл
			ПользовательскиеПоля.Вставить(Поле.Ключ, Поле.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	//оплата
	масОплат = Новый Массив();
	Для Каждого стрОпл из стр["payments"] Цикл 
		стрОплата = Новый Соответствие();
		стрОплата.Вставить("ИДОплаты", 		Формат(стрОпл.Значение["id"],"ЧГ=0"));
		стрОплата.Вставить("СтатусОплаты",	стрОпл.Значение["status"]);
		стрОплата.Вставить("ТипОплаты",		стрОпл.Значение["type"]);
		стрОплата.Вставить("СуммаПлатежа",	стрОпл.Значение["amount"]);
		стрОплата.Вставить("ДатаОплаты",	?(стрОпл.Значение["paidAt"] <> Неопределено, crm_RetailCRMОбщий.ПреобразоватьДатуCRM(стрОпл.Значение["paidAt"]), ""));
		стрОплата.Вставить("Комментарий",	стрОпл.Значение["comment"]);
		масОплат.Добавить(стрОплата);
	КонецЦикла;
	стрДанных.Вставить("Оплаты",			масОплат);
	//
	
	//состав заказа
	масТоваров = Новый Массив();
	ТЗТоваров	= Новый ТаблицаЗначений();
	ТЗТоваров.Колонки.Добавить("Наименование");
    ТЗТоваров.Колонки.Добавить("ИДСтроки");
    ТЗТоваров.Колонки.Добавить("xmlId");
	ТЗТоваров.Колонки.Добавить("externalId");
    ТЗТоваров.Колонки.Добавить("СтатусТовара");
    ТЗТоваров.Колонки.Добавить("СтавкаНДС");
	ТЗТоваров.Колонки.Добавить("ОбщаяСкидка");
    ТЗТоваров.Колонки.Добавить("Количество");
    ТЗТоваров.Колонки.Добавить("Цена");
	ТЗТоваров.Колонки.Добавить("ТипЦены");
    ТЗТоваров.Колонки.Добавить("Удален");
    ТЗТоваров.Колонки.Добавить("Скидки");
	ТЗТоваров.Колонки.Добавить("НачисленоБонусов");
    ТЗТоваров.Колонки.Добавить("ИдентификаторСтроки1С");
	
	Для каждого суб_стр из стр["items"] Цикл
		стрТовар = Новый Соответствие();
		СтрокаТз = ТЗТоваров.Добавить();		
		стрТовар.Вставить("Наименование",	суб_стр["offer"]["name"]);
		стрТовар.Вставить("ИДСтроки",		Формат(суб_стр["id"], "ЧГ=0"));
		стрТовар.Вставить("xmlId",			суб_стр["offer"]["xmlId"]);
		стрТовар.Вставить("externalId",		суб_стр["offer"]["externalId"]);
		стрТовар.Вставить("СтатусТовара",	суб_стр["status"]);
		стрТовар.Вставить("СтавкаНДС", 		суб_стр["vatRate"]);
		стрТовар.Вставить("ОбщаяСкидка",	суб_стр["discountTotal"]);
		стрТовар.Вставить("Количество",		суб_стр["quantity"]);
		стрТовар.Вставить("Цена",			суб_стр["initialPrice"]);
		стрТовар.Вставить("ТипЦены", 		?(суб_стр["priceType"] <> Неопределено, суб_стр["priceType"]["code"], ""));
		стрТовар.Вставить("Удален",			суб_стр["isCanceled"]);
		стрТовар.Вставить("Скидки", 		суб_стр["discounts"]);
		стрТовар.Вставить("НачисленоБонусов", 		суб_стр["bonusesCreditTotal"]);
		
		СвойстваТовара = Новый Соответствие(); 
		Для Каждого КлючИЗначение из суб_стр["properties"] Цикл
			СвойстваТовара.Вставить(СокрЛП(КлючИЗначение.Ключ), КлючИЗначение.Значение["value"]);
		КонецЦикла;
		стрТовар.Вставить("Свойства", 		СвойстваТовара); 
		
		//
		Если суб_стр["externalIds"] <> Неопределено Тогда
			Идентификаторы = Новый Соответствие();
			Для Каждого идентиф из суб_стр["externalIds"] Цикл 
				Если идентиф["code"] = "1C" Тогда 
					Идентификаторы.Вставить("код",	идентиф["code"]);
					Идентификаторы.Вставить("ИдентифСтроки",	идентиф["value"]);
					стрТовар.Вставить("ИдентификаторСтроки1С", 	идентиф["value"]);
					
					СтрокаТз.ИдентификаторСтроки1С 	= идентиф["value"];

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		стрТовар.Вставить("Идентификаторы", 		Идентификаторы);
		
		
        СтрокаТз.Наименование 	= суб_стр["offer"]["name"];
		СтрокаТз.ИДСтроки 		= Формат(суб_стр["id"], "ЧГ=0");
		СтрокаТз.xmlId 			= суб_стр["offer"]["xmlId"];
		СтрокаТз.externalId 	= суб_стр["offer"]["externalId"];
		СтрокаТз.СтатусТовара 	= суб_стр["status"];
		СтрокаТз.СтавкаНДС 		= суб_стр["vatRate"];
		СтрокаТз.ОбщаяСкидка 	= суб_стр["discountTotal"];
		СтрокаТз.Количество 	= суб_стр["quantity"];
		СтрокаТз.Цена 			= суб_стр["initialPrice"];
		СтрокаТз.ТипЦены 		= ?(суб_стр["priceType"] <> Неопределено, суб_стр["priceType"]["code"], "");
		СтрокаТз.Удален 		= суб_стр["isCanceled"];
		СтрокаТз.Скидки 		= суб_стр["discounts"];
		СтрокаТз.НачисленоБонусов 		= суб_стр["bonusesCreditTotal"];
		//
		масТоваров.Добавить(стрТовар);
	КонецЦикла;
	//
	
	стрДанных.Вставить("Товары", масТоваров);
	стрДанных.Вставить("ТЗТовары", ТЗТоваров);
	возврат стрДанных;
	
КонецФункции

Функция СопоставитьСтатус(Статус,НаборСтатусов)	

	НайдСтрока = НаборСтатусов.Найти(Статус, "КодCRM"); 
	Если НайдСтрока = Неопределено Тогда
		возврат Ложь;
	Иначе
		возврат Истина;		
	КонецЕсли;

КонецФункции



//ЕНС
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЗапросСостоянияЗаказов() Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗаказовКлиентов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
			|ГДЕ
			|	СостоянияЗаказовКлиентов.Заказ = &Заказ";
	
	Возврат Запрос;
	
КонецФункции

//ЕНС
Функция СоздатьЗапросПоискаЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДополнительныеСведения.Объект КАК Объект
	//|ИЗ
	//|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//|ГДЕ
	//|	ДополнительныеСведения.Значение = &Значение
	//|	И ДополнительныеСведения.Свойство = &Свойство";

	//Запрос.УстановитьПараметр("Свойство", мСвойствоЗаказов_ИД);	

	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Док.Ссылка КАК Объект
	//|ИЗ
	//|	Документ.ЗаказКлиента КАК Док
	//|ГДЕ
	//|	Док.НомерПоДаннымКлиента = &Значение";

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РС.ЗаказКлиента КАК Объект
	|ИЗ
	|	РегистрСведений.ксп_ИсходныеДанныеЗаказов КАК РС
	|ГДЕ
	|	РС.id = &id
	|	и РС.site = &site";
	
	
	Возврат Запрос;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЗапросПоискаРеализаций1() Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Проведен КАК Проведен
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
		|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	Возврат Запрос;
	
КонецФункции





// Описание_метода
//
// Параметры:
// текст - строка - текст сообщения
//	тип 	- число - 0 - дебаг, 1 - инфо, 2 - варн, 3 - ошибка
//
Процедура лог_(текст, тип = 1)

	уровень = УровеньЖурналаРегистрации.Информация;
	
	Если тип = 0 или тип = 1 Тогда
		уровень = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли тип = 2 Тогда
		уровень = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли тип = 3 Тогда
		уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("RetailCRM.ИмпортЗаказов",уровень,,,текст);
	
КонецПроцедуры


мЗапросСостоянияЗаказов 	= СоздатьЗапросСостоянияЗаказов();
мЗапросПоискаЗаказов 		= СоздатьЗапросПоискаЗаказов();
мЗапросПоискаРеализаций1 	= СоздатьЗапросПоискаРеализаций1();  



