
// Подключение в коде
//
	//// переменные модуля
	//Перем Логгер; // обработка  Logger
	//
	//// код для вставки в main-метод класса
	//
	//ПараметрыВызова=Новый СписокЗначений;
	//ПараметрыВызова.Добавить(мДатаНачала,"мДатаНачала");
	//ПараметрыВызова.Добавить(мДатаОкончания,"мДатаОкончания");
	//ПараметрыВызова.Добавить(ОбновитьНестартованные,"ОбновитьНестартованные");
	//мИдВызова = мис_ЛоггерСервер.СоздатьИдВызова(
	//	ИдВызова, 
	//	"Обработка XXX метод YYY. Время запуска "+Строка(ТекущаяДатаСеанса()), 
	//	ТекущаяДатаСеанса(), 
	//	ИмяМетода,
	//	ПараметрыВызова);
	//ИмяЛога = "Функции.ОтправкаНовыхЗаявокНаОплатуПочтой";
	//Логгер = мис_ЛоггерСервер.getLogger(мИдВызова, ИмяЛога);
	//ПараметрыВызова = Неопределено;
	//
	//Логгер.Инфо("Начало загрузки. Период: %1 - %2", Формат(мДатаНачала, "ДФ=dd.MM.yyyy") ,Формат(мДатаОкончания, "ДФ=dd.MM.yyyy"));
	//
	//ВремяНач = Логгер.НачЗамер();
	//
	//Логгер.Инфо("Начало рассылки");
	//
	//ВремяНач = Логгер.НачЗамер();
	//
	//... // действия
	//// Например, можно так передать ИдВызова
	//модуль.метод( Логгер.гетИдВызова() );
	//
	//Логгер.Инфо("Завершение рассылки. Время = %1 мс", Логгер.ВремяОпер(ВремяНач));
	//
	//// Конец код для вставки в main-метод класса

	
Перем ИдВызова; // спр ссылка ИндексЛога

Перем Аппендеры; //массив, элементы: обработки с префиксом Logger_Appender_

Перем мУровень;//число. уровень логов. 1-дебаг,2-инфо,3-варн,4-ерр,5-крит,9-офф

Перем ЗамерВремяНачала; // дата, см. НачЗамер()

// Конструктор класса
// Параметры
//	ИдВызоваПараметр - спр ИндексЛога - 
//	ИмяЛога - Строка - используется для генерации имени лога при записи в лог 
Функция Конструктор(Знач ИдВызоваПараметр = Неопределено, Знач ИмяЛога = Неопределено) Экспорт
	
	ИдВызова = ИдВызоваПараметр;

	
	мУровень = ПараметрыСеанса.мис_УровеньЛогов;
	
	Аппендеры = Новый Массив;
	//try
	//АппендерMSSQL = sf_externalDataProcs
	//	.createObj("мис_Logger_Appender_MSSQL.epf")
	//	.Конструктор(ИдВызова,ИмяЛога);
	//Если АппендерMSSQL <> Неопределено Тогда
	//	Аппендеры.Добавить(АппендерMSSQL);
	//КонецЕсли;
	//except
	//endtry;
	//try
	//АппендерФайлы = sf_externalDataProcs
	//	.createObj("мис_Logger_Appender_ТекстовыйФайл.epf")
	//	.Конструктор(ИдВызова,ИмяЛога);
	//Если АппендерФайлы <> Неопределено Тогда
	//	Аппендеры.Добавить(АппендерФайлы);
	//КонецЕсли;
	//except
	//endtry;
	
	//try
	АппендерСправочник = Обработки.мис_Logger_Appender_СпрЛогСообщений.Создать()
		.Конструктор(ИдВызова,ИмяЛога);
	Если АппендерСправочник <> Неопределено Тогда
		Аппендеры.Добавить(АппендерСправочник);
	КонецЕсли;
	//except
	//endtry;
	//try
	АппендерЖР = Обработки.мис_Logger_Appender_ЖурналРегистрации.Создать()
		.Конструктор(ИдВызова,ИмяЛога);
	Если АппендерЖР <> Неопределено Тогда
		Аппендеры.Добавить(АппендерЖР);
	КонецЕсли;
	//except
	//endtry;
	//
	Возврат ЭтотОбъект;
	
КонецФункции

//Параметры:
//	КраткоеОписание  - Строка - Заголовок сообщения
//	ВидСообщения - ПеречислениеСсылка.СтатусыСообщений, СправочникСсылка.ТиповыеСообщения, Строка - Статус сообщения. Если строка, то это шаблон поиска в типовых сообщениях по шаблону
//	ДетальноеОписание - Строка - Подробное сообщение
//	Уровень - число - уровень логов. 1-дебаг,2-инфо,3-варн,4-ерр,5-крит,9-офф
//Возвращаемое значение:
//	Нет
Процедура ЗаписатьСообщение(Знач КраткоеОписание = "ИНФО", 
						ВидСообщения = Неопределено, 
						Знач ДетальноеОписание="",
						Знач Уровень = 2) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Аппендер Из Аппендеры Цикл
		
		Аппендер.ЗаписатьСообщение(КраткоеОписание, ВидСообщения, ДетальноеОписание, Уровень);
	
	КонецЦикла;
	
	
КонецПроцедуры

// Оставлена для совместимости
//Параметры:
//	ИдВызоваПараметр - Неопределено, СправочникСсылка.мис_ИндексЛога - декриптор для привязки сообщения
//	Заголовок  - Строка - Заголовок сообщения
//	ВидСообщения - ПеречислениеСсылка.СтатусыСообщений, СправочникСсылка.ТиповыеСообщения, Строка - Статус сообщения. Если строка, то это шаблон поиска в типовых сообщениях по шаблону
//	Описание - Строка - Подробное сообщение
//  ДатаВремяСообщения - Дата - если указано, то предполагается, что это обход некой таблицы сообщений
//	Данные - ЛюбаяСсылка - Ссылка на любой объект;
//	Уровень - число - уровень логов. 1-дебаг,2-инфо,3-варн,4-ерр,5-крит,9-офф
//Возвращаемое значение:
//	Нет
Процедура ЗаписатьСобытие(	ИдВызоваПараметр = Неопределено,
							Знач КраткоеОписание="ИНФО",
							ВидСообщения=Неопределено,
							ДетальноеОписание="",
							Знач ДатаВремяСообщения=Неопределено,
							Данные=Неопределено,
							Уровень = 2) Экспорт
	
	ЗаписатьСообщение(КраткоеОписание, 
						ВидСообщения , 
						ДетальноеОписание,
						Уровень);
				
КонецПроцедуры


Процедура Инфо(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 2 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5);
	КонецЕсли; 
	ЗаписатьСообщение("ИНФО",Перечисления.мис_СтатусыСообщений.Информация,Описание,2);
	
КонецПроцедуры

Процедура Варн(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 3 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписатьСообщение("ПРЕДУПРЕЖДЕНИЕ",Перечисления.мис_СтатусыСообщений.Предупреждение,Описание,3);
	
КонецПроцедуры

Процедура Ерр(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 4 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		//Попытка
			Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
		//Исключение
		//    а=12;
		//КонецПопытки; 
		
	КонецЕсли;
	ЗаписьЖурналаРегистрации("ИндексЛога", УровеньЖурналаРегистрации.Ошибка,,,Описание);
	ЗаписатьСообщение("ОШИБКА",Перечисления.мис_СтатусыСообщений.Ошибка,Описание,4);
	
КонецПроцедуры

Процедура Крит(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 5 Тогда Возврат;КонецЕсли;
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписьЖурналаРегистрации("ИндексЛога", УровеньЖурналаРегистрации.Ошибка,,,Описание);
	ЗаписатьСообщение("КРИТИЧЕСКАЯ ОШИБКА",Перечисления.мис_СтатусыСообщений.КритическаяОшибка,Описание,5);
	
КонецПроцедуры

Процедура Дебаг(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 1 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписатьСообщение("ДЕБАГ",Перечисления.мис_СтатусыСообщений.Отладка,Описание,1);
	
КонецПроцедуры


Процедура info(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 2 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписатьСообщение("ИНФО",Перечисления.мис_СтатусыСообщений.Информация,Описание,2);
	
КонецПроцедуры

Процедура warn(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 3 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписатьСообщение("ПРЕДУПРЕЖДЕНИЕ",Перечисления.мис_СтатусыСообщений.Предупреждение,Описание,3);
	
КонецПроцедуры

Процедура err(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 4 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли;
	ЗаписьЖурналаРегистрации("ИндексЛога", УровеньЖурналаРегистрации.Ошибка,,,Описание);
	ЗаписатьСообщение("ОШИБКА",Перечисления.мис_СтатусыСообщений.Ошибка,Описание,4);
	
КонецПроцедуры

Процедура crit(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 5 Тогда Возврат;КонецЕсли;
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписьЖурналаРегистрации("ИндексЛога", УровеньЖурналаРегистрации.Ошибка,,,Описание);
	ЗаписатьСообщение("КРИТИЧЕСКАЯ ОШИБКА",Перечисления.мис_СтатусыСообщений.КритическаяОшибка,Описание,5);
	
КонецПроцедуры

Процедура debug(Знач Описание="",п1=Неопределено,п2=Неопределено,п3=Неопределено,п4=Неопределено,п5=Неопределено
	,п6=Неопределено,п7=Неопределено,п8=Неопределено,п9=Неопределено,п10=Неопределено) Экспорт
	
	Если мУровень > 1 Тогда Возврат;КонецЕсли; 
	
	Если найти(Описание, "%")> 0 Тогда
		Описание = СтрШаблон(Описание,п1,п2,п3,п4,п5,п6,п7,п8,п9,п10);
	КонецЕсли; 
	ЗаписатьСообщение("ДЕБАГ",Перечисления.мис_СтатусыСообщений.Отладка,Описание,1);
	
КонецПроцедуры

 
#Область Сеттеры

// Описание_метода
//
// Параметры:
//	ИдВызова 	- спр tm_ИндексЛога / строка - Если передана строка, то создает новый элемент справочника
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция сетИдВызова(Знач ИдВызоваПараметр = Неопределено) Экспорт
	
	Если ТипЗнч(ИдВызоваПараметр) <> Тип("СправочникСсылка.мис_ИндексЛога") Тогда
		
		ИдВызоваПараметр = mis_LoggerServer.СоздатьИдВызова(
			Неопределено, 
			"ИндексЛога. Время запуска "+Строка(ТекущаяДатаСеанса()), 
			ТекущаяДатаСеанса(),
			"Обработка Logger:сетИдВызова()", //имя метода, создавшего ИДВызова
			Неопределено);		
			
	КонецЕсли; 

	ИдВызова = ИдВызоваПараметр;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти


#Область Геттеры

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция гетИдВызова() Экспорт
	
	Возврат ИдВызова;
	
КонецФункции

#КонецОбласти


#Область Замер

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
// Использование
//	Вариант 1. Без возвращаемого значения.
//		
//	Логгер.НачЗамер();
//	Логгер.Инфо ("Начало отправки.");
//	Логгер.Инфо("Отправка завершена. Время " + Логгер.ВремяОпер());
//
//	Вариант 2. С использованием возвращаемого значения
//
//	ВремяНач = Логгер.НачЗамер();
//	Логгер.Инфо ("Начало отправки.");
//	Логгер.Инфо("Отправка завершена. Время " + Логгер.ВремяОпер(ВремяНач));
//
Функция НачЗамер() Экспорт

	ЗамерВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Возврат ЗамерВремяНачала;
	
КонецФункции
 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВремяОпер(Знач НачВремя = Неопределено) Экспорт
	
	Если не ЗначениеЗаполнено(НачВремя) Тогда
		НачВремя = ЗамерВремяНачала;
	КонецЕсли; 
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() - НачВремя;
	
КонецФункции

// Возвращает строку, время операции + " мс", например "1254 мс"
Функция ВремяОперМС(Знач НачВремя = Неопределено) Экспорт
	
	Если не ЗначениеЗаполнено(НачВремя) Тогда
		НачВремя = ЗамерВремяНачала;
	КонецЕсли; 
	Возврат Строка(ВремяОпер(НачВремя)) + " мс";
	
КонецФункции

 
#КонецОбласти


// Описание_метода
//
// Параметры:
//	т 	- ИнформацияОбОшибке - значение, возвращаемое встроенной функцией ИнформацияОбОшибке()
//
// Возвращаемое значение:
//	Тип: строка
//
Функция _ОписаниеОшибки( т ) Экспорт
	
	Возврат Обработки.мис_Logger._ОписаниеОшибки( т );
	
КонецФункции
 



	
