
Перем мИдВызоваГУИД;
Перем ИмяФайлаИндексаЛога;
Перем КаталогФайловЛогов;

//Писать в файл будем через FSO. Так файл не блокируется и может быть прочитан logstash или filebeat
Перем ScriptingFileSystemObject;

// Возвращает этот объект, если запись в приемник возможна. Иначе - возвращает Неопределено.
Функция Конструктор(ИдВызова_, Знач ИмяЛога = Неопределено) Экспорт
	к = КаталогФайловЛогов();
	
	Если СокрЛП(к) = "" ИЛИ СокрЛП(к) = "/" ИЛИ СокрЛП(к) = "\" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мИдВызоваГУИД = ИдВызова_.УникальныйИдентификатор();
	КаталогФайловЛогов = КаталогФайловЛогов();
	ИмяФайлаИндексаЛога = ИмяФайлаИндексаЛога();
	
	ScriptingFileSystemObject=Новый COMОбъект("Scripting.FileSystemObject");

	//http://scriptcoding.ru/2013/07/08/fso-createtextfile/
	//CreateTextFile(Filename [,Overwrite[, Unicode]]) – 
	//Видим, что метод принимает три параметра, только первый параметр является обязательным. 
	//Filename – Данный параметр содержит строку, которая определяет путь и имя для создаваемого текстового файла. 
	//	Если указать только имя файла, то он будет создан в текущем каталоге (каталог, из которого произведен запуск сценария) 
	//Overwrite – Параметр является необязательным. Может принимать логическое 
	//	true – перезаписать файл, если он уже существует или
	//	false – возможность перезаписи отсутствует. По умолчанию, стоит значение false.
	//Unicode – Данный параметр не является обязательным, он определяет кодировку создаваемого текстового файла.
	//	Может принимать логическое значение true – формат Unicode или false – формат ASCII.
	
	//Источник: http://scriptcoding.ru/2013/07/08/fso-createtextfile/ Внимание! Права на публикацию материалов сайта находятся под охраной © http://matrixblog.ru

	//http://scriptcoding.ru/2013/07/29/fso-opentextfile/
	//OpenTextFile(filename [,iomode [,create [,format]]]) – 
	//После вызова метода он автоматически предоставляет доступ к объекту Textstream. 
	//Давайте рассмотрим описание параметров: 
	//filename – собственно, путь к текстовому файлу.
	//iomode – отвечает за режим доступа, например, 
	//	ForReading - только чтение (1), 
	//	ForWriting - для записи (2), 
	//	ForAppending - для добавления (8). 
	//Create - параметр определяет, что делать, если файл с подобным именем не существует (параметр filename): 
	//	true – документ создастся, 
	//	false – документ создаваться не будет. 
	//format – задает кодировку: 
	//	TristateUseDefault – формат системы по умолчанию (-2), 
	//	TristateTrue - формат Unicode (-1), 
	//	TristateFalse – формат ASCII (0).

	//Источник: http://scriptcoding.ru/2013/07/29/fso-opentextfile/ Внимание! Права на публикацию материалов сайта находятся под охраной © http://matrixblog.ru

	Попытка
		//Если Не ScriptingFileSystemObject.FileExists(ИмяФайлаИндексаЛога) Тогда
		//    file=ScriptingFileSystemObject.CreateTextFile(ИмяФайлаИндексаЛога, -1, 1); //создать файл, перезаписывая существующий.
		//    //file.WriteLine(""+ИмяЛога);
		//    file.Close();
		//Иначе
            file=ScriptingFileSystemObject.OpenTextFile(ИмяФайлаИндексаЛога, 8, 1, -1); //дополнить файл
            //file.WriteLine(ЛогСтрока);
            file.Close();
        //КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	//Зап = ОткрытьФайлЛога();
	//Если Зап = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 
	//
	//
	
	Возврат ЭтотОбъект;
	
КонецФункции

//Параметры:
//	КраткоеОписание  - Строка - Заголовок сообщения
//	ВидСообщения - ПеречислениеСсылка.СтатусыСообщений, СправочникСсылка.ТиповыеСообщения, Строка - Статус сообщения. Если строка, то это шаблон поиска в типовых сообщениях по шаблону
//	ДетальноеОписание - Строка - Подробное сообщение
//	Уровень - число - уровень логов. 1-дебаг,2-инфо,3-варн,4-ерр,5-крит,9-офф
//Возвращаемое значение:
//	Нет
Процедура ЗаписатьСообщение(Знач КраткоеОписание = "ИНФО", 
						ВидСообщения = Неопределено, 
						Знач ДетальноеОписание="",
						Знач Уровень = 2) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если настроен каталог с логами, то пишем лог в файлы
	ЗаписатьВФайлЛога(Строка(КраткоеОписание), Строка(ДетальноеОписание), Уровень);
	
		
КонецПроцедуры

Функция ВидСообщенияЖР(ВидСообщения)
	
	Если ВидСообщения 		= Перечисления.мис_СтатусыСообщений.Информация Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.Ошибка Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.КритическаяОшибка Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.Предупреждение Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Предупреждение;	
	Иначе 
		ВидСообщенияЖР 			= УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	Возврат ВидСообщенияЖР;
	
КонецФункции
 


#Область ТекстовыйЛог


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция КаталогФайловЛогов() Экспорт Возврат ПараметрыСеанса.мис_КаталогФайловЛогов; КонецФункции
 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ИмяФайлаИндексаЛога() Экспорт
	
	Если СокрЛП(КаталогФайловЛогов) = "" ИЛИ СокрЛП(КаталогФайловЛогов) = "/" ИЛИ СокрЛП(КаталогФайловЛогов) = "\" Тогда
		Возврат "";
	КонецЕсли; 
	Возврат КаталогФайловЛогов+мИдВызоваГУИД+".log";
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОткрытьФайлЛога() Экспорт
	
	Если НЕ ЗначениеЗаполнено(мИдВызоваГУИД) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ИмяФайлаИндексаЛога) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Попытка
		Зап = Новый ЗаписьТекста(ИмяФайлаИндексаЛога,,,Истина);
		Возврат Зап;
	Исключение
	    Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗаписатьВФайлЛога(КраткоеОписание, ДетальноеОписание, Уровень)
	//Зап = ОткрытьФайлЛога();
	//Если Зап = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	//Зап.Записать(Строка(XMLСтрока(ТекущаяДатаСеанса()))+":::::"+Строка(Уровень)+":::::"+КраткоеОписание+":::::");
	//Зап.ЗаписатьСтроку(ДетальноеОписание,);
	//Попытка
	//	Зап.Закрыть();
	//Исключение
	//КонецПопытки; 
	
	//https://www.notion.so/nicolas1823244/1-COM-Scripting-FileSystemObject-6754aa134b6143a7a8d6ed13c9c1f19a
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
	    file=ScriptingFileSystemObject.OpenTextFile(ИмяФайлаИндексаЛога, 8, 1, -1); //дополнить файл
	    file.WriteLine(Строка(XMLСтрока(ТекущаяДатаСеанса()))+" "+Строка(Уровень)+" "+Строка(КраткоеОписание)+" "+Строка(ДетальноеОписание));
	    file.Close();
	КонецЕсли; 
	
КонецПроцедуры
 

#КонецОбласти

		//Если Не ScriptingFileSystemObject.FileExists(ИмяФайлаИндексаЛога) Тогда
		//    file=ScriptingFileSystemObject.CreateTextFile(ИмяФайлаИндексаЛога, -1, 0); //создать файл, перезаписывая существующий.
		//    file.WriteLine(ЛогСтрока);
		//    file.Close();
		//Иначе
		//    file=ScriptingFileSystemObject.OpenTextFile(ИмяФайлаИндексаЛога, 8, 0); //дополнить файл
		//    file.WriteLine(ЛогСтрока);
		//    file.Close();
		//КонецЕсли;
