
// Создает запись с указанным количеством фоновых процессов.
// В параметре Наименование нужно указывать имя того метода,
// который будет запускаться в фоне.
// Если запись уже существует и количество фоновых процессов не равно нулю,
// то оно не изменяется!
//
// Параметры:
//	Наименование 	- строка 	- имя метода с префиксом в виде общего модуля: ОбщийМодуль1.ИмяМетода()
//	Лимит			- число		- макс. количество фоновых процессов с этим методом.
//
Процедура УстановитьЛимитФоновыхПроцессов(Наименование, Лимит, ИдВызова = Неопределено, Обновлять = Ложь) Экспорт

	СпрСсылка = Справочники.мис_СвойстваМетодов.НайтиПоНаименованию(Наименование, Истина);
	
	Если СпрСсылка = Справочники.мис_СвойстваМетодов.ПустаяСсылка() Тогда
		
		Р = Справочники.мис_СвойстваМетодов.СоздатьЭлемент();
		Р.Наименование = Наименование;
		Р.ПараллельныхПроцессов = Лимит;
		Р.Записать();
		
	Иначе
		Если Обновлять = Ложь Тогда
		
			Возврат;
		
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Справочник.мис_СвойстваМетодов";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка",СпрСсылка);
		
		строка_эл = строка(СпрСсылка)+", код "+строка(СпрСсылка.Код);
		НачатьТранзакцию();
		Попытка
		
			Блокировка.Заблокировать();
			Р = СпрСсылка.ПолучитьОбъект();
			Р.ПараллельныхПроцессов = Лимит;
			Р.Записать();
			ЗафиксироватьТранзакцию();
		
		Исключение
			ОтменитьТранзакцию();
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			mis_LoggerServer.Предупреждение_(ИдВызова,"Не обновлен элемент "+строка_эл,"Ошибка обновления: "+т);
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает размер пакета для указанного фонового метода. Если не задан - возвращает 1000
//
// Параметры:
//	Наименование 	- строка 	- имя метода с префиксом в виде общего модуля: ОбщийМодуль1.ИмяМетода()
// В параметре Наименование нужно указывать имя того метода,
// который будет запускаться в фоне.
//
// Возвращаемое значение:
//	Тип: число
//
Функция ПолучитьРазмерПакета(Наименование) Экспорт
	
	ИмяКонстанты = "РазмерПакета";
	_РазмерПакета = 1000;
	
	ЭлСправочника = Справочники.мис_СвойстваМетодов.НайтиПоНаименованию(Наименование, Истина);
	Если НЕ ЗначениеЗаполнено(ЭлСправочника) Тогда
		Возврат _РазмерПакета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	мис_СвойстваМетодовКонстанты.Значение КАК Значение
		|ИЗ
		|	Справочник.мис_СвойстваМетодов.Константы КАК мис_СвойстваМетодовКонстанты
		|ГДЕ
		|	мис_СвойстваМетодовКонстанты.Ссылка = &Ссылка
		|	И мис_СвойстваМетодовКонстанты.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", ИмяКонстанты);
	Запрос.УстановитьПараметр("Ссылка", ЭлСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Значение.Получить()) <> Тип("Число") Тогда
			Возврат _РазмерПакета;
		КонецЕсли;
		Возврат ВыборкаДетальныеЗаписи.Значение.Получить();
	КонецЦикла;
	
	Возврат _РазмерПакета;
	
КонецФункции

//не надо помещать эту функцию в Повт Использ
Функция ПолучитьПараметрПроцедуры(ИмяПроцедуры, ИмяПараметра) Экспорт
	пр = Неопределено;
	ЭлСправочника = Справочники.мис_СвойстваМетодов.НайтиПоНаименованию(ИмяПроцедуры, Истина);
	Если НЕ ЗначениеЗаполнено(ЭлСправочника) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Рез = ЭлСправочника.Константы.Найти(ИмяПараметра,"Имя");
	Если Рез <> Неопределено Тогда
		пр = Рез.Значение.Получить();
	КонецЕсли;
	Возврат пр;
КонецФункции

Функция ВключенФлагПрерыванияПроцедуры(ИмяПроцедуры) Экспорт
	ЭлСправочника = Справочники.мис_СвойстваМетодов.НайтиПоНаименованию(ИмяПроцедуры, Истина);
	Если НЕ ЗначениеЗаполнено(ЭлСправочника) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ЭлСправочника.Прерывание;
КонецФункции

