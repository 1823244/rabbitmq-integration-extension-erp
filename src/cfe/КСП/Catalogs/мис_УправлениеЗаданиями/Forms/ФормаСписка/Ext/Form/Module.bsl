////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыводитьОтчет = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновлениеТаблицыСтатусы",10,Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////

#Область ОбработчикиКомандФормы

// Обработчик команды. Кнопка "Выполнить сейчас"
// Параметры
//	нужны для программных вызовов этого метода
&НаКлиенте
Процедура ИнтерактивныйЗапуск(Команда,ПараметрыСледующего=Неопределено,БезВопросов = Ложь)
	
	Если ПараметрыСледующего = Неопределено Тогда
		Задание = Элементы.Список.ТекущаяСтрока; // текущая строка в данном случае - это ссылка на элемент или группу справочника
		СледующаяПроцедура = Элементы.Список.ТекущиеДанные.СледующаяПроцедура;
		Реквизиты =ЗначенияРеквизитовОбъекта(Задание,"СледующаяПроцедура, ЭтоГруппа, Обработка, ПроцедураСПараметрами");
	Иначе
		Задание = ПараметрыСледующего.Задание;
		Реквизиты = ЗначенияРеквизитовОбъекта(Задание,"СледующаяПроцедура, ЭтоГруппа, Обработка, ПроцедураСПараметрами");
		СледующаяПроцедура = Реквизиты.СледующаяПроцедура;
		БезВопросов = ПараметрыСледующего.БезВопросов;
	КонецЕсли;
		
	Если Реквизиты.ЭтоГруппа Тогда
		
		ЗапуститьГруппуСправочника(Задание, БезВопросов);
		
	Иначе
		
		ЗапуститьЭлементСправочника(Задание, Реквизиты, БезВопросов, СледующаяПроцедура);
		
	КонецЕсли;
	
	Элементы.Статусы.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Описание_метода
//
// Параметры:
//	Задание 	- СправочникСсылка.мис_УправлениеЗаданиями - то, что мы запускаем на выполнение
//
Процедура ЗапуститьГруппуСправочника(Задание, БезВопросов)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задание", Задание);
	
	Если БезВопросов Тогда
		
		//Без открытия формы ФормаОбщихПараметров. Группа заданий запускается с настройками, сохраненными ранее.
		
		СтруктураРезультат = Новый Структура;
		СтруктураРезультат.Вставить("ИспользоватьОбщиеПараметры",Ложь);
		СтруктураРезультат.Вставить("ОбщиеПараметры",ПараметрыФормы);
		// Признак ЗапускатьВФоне можно установить только в форме ФормаОбщихПараметров,
		// а в режиме БезВопросов мы ее не показываем. Поэтому запускаем без фона.
		СтруктураРезультат.Вставить("ЗапускатьВФоне",Ложь);
				
		Асинк_ИнтерактивныйЗапускГруппы(СтруктураРезультат, ПараметрыФормы);
		
	Иначе
		
		ОпОп = Новый ОписаниеОповещения("Асинк_ИнтерактивныйЗапускГруппы",ЭтаФорма,ПараметрыФормы);
		
		ОткрытьФорму("Справочник.мис_УправлениеЗаданиями.Форма.ФормаОбщихПараметров",
			ПараметрыФормы,ЭтаФорма,,,,ОпОп,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗапуститьЭлементСправочника(Задание, Реквизиты, БезВопросов, СледующаяПроцедура)
	
//----		Запуск элемента справочника
	
	// Тут нужно показывать диалог с предложением поменять параметры запуска регламетного задания.
	// Параметры мы не будем сохранять, а просто передадим в нужную процедуру.
	
	// Проверка для программного вызова
	Если НЕ ЗначениеЗаполнено(Задание) Тогда
		Возврат;
	КонецЕсли;
	
	// Готовим параметры для формы "ФормаПараметров".
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задание", Задание);
	
	// Готовим параметры для немодального вызова.
	ДопПараметрыАсинк = Новый Структура;
	ДопПараметрыАсинк.Вставить("Задание", Задание);
	// Если настроена цепочка заданий, то перед запуском каждого следующего
	// будет отображаться окно редактирования параметров.
	// Оно позволяет, в том числе, отменить выполнение оставшейся цепочки.
	// Этот флаг отключает отображение данного окна.
	// В результате все задания запускаются с сохраненными параметрами.
	ДопПараметрыАсинк.Вставить("БезВопросов", БезВопросов);
	// Цепочка заданий. Опционально.
	ДопПараметрыАсинк.Вставить("СледующаяПроцедура", СледующаяПроцедура);
	
	// 2022 не работает!
	//
	//// todo 2019-07-26 Подумать над порядком вызовов.
	//// Должно ли это идти раньше, чем блок "ЗначениеЗаполнено(Реквизиты.Обработка)"
	//// На текущий момент "Обработка" не используется.
	//// Это был костыль для импорта из экселя.
	//// Однако, может понадобиться в будущем
	//Если БезВопросов Тогда
	//	
	//	СтруктураРезультат = Новый Структура;
	//	СтруктураРезультат.Вставить("ИспользоватьОбщиеПараметры",Ложь);
	//	СтруктураРезультат.Вставить("ОбщиеПараметры",ПараметрыФормы);
	//	СтруктураРезультат.Вставить("ЗапускатьВФоне",Ложь);	
	//	
	//	ПараметрыФормы.Вставить("БезВопросов", Истина);
	//	ПараметрыФормы.Вставить("ДопПараметрыАсинк", ДопПараметрыАсинк);
	//	
	//
	//	Асинк_ИнтерактивныйЗапуск(СтруктураРезультат, ПараметрыФормы);
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Обработка) Тогда
		
		// Показываем пользователю форму редактирования параметров
		
		ОпОп = Новый ОписаниеОповещения("Асинк_ИнтерактивныйЗапуск",ЭтаФорма,ДопПараметрыАсинк);
		
		ОткрытьФорму("Справочник.мис_УправлениеЗаданиями.Форма.ФормаПараметров",
			ПараметрыФормы,ЭтаФорма,,,,ОпОп,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		//СУУ_ЕНС 24.12.2020 пока не будет работать. надо переделать модальное открытие окна обработки
		// и найти в базе МИС пример, чтобы посмотреть там, что должна делать эта обработка
		
		// Если указать обработку, написанную по определенным правилам,
		// то работать будет она.
		Если НЕ ОбработкаСуществует(Реквизиты.Обработка) Тогда
			ПоказатьПредупреждение(,"Обработка, указанная в задании, не существует!");
			Возврат;
		КонецЕсли;
		
		ФормаОбработки = ПолучитьФорму("Обработка."+Реквизиты.Обработка+".Форма" ,
			Новый Структура("Ссылка,ИмяПроцедуры",Задание,Реквизиты.ПроцедураСПараметрами));
		
		ДанныеОбработки = ФормаОбработки.ОткрытьМодально();

		Если ДанныеОбработки = Неопределено Тогда
			ПоказатьПредупреждение(,"Обработка не вернула данные для запуска!");
			Возврат;
		КонецЕсли;
		
		ВременныеПараметры = ДанныеОбработки.ВременныеПараметры;
		ИдВызоваОбработки  = ДанныеОбработки.ИдВызова;
		
	КонецЕсли;

КонецПроцедуры

#Область Команда_ИнтерактивныйЗапускБезВопросов

// Обработчик команды (команда отображается только во всех действиях)
&НаКлиенте
Процедура ИнтерактивныйЗапускБезВопросов(Команда)
	
	ТекстВопроса = НСтр("ru = 'Будет произведен запуск задания без корректировки параметров. Продолжить?';en = 'Unattended start. Continue?'");
	Оповещение = Новый ОписаниеОповещения("Асинк_ИнтерактивныйЗапускБезВопросов", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

// Обработчик оповещения. 
&НаКлиенте
Процедура Асинк_ИнтерактивныйЗапускБезВопросов(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		
		ИнтерактивныйЗапуск(Неопределено,Неопределено,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////

#Область СлужебныеСервер

&НаСервереБезКонтекста
Функция ОбработкаСуществует(ИмяОбработки)
	Рез = Метаданные.Обработки.Найти(ИмяОбработки)<>Неопределено;
	
	Если Рез = Ложь Тогда
		Сообщить("Обработки '"+ИмяОбработки+"' нет в конфигурации");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ВклРеглЗаданияСервер(ВключитьИлиВыключить)
	мис_УправлениеЗаданиямиСлужебный.УстановитьЗапретНаЗапускРегламентногоЗадания(ВключитьИлиВыключить);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Знач Ссылка, Реквизиты)
	 Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,Реквизиты);
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьУникальныйКлючЗадания(Задание)
	
	Возврат мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(Задание);

КонецФункции

&НаСервереБезКонтекста
Функция СледующаяПроцедура(Задание)
	
	Возврат Задание.СледующаяПроцедура;

КонецФункции

#КонецОбласти

#Область ИнтерактивныйЗапуск

// Эти асинхронные вызовы срабатывают из обработчиков команд

#Область ИнтерактивныйЗапускЭлемента

// Сюда приходим после закрытия окна с параметрами при запуске элемента справочника
&НаКлиенте
Процедура Асинк_ИнтерактивныйЗапуск(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда     //ДанныеФормыСтруктура - табл часть на форме с параметрами задания
		Возврат;
	КонецЕсли;
	
	Задание 			= ДопПараметры.Задание;
	БезВопросов 		= ДопПараметры.БезВопросов;
	//ДопПараметрыАсинк	= ДопПараметры.ДопПараметрыАсинк;
	//ДанныеФормыСтруктура не сериализуется, поэтому перенесем все в массив структур
	ПараметрыЗадания = Новый Массив;
	Для Каждого Элм Из Результат Цикл
		ПараметрыЗадания.Добавить(Новый Структура("НомерСтроки,Параметр,Значение,ЭтоВыражение,ТипЗначения",
			Элм.НомерСтроки,Элм.параметр,Элм.Значение,Элм.ЭтоВыражение,Элм.ТипЗначения));
	КонецЦикла;

	//// для отладки
	//ЗапуститьЭлементСправочника_дляОтладки(Задание, ПараметрыЗадания, БезВопросов);
	//
	//Возврат;
	//// конец для отладки

	ДлительнаяОперация = ЗапуститьЭлементСправочникаНаСервере(
		Задание, ПараметрыЗадания, БезВопросов);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатЗапускаЭлемента", ЭтотОбъект, ДопПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
КонецПроцедуры

&НаСервере
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗапуститьЭлементСправочника_дляОтладки(Задание, ПараметрыЗадания, БезВопросов)
	
	ИДВызова = mis_LoggerServer.СоздатьИдВызова (Неопределено,
		Задание.Наименование + " (Interactive)",
		ТекущаяДатаСеанса(),
		Задание.Наименование,
		Задание.ПараметрыПроцедуры,
		Задание);
		
	мис_класс_ЗапускЗаданий
		.ЗапуститьЭлементСправочника(ИдВызова, Задание, ПараметрыЗадания, БезВопросов, Неопределено);

КонецФункции
 
// Запускает выполнение задания "не в фоне". Здесь имеется в виду, что запуск выполняется через подсистему TaskManagement, но без фонового задания. 
// Фактически, выполняется в фоне, через ДлительныеОперации, чтобы показать форму "Ожидайте завершения".
// Параметры
//	ПараметрыЗадания - массив структур - репрезентация таблицы параметров на форме задания (параметры метода, запускаемого в фоне)
&НаСервере
Функция ЗапуститьЭлементСправочникаНаСервере(Задание, ПараметрыЗадания, БезВопросов)
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтаФорма.УникальныйИдентификатор);
	
	ИДВызова = mis_LoggerServer.СоздатьИдВызова (Неопределено,
		Задание.Наименование + " (Interactive)",
		ТекущаяДатаСеанса(),
		Задание.Наименование,
		Задание.ПараметрыПроцедуры,
		Задание);
	
	ИмяМетода = "мис_класс_ЗапускЗаданий.ЗапуститьЭлементСправочника";

	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, ИдВызова, Задание, ПараметрыЗадания, БезВопросов);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

//3) Обработка результата длительной операции:
&НаКлиенте
Процедура ОбработатьРезультатЗапускаЭлемента(Результат, ДопПараметры) Экспорт
	
	ОбновитьИнтерфейс();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	// переехало сюда из метода Асинк_ИнтерактивныйЗапуск()
	
	ИдВызова = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ВыводитьОтчет Тогда
		МодульЛоггерКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("мис_ЛоггерКлиент");
		Если МодульЛоггерКлиент <> Неопределено Тогда
			МодульЛоггерКлиент.ОткрытьОтчетПоЛогу(ИдВызова);
		КонецЕсли;
	КонецЕсли;
	
	СледующаяПроцедура 	= ДопПараметры.СледующаяПроцедура;
	
	// для вызова следующего задания необходима рекурсия
	Если ЗначениеЗаполнено(СледующаяПроцедура) Тогда
		
		ПараметрыСледующего = Новый Структура;
		ПараметрыСледующего.Вставить("Задание",СледующаяПроцедура);
		ПараметрыСледующего.Вставить("СледующаяПроцедура",СледующаяПроцедура);
		ПараметрыСледующего.Вставить("БезВопросов",ДопПараметры.БезВопросов);
		// Здесь мы точно знаем, что запускается элемент, 
		// а он не может быть запущен в фоне.
		ПараметрыСледующего.Вставить("ЗапускатьВФоне",Ложь);
		
		ИнтерактивныйЗапуск(Неопределено,ПараметрыСледующего);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныйЗапускГруппы

// сюда приходим после закрытия формы общих параметров
// Параметры
//	Результат - структура - поля:
//		СтруктураВозврата.Вставить("ИспользоватьОбщиеПараметры",ИспользоватьОбщиеПараметры);
//		СтруктураВозврата.Вставить("ОбщиеПараметры",СтруктураПараметров);
//		СтруктураВозврата.Вставить("ЗапускатьВФоне",ЗапускатьВФоне);
//	ДопПараметры - структура -
&НаКлиенте
Процедура Асинк_ИнтерактивныйЗапускГруппы(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда  //структура
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("ЗапускатьВФоне",Результат.ЗапускатьВФоне);
	
	Если Результат.ИспользоватьОбщиеПараметры Тогда
		ОбщиеПараметры = Результат.ОбщиеПараметры;
		//дополнительно проверим
		Если ОбщиеПараметры = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ОбщиеПараметры = Неопределено;
	КонецЕсли;
	
	// Запуск
	
	ЗапускИзСправочника= Истина;
	СледующаяПроцедура = СледующаяПроцедура(ДопПараметры.Задание);
	Контекст = Новый Структура;
	Контекст.Вставить("Ключ", 				СформироватьУникальныйКлючЗадания(ДопПараметры.Задание));
	Контекст.Вставить("Ссылка",				ДопПараметры.Задание);
	Контекст.Вставить("ЭтоЦепочка",			ЗначениеЗаполнено(СледующаяПроцедура));
	Контекст.Вставить("ЗапускИзСправочника",ЗапускИзСправочника);
	Контекст.Вставить("ОбщиеПараметры",		ОбщиеПараметры);
	
	Если Результат.ЗапускатьВФоне Тогда
		// уходим на сервер
		ЗапуститьГруппуНаСервереВФоне(ДопПараметры.Задание, Контекст);
			
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатЗапускаГруппы", ЭтотОбъект, ДопПараметры);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		
		ДлительнаяОперация = ЗапуститьГруппуНаСервереВФонеБлокироватьИнтерфейс(Контекст);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
	ОбновитьТаблицуСтатусов(Неопределено);
	
КонецПроцедуры

// запуск в фоне без блокировки интерфейса
&НаСервере
Функция ЗапуститьГруппуНаСервереВФоне(Знач Задание, Контекст)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Ключ = мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(Задание);
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Контекст);
	
	ЕстьЗаписи = Истина;//легаси. Истина - не надо делать паузу и ожидать завершения фоновых заданий. 
	// Не блокировать интерфейс для дальнейшей работы пользователя
	                       
	Префикс				= ?(Задание.ЭтоГруппа, "Группа ", "Элемент ");
	
	//fix1 2024-02-23
	Если ксп_Функции.МожноВыполнитьВФоне() Тогда
		
		мис_класс_ФоновыеЗадания.ДобавитьФоновоеЗадание(,
			"мис_УправлениеЗаданиямиСервер.ЗапуститьГруппуВФоне",
			ПараметрыМетода,
			""+Префикс+""""+Задание.Наименование + """, код "+Задание.Код + " (Interactive, background)"
			//+", "+"сеанс="+Строка(НомерСоединенияИнформационнойБазы()),
			,
			ЕстьЗаписи,
			Ключ);
	Иначе
		
		мис_УправлениеЗаданиямиСервер.ЗапуститьГруппуВФоне(Контекст); 
		
	КонецЕсли;
	
КонецФункции

// запуск в фоне через БСП (с ожиданием в интерфейсе)
&НаСервере
Функция ЗапуститьГруппуНаСервереВФонеБлокироватьИнтерфейс(Контекст)
	
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтаФорма.УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"мис_УправлениеЗаданиямиСервер.ЗапуститьГруппуВФоне", Контекст);
	
КонецФункции

//3) Обработка результата длительной операции:
&НаКлиенте
Процедура ОбработатьРезультатЗапускаГруппы(Результат, ДопПараметры) Экспорт
	
	ОбновитьИнтерфейс();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	//СУУ_ЕНС 24.12.2020 так нельзя, потому что отрабатывает сразу, а не ждет завершения. но пусть будет для напоминания переделать 
	Если ДопПараметры.ЗапускатьВФоне Тогда
		Текст = НСтр("ru = 'Завершена работа группы'");
		ПоказатьОповещениеПользователя(Текст);
	КонецЕсли;

	//что_то = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Цепочка_заданий

&НаКлиенте
Процедура ВыстроитьЦепочку(Команда)
	ВыстроитьЦепочкуС();
КонецПроцедуры

&НаСервере
Процедура ВыстроитьЦепочкуС()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.мис_УправлениеЗаданиями КАК Спр
		|ГДЕ
		|	Спр.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Спр.Наименование";

	Запрос.УстановитьПараметр("Родитель", Элементы.Список.ТекущийРодитель);

	Результат = Запрос.Выполнить().Выгрузить();
	
	Для сч = 0 По Результат.Количество()-1 Цикл
		
		ТекЭлем = Результат.Получить(сч);
		Об = ТекЭлем.Ссылка.ПолучитьОбъект();
		
		Если сч=Результат.Количество()-1 Тогда
			Об.СледующаяПроцедура = Неопределено;
		Иначе
			Об.СледующаяПроцедура = Результат.Получить(сч+1).Ссылка;
		КонецЕсли;
		
		Об.Записать();
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазорватьЦепочку(Команда)
	РазорватьЦепочкуС();
КонецПроцедуры

&НаСервере
Процедура РазорватьЦепочкуС()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник.мис_УправлениеЗаданиями КАК Спр
		|ГДЕ
		|	Спр.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Родитель", Элементы.Список.ТекущийРодитель);
	Результат = Запрос.Выполнить().Выгрузить();
	Для сч = 0 По Результат.Количество()-1 Цикл
		ТекЭлем = Результат.Получить(сч);
		Об = ТекЭлем.Ссылка.ПолучитьОбъект();
		Об.СледующаяПроцедура = Неопределено;
		Об.Записать();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Флаг_Активность

//// Переключение флага "Активность" в выбранной задаче (можно выбрать несколько через Ctrl)

&НаКлиенте
Процедура ВключитьАктивность(Команда)
	ВключитьАктивностьС();
КонецПроцедуры

&НаСервере
Процедура ВключитьАктивностьС()
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл

			Об = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
			Об.Активность = Истина;
			Об.Записать();
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура вЫключитьАктивность(Команда)
	вЫключитьАктивностьС();
КонецПроцедуры

&НаСервере
Процедура вЫключитьАктивностьС()
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл

			Об = ВыделеннаяСтрока.Ссылка.ПолучитьОбъект();
			Об.Активность = Ложь;
			Об.Записать();
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Отчет

&НаКлиенте
Процедура ПоказатьОтчет(Команда)
	
	МодульЛоггерКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("мис_ЛоггерКлиент");
	Если МодульЛоггерКлиент <> Неопределено Тогда
		МодульЛоггерКлиент.ОткрытьОтчетПоЛогу(Элементы.Статусы.ТекущиеДанные.ИндексЛога);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетОшибки(Команда)
	
	МодульЛоггерКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("мис_ЛоггерКлиент");
	Если МодульЛоггерКлиент <> Неопределено Тогда
		МодульЛоггерКлиент.ОткрытьОтчетПоЛогу(Элементы.Статусы.ТекущиеДанные.ИндексЛога, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетФайлы(Команда)
	
	МодульЛоггерКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("мис_ЛоггерКлиент");
	Если МодульЛоггерКлиент <> Неопределено Тогда
		МодульЛоггерКлиент.ОткрытьОтчетПоЛогуФайлы(Элементы.Статусы.ТекущиеДанные.ИндексЛога);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_событий_элементов_формы

&НаКлиенте
Процедура ОбновитьТаблицуСтатусов(Команда)
	Элементы.Статусы.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМонитор(Команда)
	ОткрытьФорму("Справочник.мис_УправлениеЗаданиями.Форма.ФормаМонитора");
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Статусы.Отбор.Элементы.Количество() = 0 Тогда
		ЭлементОтбора =  Статусы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		ЭлементОтбора = Статусы.Отбор.Элементы.Получить(0);
	КонецЕсли;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Задание");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Элементы.Список.ТекущаяСтрока;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГруппу(Команда)
	Если ОткрытьФормуМодально("Справочник.мис_УправлениеЗаданиями.Форма.ФормаКопирования", Новый Структура("КопируемыйЭлемент",Элементы.Дерево.ТекущаяСтрока)) = 1 Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВклРеглЗадания(Команда)
	ВклРеглЗаданияСервер(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретРеглЗаданий(Команда)
	ВклРеглЗаданияСервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РеглИФонЗаданияОбработка(Команда)
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентныеИФоновыеЗадания");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Элементы.Статусы.Обновить();
КонецПроцедуры

#КонецОбласти

#Область Обработчики_ожидания

&НаКлиенте
Процедура ОбновлениеТаблицыСтатусы() Экспорт
	Элементы.Статусы.Обновить();
КонецПроцедуры

#КонецОбласти
