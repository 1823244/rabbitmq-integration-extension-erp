
&НаКлиенте
Процедура ОК(Команда)

	мПроцедуры = МассивПроцедур();
	ТекстВопроса1 =
	"Даты находятся в периоде рассчитанных итогов,
	|рекомендуется сделать запуск в режиме сдвига итогов либо не использовать
	|параллельную обработку. В противном случае возможна вероятность блокировок.
	|";
	
	ТекстВопроса2 =
	"Дата окончания – в будущем.
	|Расчеты с будущими датами могут быть некорректными по причине отсутствия курсов , котировок и т.д..";

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да);
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	Кнопки.Добавить(КодВозвратаДиалога.Отмена,"Редактировать параметры");
	
	ИндексПроцедуры =  мПроцедуры.Найти(ВРЕГ(Параметры.ИмяПроцедуры));
	Если ИндексПроцедуры <> Неопределено Тогда
		//проверять что даты (либо значения по формулам) находятся в периоде уже рассчитанных итогов
		//1. Получить период рассчитанных итогов
		//ПериодРассчитанныхИтогов = ПолучитьПериодРассчитанныхИтоговСерв();
		//2. Сравнить период из параметров с этой датой.
		ДатыВПериодеРассчитанныхИтогов = ДатыВПериодеРассчитанныхИтогов(ИндексПроцедуры,ПараметрыПроцедуры);
		ДатаОкончанияВБудущем          = ДатаОкончанияВБудущем(ИндексПроцедуры,ПараметрыПроцедуры);

		Если ДатыВПериодеРассчитанныхИтогов ИЛИ ДатаОкончанияВБудущем Тогда
			//3. Если попадает, то вывести вопрос 

			//Формируем заголовок
			Заголовок = "";
			ТекстВопроса = "";
			Если ДатыВПериодеРассчитанныхИтогов Тогда
				Заголовок = "Даты в периоде рассчитанных итогов.";
				ТекстВопроса = ТекстВопроса1;
			КонецЕсли;
			
			Если ДатаОкончанияВБудущем Тогда
				Заголовок = Заголовок+?(Заголовок<>""," ","")+"Дата окончания в будущем.";
				ТекстВопроса = ТекстВопроса + ?(ТекстВопроса<>"",Символы.ПС,"") + ТекстВопроса2;
			КонецЕсли;

			ТекстВопроса=ТекстВопроса+Символы.ПС+Символы.ПС+"Остановить расчет?";
			Ответ = Вопрос(ТекстВопроса,Кнопки,,,Заголовок);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				// Если пользователь отвечает Да значит ничего не запускается.
				ЭтаФорма.Закрыть(Неопределено);
				Возврат;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	ЭтаФорма.Закрыть(ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	ЭтаФорма.Закрыть(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Параметры.Задание);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка,
	               |	Спр.ПараметрыПроцедуры,
	               |	Спр.ЭтоГруппа
	               |ИЗ
	               |	Справочник.мис_УправлениеЗаданиями КАК Спр
	               |ГДЕ
	               |	Спр.Ссылка = &Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЭтоГруппа Тогда
			Сообщить("Для пакета заданий нельзя установить параметры.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ТекущиеПараметры  = Выборка.ПараметрыПроцедуры.Получить();
	КонецЕсли;
	
	Если ТекущиеПараметры <> Неопределено Тогда
		ЗначениеВДанныеФормы(ТекущиеПараметры,ПараметрыПроцедуры);
	КонецЕсли;
	
	// надпись
	ИмяЗадания = Строка(Параметры.Задание)+", код "+строка(Параметры.Задание.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцедурыЭтоВыражениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПараметрыПроцедуры.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоВыражение Тогда
		ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("Строка");
	Иначе
		ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов(,Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцедурыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокЗначений",Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение);
		//ПараметрыФормы.Вставить("ТипСписка",ВыбТип.Значение);
		Значение = ОткрытьФормуМодально("Справочник.мис_УправлениеЗаданиями.Форма.ФормаСпискаЗначений",ПараметрыФормы);
		Если Значение <> Неопределено Тогда
			Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение = Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцедурыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокЗначений",Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение);
		//ПараметрыФормы.Вставить("ТипСписка",ВыбТип.Значение);
		Значение = ОткрытьФормуМодально("Справочник.мис_УправлениеЗаданиями.Форма.ФормаСпискаЗначений",ПараметрыФормы);
		Если Значение <> Неопределено Тогда
			Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение = Значение;
		КонецЕсли;
	КонецЕсли;
	
	мТипы = Новый Массив;
	мТипы.Добавить(ТипЗнч(Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение));
	Элементы.ПараметрыПроцедуры.ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов(мТипы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцедурыЗначениеПриИзменении(Элемент)
	мТипы = Новый Массив;
	мТипы.Добавить(ТипЗнч(Элементы.ПараметрыПроцедуры.ТекущиеДанные.Значение));
	Элементы.ПараметрыПроцедуры.ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов(мТипы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатыВПериодеРассчитанныхИтогов(ИндексПроцедуры,Знач ВременныеПараметры)
	ДатаАктуальностиБухИтогов = КонецДня(РегистрыБухгалтерии.Хозрасчетный.ПолучитьПериодРассчитанныхИтогов());
	ТаблицаПараметров         = ДанныеФормыВЗначение(ВременныеПараметры,Тип("ТаблицаЗначений"));
			
	МассивПараметров          = мис_УправлениеЗаданиямиСервер.ТаблицаПараметровВМассивПараметров(ТаблицаПараметров,Неопределено);
	
	ТЗ = ТаблицаПроцедур();
	СтрокаТЗ = ТЗ.Получить(ИндексПроцедуры);
	ДатаНачала    = МассивПараметров[СтрокаТЗ.ИндексДатаНачала];
	ДатаОкончания = МассивПараметров[СтрокаТЗ.ИндексДатаОкончания];  // не понадобилось
	
	Возврат НачалоДня(ДатаНачала) < ДатаАктуальностиБухИтогов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаОкончанияВБудущем(ИндексПроцедуры,Знач ВременныеПараметры)
	
	ТаблицаПараметров         = ДанныеФормыВЗначение(ВременныеПараметры,Тип("ТаблицаЗначений"));
	МассивПараметров          = мис_УправлениеЗаданиямиСервер.ТаблицаПараметровВМассивПараметров(ТаблицаПараметров,Неопределено);
	
	ТЗ = ТаблицаПроцедур();
	СтрокаТЗ = ТЗ.Получить(ИндексПроцедуры);
	ДатаНачала    = МассивПараметров[СтрокаТЗ.ИндексДатаНачала];
	ДатаОкончания = МассивПараметров[СтрокаТЗ.ИндексДатаОкончания];  // не понадобилось

	Возврат НачалоДня(ДатаОкончания) > НачалоДня(ТекущаяДатаСеанса());
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаПроцедур()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("ИндексДатаНачала");
	ТЗ.Колонки.Добавить("ИндексДатаОкончания");
	ТЗ.Колонки.Добавить("ИндексПараллельно");
	ТЗ.Колонки.Добавить("ИндексОтключениеИтогов");
	ТЗ.Колонки.Добавить("ИндексОтладка");

	Возврат ТЗ;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуТЗПроцедур(ТЗ,Имя,ИндексДатаНачала,ИндексДатаОкончания,ИндексПараллельно=Неопределено,ИндексОтключениеИтогов=Неопределено,ИндексОтладка=Неопределено)
	НовСтрока = ТЗ.Добавить();
	НовСтрока.Имя                 = Имя;
	НовСтрока.ИндексДатаНачала    = ИндексДатаНачала;
	НовСтрока.ИндексДатаОкончания = ИндексДатаОкончания;
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивПроцедур()
	ТаблицаПроцедур = ТаблицаПроцедур();
	Возврат ТаблицаПроцедур.ВыгрузитьКолонку("Имя");
КонецФункции

