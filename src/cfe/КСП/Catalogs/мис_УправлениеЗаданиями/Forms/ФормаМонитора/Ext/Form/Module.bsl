
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДеревоСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьДерево();
КонецПроцедуры

//формирует дерево 
Функция СформироватьДеревоВыполнения() Экспорт
	
	// ВсеЗадания = ПодготовитьСоответствиеСледующих();
	// Выбираем корневые элементы, те, на основе которых создаются регламентные задания.
	// это все элементы с признаком "Запуск по расписанию"
	
	ЗапросЗапускаемыеПоРасписанию = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.мис_УправлениеЗаданиями КАК Т
	|ГДЕ
	|	(Т.ЗапускПоРасписанию
	|			ИЛИ Т.Активность)
	|	И Т.Родитель = ЗНАЧЕНИЕ(Справочник.мис_УправлениеЗаданиями.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ЕстьГруп
	|				ТОГДА Т.Ссылка В ИЕРАРХИИ (&Груп)
	|			ИНАЧЕ 1 = 1
	|		КОНЕЦ
	|	И НЕ Т.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Наименование");
	
	ЗапросЗапускаемыеПоРасписанию.УстановитьПараметр("Груп", Группа);
	ЗапросЗапускаемыеПоРасписанию.УстановитьПараметр("ЕстьГруп", ЗначениеЗаполнено(Группа));
	мЗапускаемыеПоРасписанию = ЗапросЗапускаемыеПоРасписанию.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Дерево = Новый ДеревоЗначений;
	ЗаполнениеДерева(Дерево,мЗапускаемыеПоРасписанию);
		
	Возврат Дерево;
КонецФункции

Процедура ЗаполнениеДерева(Дерево,мЗапускаемыеПоРасписанию)
	ТЗЗадания = ПодготовитьТаблицуЗаданий();
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Ссылка");
	Дерево.Колонки.Добавить("ЕстьСледующий");
	Дерево.Колонки.Добавить("СледующаяПроцедура");
	Дерево.Колонки.Добавить("СтатусСледованияРасписанию");
	Дерево.Колонки.Добавить("ЭтоГруппа");
	Дерево.Колонки.Добавить("СтатусВыполнения");
	Дерево.Колонки.Добавить("ИндексЛога");
	Дерево.Колонки.Добавить("ДатаНачала");
	Дерево.Колонки.Добавить("ДатаОкончания");
	Дерево.Колонки.Добавить("Период");
	Дерево.Колонки.Добавить("СтатусКартинка");
	Дерево.Колонки.Добавить("ВремяОтсутствияОтклика");
	Дерево.Колонки.Добавить("Длительность");
	Дерево.Колонки.Добавить("Пользователь");

	Для Каждого КорневойЭлемент Из мЗапускаемыеПоРасписанию Цикл
		ДобавитьСтрокиДерева(Дерево,КорневойЭлемент,ТЗЗадания);
	КонецЦикла;
КонецПроцедуры

Функция РазностьДат(Знач ДатаНач, Знач ДатаКон)
	
	ТекДата = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
		ДатаНач = ТекДата;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		ДатаКон = ТекДата;
	КонецЕсли;

	Рез = Окр((ДатаКон - ДатаНач)/60,2);
	
	Возврат ?(Рез<0,-Рез,Рез);
	
КонецФункции

Процедура ДобавитьСтрокиДерева(СтрокаДерева,Ссылка,ТЗЗадания)
	
	НайденнаяСтрока = ТЗЗадания.Найти(Ссылка,"Ссылка");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЦепочка = ЗначениеЗаполнено(НайденнаяСтрока.СледующаяПроцедура);
	ЭтоГруппа  = НайденнаяСтрока.ЭтоГруппа;
	НовСтрока  = СтрокаДерева.Строки.Добавить();
	НовСтрока.Ссылка             = Ссылка;
	НовСтрока.ЕстьСледующий      = ЭтоЦепочка;
	НовСтрока.СледующаяПроцедура = НайденнаяСтрока.СледующаяПроцедура;
	НовСтрока.СтатусСледованияРасписанию = ПолучитьСтатусСледованияРасписанию(НайденнаяСтрока);
	НовСтрока.ЭтоГруппа        = ЭтоГруппа;
	НовСтрока.СтатусВыполнения = ?(ЭтоГруппа,Неопределено,НайденнаяСтрока.СтатусВыполнения);
	НовСтрока.ИндексЛога       = НайденнаяСтрока.ИндексЛога;
	НовСтрока.ДатаНачала       = НайденнаяСтрока.ДатаНачала;
	НовСтрока.ДатаОкончания    = НайденнаяСтрока.ДатаОкончания;
	НовСтрока.Период           = НайденнаяСтрока.Период;
	НовСтрока.СтатусКартинка   = ?(ЭтоГруппа,4,ПолучитьСтатусВыполненияЗадания(НайденнаяСтрока.СтатусВыполнения));
	НовСтрока.ВремяОтсутствияОтклика   = НайденнаяСтрока.ВремяОтсутствияОтклика;
	НовСтрока.Длительность = РазностьДат(НайденнаяСтрока.ДатаОкончания,НайденнаяСтрока.ДатаНачала);
	НовСтрока.Пользователь = НайденнаяСтрока.Пользователь;
	
	// добавляем все строки внутри группы в дерево. подчиненность соблюдается.
	Если ЭтоГруппа Тогда
		
		МассивПодчиненных = ПолучитьЭлементыПоРодителю(Ссылка,ТЗЗадания);
		
		Для Каждого Элемент Из МассивПодчиненных Цикл
			Если Элемент.Активность Тогда    // Добавляем только активные
				ДобавитьСтрокиДерева(НовСтрока,Элемент,ТЗЗадания);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Получает статус следования расписанию. 
Функция ПолучитьСтатусСледованияРасписанию(НайденнаяСтрока)
	Рез = (ТекущаяДатаСеанса()-НайденнаяСтрока.ДатаПоследнегоЗапуска) > НайденнаяСтрока.ВремяОтсутствияОтклика;
	
	// Проверяем на группу
	Если НайденнаяСтрока.ЭтоГруппа Тогда
		Возврат 3;
	КонецЕсли;
	
	Если Рез ИЛИ НайденнаяСтрока.СтатусВыполнения = Перечисления.мис_СтатусВыполнения.Выполняется Тогда
		Возврат 2; // красный
	Иначе
		Возврат 0; // зеленый
	КонецЕсли;
КонецФункции

Функция ПолучитьСтатусВыполненияЗадания(СтатусВыполнения)
	Если СтатусВыполнения = Перечисления.мис_СтатусВыполнения.ВыполненоБезОшибок Тогда
		Возврат 0; // Зеленый
	ИначеЕсли СтатусВыполнения = Перечисления.мис_СтатусВыполнения.ВыполненоСОшибками Тогда
		Возврат 1; // зеленый
	ИначеЕсли СтатусВыполнения = Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения Тогда
		Возврат 2;
	Иначе
		Возврат 3; // ничего
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементыПоРодителю(Ссылка,ТЗЗадания)
	Массив = Новый Массив;
	
	мСтрокиТЗ = ТЗЗадания.НайтиСтроки(Новый Структура("Родитель",Ссылка));
	
	Если мСтрокиТЗ.Количество()>0 Тогда
		Для Каждого стр Из мСтрокиТЗ Цикл
			Массив.Добавить(стр.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Массив;
КонецФункции

//подготавливает таблицу заданий из справочника заданий.
//На основе этой таблицы будет строиться дерево
Функция ПодготовитьТаблицуЗаданий()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка");
	ТЗ.Колонки.Добавить("СледующаяПроцедура");
	ТЗ.Колонки.Добавить("ЭтоГруппа");
	ТЗ.Колонки.Добавить("ДатаПоследнегоЗапуска");
	ТЗ.Колонки.Добавить("ВремяОтсутствияОтклика");
	ТЗ.Колонки.Добавить("СтатусВыполнения");
	ТЗ.Колонки.Добавить("ИндексЛога");
	ТЗ.Колонки.Добавить("ДатаНачала");
	ТЗ.Колонки.Добавить("ДатаОкончания");
	ТЗ.Колонки.Добавить("Период");
	ТЗ.Колонки.Добавить("Родитель");
	ТЗ.Колонки.Добавить("Пользователь");
	
	ТЗ.Индексы.Добавить("Ссылка");
	ТЗ.Индексы.Добавить("Родитель");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Запрос.УстановитьПараметр("ЕстьФильтр" , ЗначениеЗаполнено(Пользователь));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.СледующаяПроцедура КАК СледующаяПроцедура,
	|	Спр.ЭтоГруппа КАК ЭтоГруппа,
	|	ЕСТЬNULL(РС.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоЗапуска,
	|	ЕСТЬNULL(Спр.ВремяОтсутствияОтклика, 0) КАК ВремяОтсутствияОтклика,
	|	РС.СтатусВыполнения КАК СтатусВыполнения,
	|	РС.ИндексЛога КАК ИндексЛога,
	|	РС.ДатаНачала КАК ДатаНачала,
	|	РС.ДатаОкончания КАК ДатаОкончания,
	|	РС.Период КАК Период,
	|	Спр.Родитель КАК Родитель,
	|	РС.ИндексЛога.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.мис_УправлениеЗаданиями КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мис_СтатусВыполненияЗаданий.СрезПоследних КАК РС
	|		ПО (РС.Задание = Спр.Ссылка)
	|			И (НЕ &ЕстьФильтр
	|				ИЛИ РС.ИндексЛога.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|	И Спр.Активность";

	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Индексы.Добавить("Ссылка");
	ТЗ.Индексы.Добавить("Родитель");
	
	Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДерево(Команда)
	ЗаполнитьДеревоСервер();
	РазвернутьДерево();
КонецПроцедуры

//заполняет дерево на сервере
Процедура ЗаполнитьДеревоСервер()
	Дерево = СформироватьДеревоВыполнения();
	ЗначениеВДанныеФормы(Дерево,ДеревоВыполнения);
КонецПроцедуры

Функция СообщитьРезультатВыполненияЗадания(ИдВызова,Сообщение = Неопределено, ВидСвязи = Неопределено)
	
	Если ВидСвязи = "ЭлектроннаяПочта" Тогда
		//ОтправитьСообщениеПоЭлектроннойПочте();
	ИначеЕсли Видсвязи = "СМС" Тогда
		//ОтправитьСообщениеПоСМС();
	Иначе
	КонецЕсли;
	
	// Заглушка
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ДеревоВыполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД = Элементы.ДеревоВыполнения.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ТД.ИндексЛога) Тогда
		Ключ = ПолучитьКлючЗаписиРегистраСведений(ТД.Период,ТД.Ссылка);
		ПараметрыФормы.Вставить("Ключ",Ключ);
		
		ОткрытьФорму("РегистрСведений.мис_СтатусВыполненияЗаданий.ФормаЗаписи", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

//Формирует ключ записи регистра сведений на сервере
Функция ПолучитьКлючЗаписиРегистраСведений(Период, Задание)
	КлючЗаписи = Новый Структура;
	КлючЗаписи.Вставить("Период", Период);
	КлючЗаписи.Вставить("Задание", Задание);
	Рег = РегистрыСведений.мис_СтатусВыполненияЗаданий;
	Возврат Рег.СоздатьКлючЗаписи(КлючЗаписи);
КонецФункции

&НаКлиенте
Процедура РазвернутьДерево()
	Для Каждого Эл Из ДеревоВыполнения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоВыполнения.Развернуть(Эл.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево()
	Для Каждого Эл Из ДеревоВыполнения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоВыполнения.Свернуть(Эл.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВСправочникЗаданий(Команда)
	ОткрытьФорму("Справочник.мис_УправлениеЗаданиями.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтчет(Команда)
	Если Элементы.ДеревоВыполнения.ТекущиеДанные.ИндексЛога <> Неопределено Тогда
		мис_ЛоггерКлиент.ОткрытьОтчетПоЛогу(Элементы.ДеревоВыполнения.ТекущиеДанные.ИндексЛога);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппы(Команда)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппы(Команда)
	СвернутьДерево();
КонецПроцедуры

&НаСервере
Процедура ГруппаПриИзмененииНаСервере()
	ЗаполнитьДеревоСервер();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПриИзменении(Элемент)
	ГруппаПриИзмененииНаСервере();
	РазвернутьДерево();
КонецПроцедуры
