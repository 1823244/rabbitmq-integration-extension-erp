
#Область ПрограммноеСозданиеЗаданий

// Создает элемент справочника заданий. Обновляет все элементы с этим именем метода - только параметры.
// Используется при обновлении версии конфигурации в обработчиках обновления
Процедура СоздатьЗаданиеВСправочнике(Наименование, ИмяМетода, ТЗПараметры, Родитель = Неопределено, СледующаяПроцедура = Неопределено) Экспорт
	
	//ПоискЭлемента = НайтиЭлементЗаданийПоНаименованию(Наименование);
	
	МассивЗаданий = НайтиЭлементЗаданийПоИмениМетода(ИмяМетода);
	
	//Если ЗначениеЗаполнено(ПоискЭлемента) Тогда
	Если МассивЗаданий.Количество() = 0 Тогда
		Эл 							= Справочники.мис_УправлениеЗаданиями.СоздатьЭлемент();
		Эл.Наименование 			= Наименование;
		Эл.Активность 				= Истина;
		Эл.ПроцедураСПараметрами 	= ИмяМетода;
		Эл.ПараметрыПроцедуры 		= Новый ХранилищеЗначения(ТЗПараметры,Новый СжатиеДанных(9));
		Эл.Родитель					= Родитель;
		Эл.СледующаяПроцедура 		= СледующаяПроцедура;
		
		Эл.Записать();
	Иначе
		
		Для каждого ПоискЭлемента Из МассивЗаданий Цикл
			Эл 						= ПоискЭлемента.ПолучитьОбъект();
			//Эл.Наименование 			= Наименование;
			//Эл.Активность 				= Истина;
			//Эл.ПроцедураСПараметрами 	= ИмяМетода;
			Эл.ПараметрыПроцедуры 		= Новый ХранилищеЗначения(ТЗПараметры,Новый СжатиеДанных(9));
			//Эл.Родитель					= Родитель;
			//Эл.СледующаяПроцедура 		= СледующаяПроцедура;
			
			Эл.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьГруппуЗаданий(Наименование, СледующаяПроцедура = Неопределено) Экспорт

	ГруппаСсылка = НайтиГруппуЗаданийПоНаименованию(Наименование);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		ГруппаОбъект 					= Справочники.мис_УправлениеЗаданиями.СоздатьГруппу();
		ГруппаОбъект.Наименование 		= Наименование;
		ГруппаОбъект.Активность 		= Истина;
		ГруппаОбъект.СледующаяПроцедура = СледующаяПроцедура;
		ГруппаОбъект.Записать();
		
		ГруппаСсылка = ГруппаОбъект.Ссылка;
		ГруппаОбъект = Неопределено;
		
	КонецЕсли;
		
	Возврат ГруппаСсылка;
	
КонецФункции

// Пример использования
//ТЗПараметры 	= мис_УправлениеЗаданиямиСервер.НоваяТаблицаЗначенийПараметровЗадания();
//НовСтр = ТЗПараметры.добавить();
//НовСтр.НомерСтроки = 0;
//НовСтр.Параметр = "";
//НовСтр.Значение = "";
//НовСтр.ЭтоВыражение = Ложь;
//НовСтр.ТипЗначения = Тип("Число");
//
Функция НоваяТаблицаЗначенийПараметровЗадания() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Параметр");
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("ЭтоВыражение");
	ТЗ.Колонки.Добавить("ТипЗначения");
		
	Возврат ТЗ;
	
КонецФункции

// Добавляет параметр в таблицу параметров задания
//
// Параметры:
//	ТЗПараметры		- таблица значений - таблица параметров задания
//	НомерСтроки		- число - 
//	Имя				- строка - 
//	Значение		- произвольный - 
//	ЭтоВыражение	- булево - 
//	ТипЗначения		- тип / строка - 
//
Процедура ДобавитьПараметр(ТЗПараметры, НомерСтроки, Имя, Значение, ЭтоВыражение, ТипЗначения) Экспорт
	
	Если ТипЗнч(ТипЗначения) = Тип("Строка") Тогда
		ТипЗначения_ = Тип(ТипЗначения);
	Иначе
		ТипЗначения_ = ТипЗначения;
	КонецЕсли;
	
	НовСтр = ТЗПараметры.добавить();
	НовСтр.НомерСтроки 	= НомерСтроки;
	НовСтр.Параметр 	= Имя;
	НовСтр.Значение 	= Значение;
	НовСтр.ЭтоВыражение = ЭтоВыражение;
	НовСтр.ТипЗначения 	= ТипЗначения_;
		
КонецПроцедуры

Функция ПометитьНаУдалениеЗаданиеВСправочнике(Наименование, ИмяМетода) Экспорт
	
	ПоискЭлемента = НайтиЭлементЗаданийПоНаименованию(Наименование);
	
	Если ЗначениеЗаполнено(ПоискЭлемента) Тогда
		Об = ПоискЭлемента.ПолучитьОбъект();
		Об.ПометкаУдаления = Истина;
		Об.Записать();
	КонецЕсли;
	
КонецФункции        

Функция ПометитьНаУдалениеЗаданиеВСправочникеПоИмениМетода(ИмяМетода) Экспорт
	
	ПоискЭлемента = НайтиЭлементЗаданийПоИмениМетода(ИмяМетода);//массив
	
	Для каждого эл Из ПоискЭлемента Цикл
		Если ЗначениеЗаполнено(эл) Тогда
			эл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции


#КонецОбласти

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиГруппуЗаданийПоНаименованию(Наименование) Экспорт
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	мис_УправлениеЗаданиями.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.мис_УправлениеЗаданиями КАК мис_УправлениеЗаданиями
		|ГДЕ
		|	мис_УправлениеЗаданиями.Наименование = &Наименование
		|	И мис_УправлениеЗаданиями.ЭтоГруппа = &ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ЭтоГруппа", Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат Неопределено;
	
КонецФункции
 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЭлементЗаданийПоНаименованию(Наименование) Экспорт
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	мис_УправлениеЗаданиями.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.мис_УправлениеЗаданиями КАК мис_УправлениеЗаданиями
		|ГДЕ
		|	мис_УправлениеЗаданиями.Наименование = &Наименование
		|	И мис_УправлениеЗаданиями.ЭтоГруппа = &ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ЭтоГруппа", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат Неопределено;
	
КонецФункции

// Возвращает массив - все задания с этим именем метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЭлементЗаданийПоИмениМетода(ИмяМетода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	мис_УправлениеЗаданиями.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.мис_УправлениеЗаданиями КАК мис_УправлениеЗаданиями
		|ГДЕ
		|	выразить(мис_УправлениеЗаданиями.ПроцедураСПараметрами как строка(500)) = &ИмяМетода
		|	И мис_УправлениеЗаданиями.ЭтоГруппа = &ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	Запрос.УстановитьПараметр("ЭтоГруппа", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Массив.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

