#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = Параметры.ДокументОснование;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Документ можно вводить только на основании другого документа или договора с клиентом.';
								|en = 'You can enter the document only based on another document or a contract with a customer.'");
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьСозданияСчетовНаОплату(ДокументОснование) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании документа %1. Расчеты ведутся по расчетным документам.';
				|en = 'It is not required to enter a commercial invoice based on document %1. Settlements are made based on AR/AP documents.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДокументОснование", ДокументОснование, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	Если ДокументОснование <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			Заголовок = Заголовок + ": " + ДокументОснование;
			
		Иначе
			
			ТекстДокумент = НСтр("ru = '%ТипДокумента% (новый)';
								|en = '%ТипДокумента% (new)'");
			ТекстДокумент = СтрЗаменить(ТекстДокумент, "%ТипДокумента%", ДокументОснование.Метаданные().Синоним);
			Заголовок = Заголовок + ": " + ТекстДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ШапкаОснование = Новый Структура("
		|Партнер,
		|Контрагент,
		|Договор,
		|Организация,
		|Валюта,
		|ДокументОснование,
		|СуммаДокумента,
		|НомерДокумента,
		|БанковскийСчет,
		|Префикс,
		|Касса,
		|ФормаОплаты, 
		|КонтактноеЛицо,
		|Руководитель,
		|ГлавныйБухгалтер
		|");
		
	УстановитьВидимость();
		
	ОбновитьСервер();
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		Элементы.ТаблицаЭтаповСуммаПлатежа.Заголовок = СформироватьЗаголовокКолонкиСВалютой(Элементы.ТаблицаЭтаповСуммаПлатежа.Заголовок, Валюта);
		Элементы.ТаблицаЭтаповСуммаКОплате.Заголовок = СформироватьЗаголовокКолонкиСВалютой(Элементы.ТаблицаЭтаповСуммаКОплате.Заголовок, Валюта);
		Элементы.ТаблицаЭтаповСуммаОплаты.Заголовок  = СформироватьЗаголовокКолонкиСВалютой(Элементы.ТаблицаЭтаповСуммаОплаты.Заголовок, Валюта);
		
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	ПечатьИнвойсов = Константы.ИспользоватьМеждународныеПечатныеФормы.Получить();
	//++ Локализация
	ПечатьИнвойсов = Ложь;
	//-- Локализация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчет(Команда)
	
	СформироватьСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРаспечататьСчет(Команда)
	
	СформироватьСчет(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Выделенные в списке счетов на оплату будут аннулированы. Продолжить?';
						|en = 'Those selected in the list of commercial invoices will be canceled. Continue?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("АннулироватьЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = УстановитьПризнакАннулированСервер(Элементы.Список.ВыделенныеСтроки);
    
    Если КоличествоОбработанных > 0 Тогда
        
        Элементы.Список.Обновить();
        
        ТекстСообщения = НСтр("ru = '%КоличествоОбработанных% из %КоличествоВсего% выделенных в списке счетов на оплату аннулированы.';
								|en = '%КоличествоОбработанных% from %КоличествоВсего% selected in the list of commercial invoices are canceled.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения,"%КоличествоОбработанных%", КоличествоОбработанных);
        ТекстСообщения = СтрЗаменить(ТекстСообщения,"%КоличествоВсего%",        Элементы.Список.ВыделенныеСтроки.Количество());
        ПоказатьОповещениеПользователя(НСтр("ru = 'Счета на оплату аннулированы';
											|en = 'Commercial invoices are canceled'"),, ТекстСообщения, БиблиотекаКартинок.Информация32);
        
    Иначе
        
        ТекстСообщения = НСтр("ru = 'Не аннулирован ни один счет на оплату.';
								|en = 'No commercial invoice is canceled.'");
        ПоказатьОповещениеПользователя(НСтр("ru = 'Счета на оплату не аннулированы';
											|en = 'Commercial invoices are not canceled'"),, ТекстСообщения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтапов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.Оплачен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтапов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.Оплачен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.MediumGray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.Оплачен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповПроцентПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.ЭтоЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<залог за тару>';
																|en = '<packaging deposit>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповПроцентПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.ЭтапСверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>';
																|en = '<exceeding the order>'"));

КонецПроцедуры

#Область Прочее

&НаСервереБезКонтекста
Функция УстановитьПризнакАннулированСервер (Знач СчетаНаОплату)
	
	Возврат Документы.СчетНаОплатуКлиенту.УстановитьПризнакАннулирован(СчетаНаОплату);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если ТипЗнч(ДокументОснование) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, 
			Новый Структура("ПорядокРасчетов", "Договор.ПорядокРасчетов"));
		ОтображатьОплату = СтруктураРеквизитов.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		
	Иначе
		
		ОтображатьОплату = Истина;
		
	КонецЕсли;
	
	Элементы.ТаблицаЭтаповСуммаПлатежа.Видимость = ОтображатьОплату;
	Элементы.ТаблицаЭтаповСуммаОплаты.Видимость  = ОтображатьОплату;
	Элементы.ИтогоСуммаПлатежа.Видимость         = ОтображатьОплату;
	Элементы.ИтогоСуммаОплаты.Видимость          = ОтображатьОплату;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСервер()
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Если НачалоДня(ДокументОснование.КСП_Коллекция.КСП_ДатаПредоплаты_2) >= НачалоДня(ТекущаяДатаСеанса()) Тогда
			ТекстОшибки = НСтр("ru = 'По коллекции %1 не наступила Дата предоплаты 2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументОснование.КСП_Коллекция);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ЗаказКлиентаТовары.Ссылка КАК Документ,
			|	ЛОЖЬ КАК Выбран,
			|	ЛОЖЬ КАК Оплачена,
			|	1 КАК ИндексКартинки,
			|	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаПлатежа,
			|	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаКОплате,
			|	&ТекущаяДатаСеанса КАК ДатаПлатежа,
			|	ВЫРАЗИТЬ(СУММА(ЗаказКлиентаТовары.СуммаСНДС) / ЗаказКлиентаТовары.Ссылка.СуммаДокумента * 100 КАК ЧИСЛО(15, 2)) КАК ПроцентПлатежа
			|ПОМЕСТИТЬ втДанныеЗаказа
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &ДокументОснование
			|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказКлиентаТовары.Ссылка,
			|	ЗаказКлиентаТовары.Ссылка.СуммаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втДанныеЗаказа.Документ КАК Документ,
			|	втДанныеЗаказа.Выбран КАК Выбран,
			|	втДанныеЗаказа.Оплачена КАК Оплачена,
			|	втДанныеЗаказа.ИндексКартинки КАК ИндексКартинки,
			|	втДанныеЗаказа.СуммаПлатежа КАК СуммаПлатежа,
			|	втДанныеЗаказа.СуммаКОплате КАК СуммаКОплате,
			|	втДанныеЗаказа.ДатаПлатежа КАК ДатаПлатежа,
			|	втДанныеЗаказа.ПроцентПлатежа КАК ПроцентПлатежа
			|ИЗ
			|	втДанныеЗаказа КАК втДанныеЗаказа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
			|	ЗаказКлиента.КСП_СуммаПредоплаты КАК СуммаПредоплаты
			|ПОМЕСТИТЬ втСуммаПредоплаты
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Ссылка = &ДокументОснование
			|	И ЗаказКлиента.КСП_Коллекция.КСП_ДатаПредоплаты_2 <> ДАТАВРЕМЯ(1,1,1)
			|	И НАЧАЛОПЕРИОДА(ЗаказКлиента.КСП_Коллекция.КСП_ДатаПредоплаты_2, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(РасчетыСКлиентами.ОбъектРасчетов.Объект КАК Документ.ЗаказКлиента),
			|	ЕСТЬNULL(-СУММА(ВЫБОР
			|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА РасчетыСКлиентами.Сумма
			|			ИНАЧЕ -РасчетыСКлиентами.Сумма
			|		КОНЕЦ), 0)
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|ГДЕ
			|	РасчетыСКлиентами.ОбъектРасчетов.Объект = &ДокументОснование
			|	И НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(РасчетыСКлиентами.ОбъектРасчетов.Объект КАК Документ.ЗаказКлиента).КСП_Коллекция.КСП_ДатаПредоплаты_2, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
			|	//И НАЧАЛОПЕРИОДА(РасчетыСКлиентами.ДатаРегистратора, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКлиентами.ОбъектРасчетов.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(РасчетыСКлиентами.ОбъектРасчетов.Объект КАК Документ.ЗаказКлиента) КАК ЗаказКлиента,
			|	ЕСТЬNULL(-СУММА(ВЫБОР
			|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА РасчетыСКлиентами.Сумма
			|			ИНАЧЕ -РасчетыСКлиентами.Сумма
			|		КОНЕЦ), 0) КАК СуммаПлатежей
			|ПОМЕСТИТЬ втПлатежи
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|ГДЕ
			|	РасчетыСКлиентами.ОбъектРасчетов.Объект = &ДокументОснование
			|	И НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(РасчетыСКлиентами.ОбъектРасчетов.Объект КАК Документ.ЗаказКлиента).КСП_Коллекция.КСП_ДатаПредоплаты_2, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
			|	И НАЧАЛОПЕРИОДА(РасчетыСКлиентами.ДатаРегистратора, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКлиентами.ОбъектРасчетов.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСуммаПредоплаты.ЗаказКлиента КАК ЗаказКлиента,
			|	втСуммаПредоплаты.СуммаПредоплаты КАК СуммаПредоплаты,
			|	ВЫБОР
			|		КОГДА втСуммаПредоплаты.ЗаказКлиента.СуммаДокумента - втСуммаПредоплаты.СуммаПредоплаты - ЕСТЬNULL(втПлатежи.СуммаПлатежей, 0) >= втСуммаПредоплаты.СуммаПредоплаты
			|			ТОГДА ВЫБОР
			|				КОГДА втСуммаПредоплаты.ЗаказКлиента.СуммаДокумента - втСуммаПредоплаты.СуммаПредоплаты - ЕСТЬNULL(втПлатежи.СуммаПлатежей, 0) >= втДанныеЗаказа.СуммаПлатежа
			|					ТОГДА 0
			|				ИНАЧЕ втДанныеЗаказа.СуммаПлатежа - (втСуммаПредоплаты.ЗаказКлиента.СуммаДокумента - втСуммаПредоплаты.СуммаПредоплаты - ЕСТЬNULL(втПлатежи.СуммаПлатежей, 0))
			|			КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|			КОГДА втСуммаПредоплаты.ЗаказКлиента.СуммаДокумента - втСуммаПредоплаты.СуммаПредоплаты - ЕСТЬNULL(втПлатежи.СуммаПлатежей, 0) > 0
			|				ТОГДА втСуммаПредоплаты.СуммаПредоплаты - втДанныеЗаказа.СуммаПлатежа
			|			ИНАЧЕ втДанныеЗаказа.СуммаПлатежа
			|		КОНЕЦ
			|	КОНЕЦ КАК СуммаОстатокПредоплаты
			|ИЗ
			|	втСуммаПредоплаты КАК втСуммаПредоплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеЗаказа КАК втДанныеЗаказа
			|		ПО втСуммаПредоплаты.ЗаказКлиента = втДанныеЗаказа.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПлатежи КАК втПлатежи
			|		ПО втСуммаПредоплаты.ЗаказКлиента = втПлатежи.ЗаказКлиента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиента.Партнер КАК Партнер,
			|	ЗаказКлиента.Контрагент КАК Контрагент,
			|	ЗаказКлиента.Договор КАК Договор,
			|	ЗаказКлиента.Организация КАК Организация,
			|	ЗаказКлиента.Руководитель КАК Руководитель,
			|	ЗаказКлиента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
			|	ЗаказКлиента.Валюта КАК Валюта,
			|	ЗаказКлиента.Ссылка КАК ДокументОснование,
			|	ЗаказКлиента.Номер КАК НомерДокумента,
			|	ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
			|	ЗаказКлиента.Организация.Префикс КАК Префикс,
			|	ЗаказКлиента.Касса КАК Касса,
			|	ЗаказКлиента.КонтактноеЛицо КАК КонтактноеЛицо,
			|	ЗаказКлиента.ЭтоЗаказКакСчет КАК ЭтоЗаказКакСчет,
			|	ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
			|	ЗаказКлиента.Ссылка КАК Документ,
			|	ЗаказКлиента.Статус КАК Статус,
			|	ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
			|		ИЛИ ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) КАК ЕстьОшибкиХозяйственнаяОперация,
			|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	НЕ ЗаказКлиента.Проведен КАК ЕстьОшибкиПроведен,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказКлиента.Ссылка) = ТИП(Документ.ЗаказКлиента)
			|			ТОГДА ВЫБОР
			|					КОГДА ЗаказКлиента.ТребуетсяЗалогЗаТару
			|						ТОГДА ЗаказКлиента.СуммаДокумента + ЗаказКлиента.СуммаВозвратнойТары
			|					ИНАЧЕ ЗаказКлиента.СуммаДокумента
			|				КОНЕЦ
			|		ИНАЧЕ ЗаказКлиента.СуммаДокумента
			|	КОНЕЦ КАК СуммаДокумента
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Ссылка = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
		
		МассивРезультатов	= Запрос.ВыполнитьПакет();
		//ТаблицаДокументовЭтапы		= МассивРезультатов[0].Выгрузить();
		ТаблицаТоваров		= МассивРезультатов[1].Выгрузить();
		ВыборкаОплата		= МассивРезультатов[4].Выбрать();
		ВыборкаШапка		= МассивРезультатов[5].Выбрать();
		
		// Проверка есть ли строки на оплату
		Если ТаблицаТоваров.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'В документе %Документ% нет строк на оплату'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОснование);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		// Заполняем шапку
		Если ВыборкаШапка.Следующий() Тогда
			
			МассивДопустимыхСтатусов = Неопределено;
			ТипОснования = ТипЗнч(ДокументОснование);
			
			Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
				ВыборкаШапка.ДокументОснование,
				ВыборкаШапка.Статус,
				ВыборкаШапка.ЕстьОшибкиПроведен,
				Истина);

			ЗаполнитьЗначенияСвойств(ШапкаОснование, ВыборкаШапка);
			Валюта = ВыборкаШапка.Валюта;
			
		КонецЕсли;
		
		СуммаПредоплаты = 0;
		СуммаОстатокПредоплаты = 0;
		
		// Получаем сумму предоплаты в дальнейшем будем распределять ее по оплате
		Если ВыборкаОплата.Следующий() Тогда
			СуммаПредоплаты = ВыборкаОплата.СуммаПредоплаты;
			СуммаОстатокПредоплаты = ВыборкаОплата.СуммаОстатокПредоплаты;
		КонецЕсли;
		
		ТаблицаТоваров.Свернуть("Выбран,Оплачена,ИндексКартинки,ДатаПлатежа,ПроцентПлатежа", "СуммаПлатежа,СуммаКОплате");
		
		ТаблицаЭтапов.Очистить();
		
		// Заполняем таблицу оплаты
		Для Каждого Строка Из ТаблицаТоваров Цикл
			
			Если Строка.СуммаКОплате = 0 И Строка.СуммаПлатежа = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			// Снижаем цену за предоплату по правилу зачета аванса из соглашения с клиентом
			ПравилоЗачетаАванса = ДокументОснование.Соглашение.КСП_ПравилоЗачетаАванса;
			Если ПравилоЗачетаАванса = Перечисления.КСП_ПравилаЗачетаАвансаПоЗаказуКлиента.ПропорциональноОтгрузке Тогда
				ПроцентОплаты = НоваяСтрока.СуммаКОплате / ДокументОснование.СуммаДокумента * 100;
				НоваяСтрока.КСП_СуммаЗачетаПредоплаты = ПроцентОплаты * СуммаПредоплаты / 100;
				//НоваяСтрока.СуммаКОплате = НоваяСтрока.СуммаКОплате - ПроцентОплаты * СуммаПредоплаты / 100;
				//НоваяСтрока.СуммаКОплате = ?(НоваяСтрока.СуммаКОплате >= 0, НоваяСтрока.СуммаКОплате, 0);
				//НоваяСтрока.СуммаПлатежа = НоваяСтрока.СуммаПлатежа - ПроцентОплаты * СуммаПредоплаты / 100;
				//НоваяСтрока.СуммаПлатежа = ?(НоваяСтрока.СуммаПлатежа >= 0, НоваяСтрока.СуммаПлатежа, 0);
			ИначеЕсли ПравилоЗачетаАванса = Перечисления.КСП_ПравилаЗачетаАвансаПоЗаказуКлиента.ВПоследнююОчередь Тогда
				НоваяСтрока.КСП_СуммаЗачетаПредоплаты = СуммаОстатокПредоплаты;
				//НоваяСтрока.СуммаКОплате = НоваяСтрока.СуммаКОплате - СуммаОстатокПредоплаты;
				//НоваяСтрока.СуммаКОплате = ?(НоваяСтрока.СуммаКОплате >= 0, НоваяСтрока.СуммаКОплате, 0);
				//НоваяСтрока.СуммаПлатежа = НоваяСтрока.СуммаПлатежа - СуммаОстатокПредоплаты;
				//НоваяСтрока.СуммаПлатежа = ?(НоваяСтрока.СуммаПлатежа >= 0, НоваяСтрока.СуммаПлатежа, 0);
			КонецЕсли;
			
		КонецЦикла;
		
		//Если ТаблицаЭтапов.Итог("СуммаПлатежа") = 0 Тогда
		//	
		//	ТекстОшибки = НСтр("ru = 'Не требуется вводить счета на оплату. Сумма платежа по документу %Документ% равна 0.'");
		//	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОснование);
		//	ВызватьИсключение ТекстОшибки;
		//	
		//КонецЕсли;
		
		ИтогоСуммаКОплате    = ТаблицаЭтапов.Итог("СуммаКОплате");
		ИтогоСуммаОплаты     = ТаблицаЭтапов.Итог("СуммаОплаты");
		ИтогоСуммаПлатежа    = ТаблицаЭтапов.Итог("СуммаПлатежа");
		ИтогоПроцентПлатежа  = ТаблицаЭтапов.Итог("ПроцентПлатежа");
		
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		
		ИтогоОтмеченоКОплате = 0;
		
		Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл
			
			Если Не ТекущийЭтап.Оплачен Тогда
				Если ТекущийЭтап.ДатаПлатежа <= ТекущаяДата Тогда
					ТекущийЭтап.Выбран = Истина;
					ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
				КонецЕсли;
				
				Если ТекущийЭтап.ДатаПлатежа > ТекущаяДата Тогда
					ТекущийЭтап.Выбран = Истина;
					ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСчетНаОплатуСервер()
	
	СчетНаОплатуКлиенту = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ШапкаОснование);
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
		
		СуммаДокумента   = 0;
		КоличествоЭтапов = 0;
		НомерЭтапа       = 1;
		ПроцентПлатежа   = 0;
		СуммаДокументаБезЗалога = 0;
		СуммаЗачетаПредоплаты	= 0;
		
		Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл
			
			Если Не ТекущийЭтап.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаДокумента = СуммаДокумента + ТекущийЭтап.СуммаПлатежа - ТекущийЭтап.СуммаОплаты;
			СуммаЗачетаПредоплаты = СуммаЗачетаПредоплаты + ТекущийЭтап.КСП_СуммаЗачетаПредоплаты;
			Если Не ТекущийЭтап.ЭтоЗалогЗаТару Тогда
				СуммаДокументаБезЗалога = СуммаДокументаБезЗалога + ТекущийЭтап.СуммаПлатежа - ТекущийЭтап.СуммаОплаты;
			КонецЕсли;
			КоличествоЭтапов = КоличествоЭтапов + 1;
			
		КонецЦикла;
		
		ДокументОбъект.СуммаДокумента = СуммаДокумента;
		ДокументОбъект.КСП_СуммаЗачетаПредоплаты = СуммаЗачетаПредоплаты;
		ДокументОбъект.КСП_ПечататьРасшифровкуПоТоварамСПредоплатой = Истина;
		
		Если ШапкаОснование.СуммаДокумента <> СуммаДокумента Тогда
			ДокументОбъект.ЧастичнаяОплата = Истина;
		КонецЕсли;
		
		Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл
			
			Если Не ТекущийЭтап.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭтап = ДокументОбъект.ЭтапыГрафикаОплаты.Добавить();
			НовыйЭтап.ДатаПлатежа    = ТекущийЭтап.ДатаПлатежа;
			НовыйЭтап.СуммаПлатежа   = ТекущийЭтап.СуммаКОплате;
			НовыйЭтап.ЭтоЗалогЗаТару = ТекущийЭтап.ЭтоЗалогЗаТару;
			
			Если СуммаДокументаБезЗалога > 0 Тогда
				Если НомерЭтапа = КоличествоЭтапов Тогда
					НовыйЭтап.ПроцентПлатежа = 100 - ПроцентПлатежа;
				ИначеЕсли Не ТекущийЭтап.ЭтоЗалогЗаТару Тогда
					НовыйЭтап.ПроцентПлатежа = НовыйЭтап.СуммаПлатежа * 100 / СуммаДокументаБезЗалога;
					ПроцентПлатежа = ПроцентПлатежа + НовыйЭтап.ПроцентПлатежа;
				КонецЕсли;
			КонецЕсли;
			
			НомерЭтапа = НомерЭтапа + 1;
			
		КонецЦикла;
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    		= ДокументОбъект.Организация;
		СтруктураПараметров.БанковскийСчет		= ДокументОбъект.БанковскийСчет;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДокументОбъект.Организация;
		СтруктураПараметров.ФормаОплаты	= ДокументОбъект.ФормаОплаты;
		СтруктураПараметров.Касса		= ДокументОбъект.Касса;
		Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
		ДокументОбъект.НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ШапкаОснование.НомерДокумента,
			ШапкаОснование.ДокументОснование);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СчетНаОплатуКлиенту = ДокументОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
							|en = 'Failed to save %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат СчетНаОплатуКлиенту;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьЗаголовокКолонкиСВалютой(ЗаголовокКолонки, Валюта)
	
	 Возврат ЗаголовокКолонки + " (" + Валюта + ")";
	
КонецФункции

&НаКлиенте
Процедура СформироватьСчет(ВыводитьСчетНаПечать = Ложь)
	
	ЕстьВыбранные = Ложь;
	
	Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл
		
		Если ТекущийЭтап.Выбран Тогда
			ЕстьВыбранные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьВыбранные Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Не выбраны этапы оплаты';
									|en = 'Payment milestones are not selected'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СчетНаОплатуКлиенту =  СоздатьСчетНаОплатуСервер();
	
	Если СчетНаОплатуКлиенту <> Неопределено Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:';
											|en = 'Created:'"),
		                               ПолучитьНавигационнуюСсылку(СчетНаОплатуКлиенту),
		                               СчетНаОплатуКлиенту,
		                               БиблиотекаКартинок.Информация32);
	
		ОповеститьОбИзменении(СчетНаОплатуКлиенту);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСчетаНаОплату;
		Элементы.Список.ТекущаяСтрока = СчетНаОплатуКлиенту;
		
		Если ВыводитьСчетНаПечать Тогда
			СформироватьПечатнуюФорму(СчетНаОплатуКлиенту);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФорму(СчетНаОплатуКлиенту)

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СчетНаОплатуКлиенту);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ЭтотОбъект);
	
	УправлениеПечатьюКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПроведенностьДокументовЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьСчетовНаОплату",
		?(ПечатьИнвойсов, "ProformaInvoice", "СчетНаОплату"),
		МассивДокументов,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповВыбранПриИзменении(Элемент)
	
	ТекущийЭтап = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	
	Если ТекущийЭтап <> Неопределено Тогда
		
		РедактируемаяСтрока = ТаблицаЭтапов.НайтиПоИдентификатору(ТекущийЭтап.ПолучитьИдентификатор());
		
		Если Не РедактируемаяСтрока.Выбран Тогда
			
			СброситьФлаг = Ложь;
			
			Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
				
				Если РедактируемаяСтрока = ТекСтрока Тогда
					СброситьФлаг = Истина;
				КонецЕсли;
				
				Если СброситьФлаг И ТекСтрока.Выбран Тогда
					ТекСтрока.Выбран = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			УстановитьФлаг = Истина;
			
			Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
				
				Если РедактируемаяСтрока = ТекСтрока Тогда
					УстановитьФлаг = Ложь;
				КонецЕсли;
				
				Если УстановитьФлаг И Не ТекСтрока.Выбран И Не ТекСтрока.Оплачен Тогда
					ТекСтрока.Выбран = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИтогоОтмеченоКОплате = 0;
	
	Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл
		
		Если ТекущийЭтап.Выбран Тогда
			ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьСозданияСчетовНаОплату(ДокументОснование)
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ПорядокРасчетов");
	Возврат ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаРасчетов()
	
	ТекстЗапросаРасчетов = "";
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ТекстЗапросаРасчетов = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(&ШаблонПоляОплачено), 0) КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ОбъектРасчетов.Объект = &ДокументОснование
		|	И РасчетыПоСрокам.Активность 
		|;";
		ТекстЗапросаРасчетов = СтрЗаменить(ТекстЗапросаРасчетов, 
		"&ШаблонПоляОплачено", 
		СтрШаблон("%1 + %2", 
		ВзаиморасчетыСервер.ШаблонПоляОплаченоКлиентом(),
		ВзаиморасчетыСервер.ШаблонПоляЗачтеноКлиенту()));
		ТекстЗапросаРасчетов = СтрЗаменить(ТекстЗапросаРасчетов, "&ДанныеОтчета", "4");
	Иначе
		ТекстЗапросаРасчетов = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР 
		|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И (НЕ РасчетыСКлиентами.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
		|				                                                 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
		|				                                                 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
		|				                                                 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВРозницу))
		|					ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
		|				ТОГДА РасчетыСКлиентами.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ +
		|		ВЫБОР
		|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
		|				ТОГДА ВЫБОР
		|						КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА РасчетыСКлиентами.Оплачивается
		|						ИНАЧЕ - РасчетыСКлиентами.Оплачивается
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ), 0) КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект = &ДокументОснование
		|	И РасчетыСКлиентами.Активность 
		|;";
	КонецЕсли;
	
	Возврат ТекстЗапросаРасчетов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗаказКлиента()
	
	ТекстЗапроса = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка                           КАК Документ,
	|	2                                                   КАК Порядок,
	|	ЛОЖЬ                                                КАК Выбран,
	|	ЛОЖЬ                                                КАК Оплачена,
	|	1                                                   КАК ИндексКартинки,
	|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару                КАК СуммаПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару                КАК СуммаКОплате,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа                      КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару              КАК ПроцентПлатежа,
	|	ИСТИНА                                              КАК ЭтоЗалогЗаТару,
	|	ЛОЖЬ                                                КАК ЭтапСверхЗаказа
	|ИЗ
	|	#ДокументЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка  = &ДокументОснование
	|	И ЭтапыГрафикаОплаты.Ссылка.ТребуетсяЗалогЗаТару
	|	И ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Регистратор КАК Документ,
	|	3 КАК Порядок,
	|	ЛОЖЬ КАК Выбран,
	|	ЛОЖЬ КАК Оплачена,
	|	1 КАК ИндексКартинки,
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА РасчетыСКлиентами.КОплате
	|						ИНАЧЕ -РасчетыСКлиентами.КОплате
	|				КОНЕЦ) КАК СуммаПлатежа,
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА РасчетыСКлиентами.КОплате
	|						ИНАЧЕ -РасчетыСКлиентами.КОплате
	|				КОНЕЦ) КАК СуммаКОплате,
	|	РасчетыСКлиентами.Период КАК ДатаПлатежа,
	|	0 КАК ПроцентПлатежа,
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару,
	|	ИСТИНА КАК ЭтапСверхЗаказа
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ОбъектРасчетов.Объект = &ДокументОснование
	|	И РасчетыСКлиентами.Регистратор <> РасчетыСКлиентами.ОбъектРасчетов.Объект
	|	И РасчетыСКлиентами.КОплате > 0 
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|	И РасчетыСКлиентами.Активность
	|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор,
	|	РасчетыСКлиентами.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА РасчетыСКлиентами.КОплате
	|						ИНАЧЕ -РасчетыСКлиентами.КОплате
	|			КОНЕЦ) <> 0 
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаУменьшенияПланаОплаты()
	
	Текст = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.Регистратор КАК Документ,
		|	ЕСТЬNULL(СУММА(РасчетыСКлиентами.КОплате), 0) КАК СуммаУменьшения
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект = &ДокументОснование
		|	И РасчетыСКлиентами.Регистратор <> РасчетыСКлиентами.ОбъектРасчетов.Объект
		|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСКлиентами.КОплате > 0 
		|	И РасчетыСКлиентами.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
		|						                         ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
		|						                         ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВРозницу))
		|	И РасчетыСКлиентами.Активность
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.Регистратор
		|;
		|";
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстУпорядочить()
	
	Текст = "УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа,
	|	Порядок
	|;";
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолеЕстьОшибкиХозяйственнаяОперация()
	
	ПолеЕстьОшибки = "
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ
	|";
	
	Возврат ПолеЕстьОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
