
&НаКлиенте
Процедура ОбновитьДерево(ОбновитьПринудительно = Ложь)
	
	Если ОбновитьПринудительно ИЛИ Модифицированность Тогда	
		ОбновитьДеревоНаСервере();	
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьДеревоНаСервере()
	
	#Область ЕслиКлиентаУстроитУдалить
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	тзПлан.Клиент КАК Клиент,
	//	|	тзПлан.ПланПродаж КАК ПланПродаж
	//	|ПОМЕСТИТЬ втПлан
	//	|ИЗ
	//	|	&тзПлан КАК тзПлан
	//	|;
	//	|    
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	Партнеры.Родитель КАК Родитель,
	//	|	Партнеры.Ссылка КАК Клиент,
	//	|	втПлан.ПланПродаж КАК ПланПродаж
	//	|ИЗ
	//	|	Справочник.Партнеры КАК Партнеры
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлан КАК втПлан
	//	|		ПО Партнеры.Ссылка = втПлан.Клиент
	//	|ГДЕ
	//	|	Партнеры.Ссылка В ИЕРАРХИИ (&Партнеры)";
	//
	//тзПлан = Объект.План.Выгрузить();
	//Запрос.УстановитьПараметр("тзПлан", тзПлан);
	//Запрос.УстановитьПараметр("Партнеры", тзПлан.ВыгрузитьКолонку("Клиент"));
	//
	//ВыборкаИерархии = Запрос.Выполнить().Выбрать();
	//
	//ДеревоЗначений = Новый ДеревоЗначений;
	//ДеревоЗначений.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	//ДеревоЗначений.Колонки.Добавить("ПланПродаж", Новый ОписаниеТипов(Новый КвалификаторыЧисла(10, 2)));
	//
	//Пока ВыборкаИерархии.Следующий() Цикл
	//	
	//	НайденаяСтрока = ДеревоЗначений.Строки.Найти(ВыборкаИерархии.Родитель, "Клиент", Истина);
	//	Если НайденаяСтрока <> Неопределено Тогда
	//		НоваяСтрока = НайденаяСтрока.Строки.Добавить();
	//	Иначе
	//		НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	//	КонецЕсли;
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИерархии);
	//
	//КонецЦикла;
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тзПлан.Клиент КАК Клиент,
		|	тзПлан.ПланПродаж КАК ПланПродаж
		|ПОМЕСТИТЬ втПлан
		|ИЗ
		|	&тзПлан КАК тзПлан
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Клиент,
		|	втПлан.ПланПродаж КАК ПланПродаж
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлан КАК втПлан
		|		ПО (Партнеры.Ссылка = втПлан.Клиент)
		|ГДЕ
		|	Партнеры.Ссылка В (&Партнеры)
		|ИТОГИ
		|	СУММА(ПланПродаж)
		|ПО
		|	Клиент ИЕРАРХИЯ";
	
	тзПлан = Объект.План.Выгрузить();
	Запрос.УстановитьПараметр("тзПлан", тзПлан);
	Запрос.УстановитьПараметр("Партнеры", тзПлан.ВыгрузитьКолонку("Клиент"));
	
	ДеревоЗначений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "Дерево");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДерево(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДерево(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Развенуть(Команда)

	РазвенутьСвернутьДерево();

КонецПроцедуры

&НаКлиенте
Процедура РазвенутьСвернутьДерево(Развенуть = Истина)
	
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ид = ЭлементДерева.ПолучитьИдентификатор();
		Если Развенуть Тогда
			Элементы.Дерево.Развернуть(ид, Истина);			
		иначе
			Элементы.Дерево.Свернуть(ид);						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	РазвенутьСвернутьДерево(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Клиент) Тогда
		СообщениеПользователю = НСтр("ru = 'Пустое значение не допускается.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПользователю);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПланПередОкончаниемРедактированияНаСервере(Элемент.ТекущиеДанные.Клиент, Отказ);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПланПередОкончаниемРедактированияНаСервере(Знач Партнер, Отказ)
	
	// Проверяем выполняет ли элемент условия:
		// ИЛИ Партнер второго уровня
		// ИЛИ У партнера нет подчиненных элементов И Он партнер первого уровня
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Партнеры_ПервыйУровень.Ссылка КАК Партнер_ПервыйУровень
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры_ПервыйУровень
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры_ВторойУровень
		|		ПО (Партнеры_ПервыйУровень.Ссылка = Партнеры_ВторойУровень.Родитель)
		|ГДЕ
		|	Партнеры_ПервыйУровень.Ссылка = &Партнер
		|	И Партнеры_ПервыйУровень.Родитель = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|	И Партнеры_ВторойУровень.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Партнеры_ПервыйУровень.Ссылка КАК Партнер_ПервыйУровень
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры_ПервыйУровень
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры_ВторойУровень
		|		ПО (Партнеры_ПервыйУровень.Ссылка = Партнеры_ВторойУровень.Родитель)
		|ГДЕ
		|	Партнеры_ВторойУровень.Ссылка = &Партнер
		|	И Партнеры_ПервыйУровень.Родитель = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("Партнер", Партнер);
		
	РезультатПроверка = Запрос.Выполнить();
	
	Если РезультатПроверка.Пустой() Тогда
		СообщениеПользователю = СтрШаблон(НСтр("ru = 'Партнер %1 не может быть использован.'"), Партнер);
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
