
#Область ПолучениеНастроек

// Получение настроек по подсистеме Фулфилмент. 
// Пропишим в коде фиксированные настройки , потом в эту функцию 
// добавим вызов к регистру настроек по подсистемам , но его надо еще сделать 
// для ускорения прописываем настройки в коде . 
//
// Возвращаемое значение:
//   Структура   - Нимиенование настройки и ее значение. Получим все настройки подсистемы Фулфилмент. 
//
Функция ПолучитьНастройкиФулфилментДляТекущейБазы() Экспорт 
	Настройки = новый Структура;
	                 
	СтрокаСоединения = ВРег(СтрокаСоединенияИнформационнойБазы());
	
	ЭтоРабочаяБаза = (Найти(СтрокаСоединения,"654ыфва654фыва654фыва654фыва654")>0);//todo Указать правильное значение
	
	Если ЭтоРабочаяБаза Тогда
		// доступ с серверу FF
		Настройки = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.ПолучитьНастройкиГруппы("Фулфилмент");
	иначе
		// тестовая база
		Настройки = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.ПолучитьНастройкиГруппы("ФулфилментТестовыйСервер");
	КонецЕсли;

	Настройки.Вставить("ЭтоРабочаяБаза",ЭтоРабочаяБаза);

	Возврат Настройки;
КонецФункции // ()

#КонецОбласти


#Область ВыгрузкаДанных        



#Область Выгрузка_Номенклатура


// Выгрузка номенклатуры по составу документа "Продажа"
// каталог выгрузки бирется из настроек
//
// Параметры:
//  Продажа  			- ДокументСсылка.Продажа - Из документа будет братся номенклатура для выгрузки
//  ВыводитьСообщения	- Булево - Выводить ход выгрузки в консоль сообщений, актуально для ручной выгрузки из интерфейса.
// Возвращаемое значение:
//   Булево   - успех выгрузки , в случае ошибки ложь.  
//
Функция ВыгрузитьНоменклатуру( Продажа, ВыводитьСообщения = Ложь ) Экспорт
		
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_ВыгрузкаНоменклатуры.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Выгрузка номенклатуры."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));
	
	
	
	ПутьКВременномуКаталогу = КаталогВременныхФайлов();
	
	ИмяФайла 		= "FE714_"+Формат(ДатаФормированияФайла, "ДФ=yyyyMMdd_HHmmss_")+Строка(новый УникальныйИдентификатор);
	
	ИмяФайлаАрхива 		= ИмяФайла + ".zip";
	ИмяФайлаОсновное 	= ИмяФайла + ".xml";
	
	
	ПутьКФайлуВыгрузки 	= ПутьКВременномуКаталогу+ИмяФайлаОсновное;
	ПутьКФайлуАрхива 	= ПутьКВременномуКаталогу+ИмяФайлаАрхива;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Имя файла выгрузки : "+ИмяФайлаАрхива);

	
	Обрк = Обработки.ксп_ФорматFE714.Создать();
	ФайлСформирован = Обрк.ФормированиеФайлаXMLПоФормату_FE714(Продажа, ПутьКФайлуВыгрузки, Лог);
	
	Если не ФайлСформирован Тогда
		Возврат ложь;	
	КонецЕсли;
	
	// сжимаем файл
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Сжимаем выгрузку ZIP'ом : "+ПутьКФайлуАрхива);

	ЗаписьZIP = Новый ЗаписьZipФайла(ПутьКФайлуАрхива);
	ЗаписьZIP.Добавить(ПутьКФайлуВыгрузки);
	ЗаписьZIP.Записать();
	ЗаписьZIP = Неопределено;
	
	// сразу удаляем временный файл, далее работаем с файлом архива. 
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Удаляем файл выгрузки : "+ПутьКФайлуВыгрузки+" (так как есть архив)");
	Попытка
		УдалитьФайлы(ПутьКФайлуВыгрузки);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла выгрузки номенклатуры. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	
	// копирование в каталог архива
	ПутьАрхивуВыгружаемыхФайлов = НастройкиФФ.КаталогЛогированияОбмена+"ВыгружаемыеФайлы\"+ИмяФайлаАрхива;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Помещаем выгрузку в каталог архива "+ПутьАрхивуВыгружаемыхФайлов);

	Попытка
	    КопироватьФайл(ПутьКФайлуАрхива,ПутьАрхивуВыгружаемыхФайлов);
	Исключение
		ОписаниеОшибки = СтрШаблон("Ошибка копирования файла выгрузки номенклатуры (%1). Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ОписаниеОшибки , "ERR");
		Возврат ложь;	
	КонецПопытки;
	
	// передача файла на сервер PSF
	КаталогНаСервере = НастройкиФФ.ВнешнийКаталогВыгрузки; //"/incoming/pending/"; // каталог для обработки сервером PSF
		
	Если не ВыгрузкаФайлаНаСерверPSF(ПутьКФайлуАрхива, КаталогНаСервере, Лог ) Тогда
		Возврат Ложь;
	КонецЕсли;
	

	// регистрируем файл как выгруженный и отдельно будем анализировать результат обрботки сервером PSF
	МенЗап = РегистрыСведений.ВыгрзкаДанныхВФулфилмент.СоздатьМенеджерЗаписи();
	МенЗап.ИмяФайла 			= ИмяФайлаАрхива;
	МенЗап.ДокументОснование 	= Продажа;
	МенЗап.ДатаВыгрузки 		= ТекущаяДата();
	
	Попытка
		МенЗап.Записать(Истина);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(	
			Лог,
			СтрШаблон(	"Ошибка записи регистрации в регистр ""ВыгрзкаДанныхВФулфилмент"" о выгрузке файла %1
						|на сервер PSF. Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки()),
			"ERR");
		Возврат ложь;
	КонецПопытки;
	
	
	Попытка
		УдалитьФайлы(ПутьКФайлуАрхива);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла архива выгрузки номенклатуры. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

#КонецОбласти



#Область Выгрузка_АнонсПоставки


// Выгрузка номенклатуры по составу документа "Продажа"
// каталог выгрузки бирется из настроек
//
// Параметры:
//  Продажа  			- ДокументСсылка.Продажа - Из документа будет братся номенклатура для выгрузки
//  ВыводитьСообщения	- Булево - Выводить ход выгрузки в консоль сообщений, актуально для ручной выгрузки из интерфейса.
// Возвращаемое значение:
//   Булево   - успех выгрузки , в случае ошибки ложь.  
//
Функция ВыгрузитьАнонсПоставки( СсылкаОрдерНаПродажу, ВыводитьСообщения = Ложь ) Экспорт
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_ВыгрузкаАнонсовПоставки.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Выгрузка анонса поставки."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));
	
	ПутьКФайлуВыгрузки = "";
	//Попытка
		ПутьКФайлуВыгрузки = ВыгрузитьАнонсПоставки_ПодготовитьФайл( СсылкаОрдерНаПродажу, лог, Истина);
	//Исключение
	//    Сообщить(НСтр("ru = Не удалось подготовить файл Анонса поставки. Выгрузка прервана! Ошибка: '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	//	Возврат Ложь;
	//КонецПопытки;
	
	//Попытка
		ВыгрузитьАнонсПоставки_ОтправитьФайл( ПутьКФайлуВыгрузки, СсылкаОрдерНаПродажу, Лог, Истина );
	//Исключение
	//    Сообщить(НСтр("ru = Не удалось отправить файл Анонса поставки по FTP. Ошибка: '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	//	Возврат Ложь;
	//КонецПопытки;
	
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Завершение: Выгрузка анонса поставки."
		+?(ВыводитьСообщения," [Вывод сообщений в консоль]","") + ", текущее время "+ Строка(ТекущаяДатаСеанса()));
	
	
	Возврат Истина;
	
КонецФункции

// Выгрузка номенклатуры по составу документа "Продажа"
// каталог выгрузки бирется из настроек
//
// Параметры:
//  Продажа  			- ДокументСсылка.Продажа - Из документа будет братся номенклатура для выгрузки
//  ВыводитьСообщения	- Булево - Выводить ход выгрузки в консоль сообщений, актуально для ручной выгрузки из интерфейса.
// Возвращаемое значение:
//   Булево   - успех выгрузки , в случае ошибки ложь.  
//
Функция ВыгрузитьАнонсПоставки_ПодготовитьФайл( СсылкаОрдерНаПродажу, лог, ВыводитьСообщения = Ложь ) Экспорт

	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// формировние имени файла 
	ПутьКВременномуКаталогу = КаталогВременныхФайлов();
	
	UUIDФайла				= Строка(новый УникальныйИдентификатор);	
	
	ИмяФайла = "FE720_"+Формат(ДатаФормированияФайла, "ДФ=yyyyMMdd_HHmmss")+"_"+UUIDФайла;

	ИмяФайлаОсновное 	= ИмяФайла + ".xml";
	
	ПутьКФайлуВыгрузки 	= ПутьКВременномуКаталогу+ИмяФайлаОсновное;

	Обрк = Обработки.ксп_ФорматFE720.Создать();
	ФайлСформирован = Обрк.ФормированиеФайлаXMLПоФормату_FE720(СсылкаОрдерНаПродажу, ПутьКФайлуВыгрузки, UUIDФайла, ДатаФормированияФайла,  Лог);

	Если НЕ ФайлСформирован Тогда     
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка формирования файла выгрузки анонса поставки", "ERR");
		Возврат "";	
	КонецЕсли;
	
	Возврат ПутьКФайлуВыгрузки;
	
КонецФункции

// Выгрузка номенклатуры по составу документа "Продажа"
// каталог выгрузки бирется из настроек
//
// Параметры:
//  ПутьКФайлуВыгрузки  	- строка - полный путь к файлу
//	СсылкаОрдерНаПродажу	- документСсылка.ЗаказНаПеремещение - 
//  ВыводитьСообщения		- Булево - Выводить ход выгрузки в консоль сообщений, актуально для ручной выгрузки из интерфейса.
// Возвращаемое значение:
//   Булево   - успех выгрузки , в случае ошибки ложь.  
//
Функция ВыгрузитьАнонсПоставки_ОтправитьФайл( ПутьКФайлуВыгрузки, СсылкаОрдерНаПродажу, Лог, ВыводитьСообщения = Ложь ) Экспорт

	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	
	// формировние имени файла 
	
	UUIDФайла				= Строка(новый УникальныйИдентификатор);	
	
	ИмяФайла = "FE720_"+Формат(ДатаФормированияФайла, "ДФ=yyyyMMdd_HHmmss")+"_"+UUIDФайла;

	ИмяФайлаАрхива 		= ИмяФайла + ".zip";
	
	ПутьКВременномуКаталогу = КаталогВременныхФайлов();
	
	ПутьКФайлуАрхива 	= ПутьКВременномуКаталогу+ИмяФайлаАрхива;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Имя файла выгрузки : "+ИмяФайлаАрхива);
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Сжимаем выгрузку ZIP'ом : "+ПутьКФайлуАрхива);

	ЗаписьZIP = Новый ЗаписьZipФайла(ПутьКФайлуАрхива);
	ЗаписьZIP.Добавить(ПутьКФайлуВыгрузки);
	ЗаписьZIP.Записать();
	ЗаписьZIP = Неопределено;

	
	// сразу удаляем временный файл, далее работаем с файлом архива. 
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Удаляем файл выгрузки : "+ПутьКФайлуВыгрузки+" (так как есть архив)");
	Попытка
		УдалитьФайлы(ПутьКФайлуВыгрузки);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отправка будет продолжена. Ошибка удаления файла выгрузки анонса поставки. Причина: "+ОписаниеОшибки(), "ERR");
		// ЕНС. Не будем прерывать выгрузку из-за ошибки удаления файла
		//Возврат ложь;
	КонецПопытки;

	
	// копирование в каталог архива
	ПутьАрхивуВыгружаемыхФайлов = НастройкиФФ.КаталогЛогированияОбмена+"ВыгружаемыеФайлы\"+ИмяФайлаАрхива;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Помещаем выгрузку в каталог архива "+ПутьАрхивуВыгружаемыхФайлов);

	Попытка
	    КопироватьФайл(ПутьКФайлуАрхива,ПутьАрхивуВыгружаемыхФайлов);
	Исключение
		ОписаниеОшибки = СтрШаблон("Ошибка копирования файла анонса поставки (%1). Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ОписаниеОшибки , "ERR");
		Возврат ложь;	
	КонецПопытки;
	
	// передача файла на сервер PSF
	КаталогНаСервере = НастройкиФФ.ВнешнийКаталогВыгрузки; //"/incoming/pending/"; // каталог для обработки сервером PSF
		
	Если не ВыгрузкаФайлаНаСерверPSF(ПутьКФайлуАрхива, КаталогНаСервере, Лог ) Тогда
		Возврат Ложь;
	КонецЕсли;
	

	// регистрируем файл как выгруженный и отдельно будем анализировать результат обрботки сервером PSF
	МенЗап = РегистрыСведений.ВыгрзкаДанныхВФулфилмент.СоздатьМенеджерЗаписи();
	МенЗап.ИмяФайла 			= ИмяФайлаАрхива;
	МенЗап.ДокументОснование 	= СсылкаОрдерНаПродажу;
	МенЗап.ДатаВыгрузки 		= ТекущаяДата();
	
	Попытка
		МенЗап.Записать(Истина);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(	
			Лог,
			СтрШаблон(	"Ошибка записи регистрации в регистр ""ВыгрзкаДанныхВФулфилмент"" о выгрузке файла %1
						|на сервер PSF. Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки()),
			"ERR");
		Возврат ложь;
	КонецПопытки;
	
	
	Попытка
		УдалитьФайлы(ПутьКФайлуАрхива);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла архива выгрузки анонса поставки. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции


#КонецОбласти 





#КонецОбласти


#Область ЗагрузкаДанных

// Загрузка остатков склада фулфилмент
// Параметры:
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения запроса по статусам .
//
Функция ЗагрузкаОстатков(ВыводитьСообщения = Ложь) Экспорт
	
	МаскаФайлов = "FE708_";
	РежимЗагрузки = "ЗагрузкаОстатков";
	Возврат ЗагрузкаДанныхИзФайлов(РежимЗагрузки, МаскаФайлов, ВыводитьСообщения);	
	
КонецФункции	


// Загрузка данных о выводе/возврате в оборот кодов маркировки
// Параметры:
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения запроса по статусам .
//
Функция ЗагрузкаДанныхКМ(ВыводитьСообщения = Ложь) Экспорт
	
	МаскаФайлов = "FE770_";
	РежимЗагрузки = "ЗагрузкаДанныхКМ";
	Возврат ЗагрузкаДанныхИзФайлов(РежимЗагрузки, МаскаФайлов, ВыводитьСообщения);	
	
КонецФункции	


// Загрузка данных из файлов фулфилмента
// Параметры:
// 		РежимЗагрузки - Строка - представление режима загрузки, например, "ЗагрузкаОстатков".	
// 		МаскаФайлов - Строка - маска файлов для загрузки данных, например, "FE708_".	
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения загрузки.
//
Функция ЗагрузкаДанныхИзФайлов(РежимЗагрузки, МаскаФайлов, ВыводитьСообщения) Экспорт
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	// отдельно удаляем файлы что бы не забивать временный каталог
	МассФайловДляУдаления = Новый Массив;
	
	// массив для перемещения в папку ошибки /errors
	МассивОшибочныхФайлов = новый Массив;
	
	ТекущийКаталогВременныхФайлов = КаталогВременныхФайлов();
	ТекущийКаталогВременныхФайлов = 
		?(Прав(ТекущийКаталогВременныхФайлов,1)="\",ТекущийКаталогВременныхФайлов,ТекущийКаталогВременныхФайлов+"\");
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_" + РежимЗагрузки + ".txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "" + РежимЗагрузки + "."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));

	
	// подключение к фулфилмент
	session = УстановитьПодключениеКСерверуPSF(Лог);
	Если session = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогЗагрузки 		= 	НастройкиФФ.ВнешнийКаталогЗагрузки; 					//"/outgoing/pending/";
	КаталогУспешнойЗагрузки = 	НастройкиФФ.ВнешнийКаталогУспешнойОбработкиЗагрузки; 	//"/outgoing/processed/1s/";
	КаталогОшибочныхФайлов 	= 	НастройкиФФ.ВнешнийКаталогОшибочнойОбработкиЗагрузки; 	//"/outgoing/errors/1s/";
	
	//Поликарпов А.А. 16.06.23 обр.0000051886
	Если МаскаФайлов = "FE708_" Тогда
		КаталогЗагрузки 	= 	НастройкиФФ.ВнешнийКаталогЗагрузкиRetCRM;
	КонецЕсли;
	
	СписокФайлов = ПолучитьСписокФайловНаСервереPSF(КаталогЗагрузки,, Лог, session);    //"/outgoing/pending/1s/";
	// неудача при получении списка файлов
	Если СписокФайлов = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	// сверяем со списком уже загруженных файлов
	ТабФайлов = новый ТаблицаЗначений;
	ТабФайлов.Колонки.Добавить("ИмяФайла",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная)));
	Для каждого ЗагруженныйФайл Из СписокФайлов Цикл
		Если Найти(ЗагруженныйФайл, МаскаФайлов) <> 0 Тогда
			ТабФайлов.Добавить().ИмяФайла = ЗагруженныйФайл;
		КонецЕсли;
	КонецЦикла;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Найдено файлов с маской %1 [%2 шт.]",МаскаФайлов,ТабФайлов.Количество()));
 	
	
	ОбработалиФайлы = 0;
	КоличествоНеОбработанныхФайлов = 0;
	КоличествоОшибок = 0;
	Если ТабФайлов.Количество()>0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВхТаб.ИмяФайла
		|ПОМЕСТИТЬ ВтФайлы
		|ИЗ
		|	&ВхТаб КАК ВхТаб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтФайлы.ИмяФайла
		|ИЗ
		|	ВтФайлы КАК ВтФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗагрузкаДанныхИзФулфилмент КАК ЗагрузкаДанныхИзФулфилмент
		|		ПО ВтФайлы.ИмяФайла = ЗагрузкаДанныхИзФулфилмент.ИмяФайла
		|ГДЕ
		|	ЗагрузкаДанныхИзФулфилмент.ИмяФайла ЕСТЬ NULL";
		
		Запрос.Параметры.Вставить("ВхТаб",ТабФайлов);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		// загрузка файлов , которые еще не были загружены 
		Пока Выборка.Следующий() Цикл
			КоличествоНеОбработанныхФайлов = КоличествоНеОбработанныхФайлов+1;
			
			ПутьКФайлуНаСервере 		= СтрШаблон("%1%2",КаталогЗагрузки,Выборка.ИмяФайла);
			ПутьКФайлуДляСохранения     = СтрШаблон("%1%2",ТекущийКаталогВременныхФайлов,Выборка.ИмяФайла);
			
			Если не ЗагрузкаФайлаССервераPSF( ПутьКФайлуНаСервере, ПутьКФайлуДляСохранения, Лог, session ) Тогда
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;
			// запоминаем для удаления 
			МассФайловДляУдаления.Добавить(ПутьКФайлуДляСохранения);
			
			// копирование в каталог архива
			ПутьАрхивуЗагружаемызФайлов = НастройкиФФ.КаталогЛогированияОбмена+"ЗагружаемыеФайлы\"+Выборка.ИмяФайла;
			ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Помещаем выгрузку в каталог архива "+ПутьАрхивуЗагружаемызФайлов);
			
			Попытка
				КопироватьФайл(ПутьКФайлуДляСохранения, ПутьАрхивуЗагружаемызФайлов);
			Исключение
				ОписаниеОшибки = СтрШаблон("Ошибка копирования файла (%1). Причина: %2",Выборка.ИмяФайла,ОписаниеОшибки());
				ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ОписаниеОшибки , "ERR");
				Возврат ложь;	
			КонецПопытки;
			
			ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Распаковываем архив : "+Выборка.ИмяФайла);
			// распаковываем файл
			Попытка
				Архив = новый ЧтениеZipФайла(ПутьКФайлуДляСохранения);
				Если Архив.Элементы.Количество()<>1 Тогда
					МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
					Сообщение  = СтрШаблон("Ошибка проверки содержимого файла архива[%1] Количество файлов в архиве не равно 1.",
											Выборка.ИмяФайла );
					ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
					КоличествоОшибок=КоличествоОшибок+1;
					Продолжить;
				КонецЕсли;
				
				ЭлементАрхива =Архив.Элементы.Получить(0); 
				ИмяРазархивированногоФайда = ЭлементАрхива.Имя;
				
				Архив.Извлечь(ЭлементАрхива, ТекущийКаталогВременныхФайлов);
				Архив.Закрыть();
				
			Исключение
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Сообщение  = СтрШаблон("Ошибка распаковки ZIP архива [%1] Причина : %2",Выборка.ИмяФайла, ОписаниеОшибки());
				ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
				Продолжить;
			КонецПопытки;
			
			// запоминаем для удаления 
			ПутьКФайлу = ТекущийКаталогВременныхФайлов+ИмяРазархивированногоФайда;				
			МассФайловДляУдаления.Добавить(ПутьКФайлу);

			// читаем файл
			ЧтениеXML = ПрочитатьДанныеФайла(ПутьКФайлу, РежимЗагрузки, Лог);
			Если ЧтениеXML = Неопределено Тогда
				ЗагрузкаБезОшибок = Ложь;
			Иначе
				// загружаем файл
				Если РежимЗагрузки = "ЗагрузкаОстатков" Тогда
					//ЕНС. отключено
					//ЗагрузкаБезОшибок = ЗагрузкаОстатковНаФулфилменте_FE708(ЧтениеXML, Лог);
				ИначеЕсли РежимЗагрузки = "ЗагрузкаДанныхКМ" Тогда
					ЗагрузкаБезОшибок = ЗагрузкаДанныхКМНаФулфилменте_FE770(ЧтениеXML, ПутьКФайлу, ИмяРазархивированногоФайда, Лог);								
				КонецЕсли;	
			КонецЕсли;
			
			// регистрируем как загруженный 
			МенЗап = РегистрыСведений.ЗагрузкаДанныхИзФулфилмент.СоздатьМенеджерЗаписи();
			МенЗап.ИмяФайла				= Выборка.ИмяФайла;
			МенЗап.ДатаЗагрузки			= ТекущаяДата();
			МенЗап.ЗагрузкаБезОшибок	= ЗагрузкаБезОшибок;
			МенЗап.Записать(Истина);
			
			Если не ЗагрузкаБезОшибок Тогда
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;	
			КонецЕсли;
			
			
			// пеермещаем файл успешных
			Источник 	= КаталогЗагрузки+Выборка.ИмяФайла;
			Приемник	= КаталогУспешнойЗагрузки+Выборка.ИмяФайла;
			Если не ПереместитьФайлМеждуКаталогамиНаСервереPSF(Источник , Приемник , Лог, session) Тогда
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;

			
			ОбработалиФайлы=ОбработалиФайлы+1;
		КонецЦикла;
	
	КонецЕсли;
	                     
	// перемещаем в каталог ошибочных
	Если МассивОшибочныхФайлов.Количество()>0 Тогда
		т = СтрШаблон("Перемещаем ошибочно загруженные файлы в количестве %1 шт.",МассивОшибочныхФайлов.Количество());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, т);
		Для каждого ФайлОшибки Из МассивОшибочныхФайлов Цикл
			// пеермещаем файл успешных
			//Поликарпов А.А. 17.05.23
			//Источник 	= КаталогЗагрузки+Выборка.ИмяФайла;
			//Приемник	= КаталогОшибочныхФайлов+Выборка.ИмяФайла;
			Источник 	= КаталогЗагрузки+ФайлОшибки;
			Приемник	= КаталогОшибочныхФайлов+ФайлОшибки;
			Если не ПереместитьФайлМеждуКаталогамиНаСервереPSF(Источник , Приемник , Лог, session) Тогда
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// закрываем подключение
	session.Dispose();
	session = Неопределено;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	
	// завершение загрузки
	Сообщение = СтрШаблон("Загрузка завершена. Загрузили новых файлов (%1 шт.) Всего файлов (%2 шт.) Ошибок (%3 шт.)",
							ОбработалиФайлы,
							КоличествоНеОбработанныхФайлов,
							КоличествоОшибок);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	// удаление файлов 
	Если МассФайловДляУдаления.Количество()>0 Тогда
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Удаляем временные файлы в количестве ["+МассФайловДляУдаления.Количество()+" шт.]", "-");
		Для каждого ПутьКФайлу Из МассФайловДляУдаления Цикл
			Попытка
			    УдалитьФайлы(ПутьКФайлуДляСохранения);
			Исключение
				Сообщение  = СтрШаблон("Ошибка удаления временного файла [%1] Причина : %2",ПутьКФайлу, ОписаниеОшибки());
				ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	возврат Истина;
КонецФункции // ()

Функция ПрочитатьДанныеФайла(ПутьКФайлуДанных, РежимЗагрузки, Лог) Экспорт
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Читаем файл %1 %2", РежимЗагрузки, ПутьКФайлуДанных));
	
	ФайлДанных = Новый Файл(ПутьКФайлуДанных);
	
	Если не ФайлДанных.Существует() Тогда
		Сообщение  = СтрШаблон("Не найден файл %1 для загрузки по пути : %2", РежимЗагрузки, ПутьКФайлуДанных);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат Неопределено;
	КонецЕсли;
				
	Попытка
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлуДанных);
		Возврат ЧтениеXML;
	Исключение
		Сообщение  = СтрШаблон("Ошибка чтения файла %1. Причина : %2", РежимЗагрузки, ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат Неопределено;
	КонецПопытки;
		
КонецФункции	

Функция ЗагрузкаДанныхКМНаФулфилменте_FE770(ЧтениеXML, ПолноеИмяФайла, ИмяФайла, Лог) Экспорт
	
	обк = обработки.ксп_ФорматFE770.Создать();
	Возврат обк.ЗагрузкаДанныхКМНаФулфилменте_FE770(ЧтениеXML, ПолноеИмяФайла, ИмяФайла, Лог);
	
		
КонецФункции // ()

#КонецОбласти


#Область ФункцииРаботыСФайламиНаСервереPSF

// 
// для работы КОМ-объекта WINSCP надо его зарегистрировать
// x86 для платформы 1С 32 бита
//   %WINDIR%\Microsoft.NET\Framework\<version>\RegAsm.exe WinSCPnet.dll /codebase /tlb
//x64 - для платформы 1С 64 бита
//   C:\Windows\Microsoft.NET\Framework64\v4.0.30319\RegAsm.exe WinSCPnet.dll /codebase /tlb:WinSCPnet64.tlb 

// ЕНС. Чтобы использовать этот метод надо убрать суффикс  _WinSCP
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УстановитьПодключениеКСерверуPSF( Лог) Экспорт 
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	// передача файла на сервер PSF
	Попытка
		sessionOptions = Новый COMОбъект("WinSCP.SessionOptions"); //Создаем объект SessionOptions
		ЗаполнитьЗначенияСвойств(sessionOptions,НастройкиФФ);
		session = Новый COMОбъект("WinSCP.Session"); //Создаем объект Session
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка создания СОМ объекта WinSCP. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат Неопределено;
	КонецПопытки;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Попытка подключения к серверу PSF  %1:%2 ",НастройкиФФ.HostName,Формат(НастройкиФФ.PortNumber, "ЧГ=0")));
	
	// Подключаемся
	Попытка
		session.Open(sessionOptions);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Соединение установлено.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка подключения к серверу PSF. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат Неопределено;
	КонецПопытки;
	
	если не session.Opened тогда
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Не удалось подключится серверу PSF. ","ERR");
		Возврат Неопределено;
	Конецесли;

	
	Возврат session;
КонецФункции // ()





// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыгрузкаФайлаНаСерверPSF(ПутьКФайлуВыгрузки, КаталогНаСервере, Лог , session = Неопределено) Экспорт 
	
	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF( Лог);
		
		Если session = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Передача файла %1 в кталог на сервере : %2",ПутьКФайлуВыгрузки,КаталогНаСервере);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	Попытка
		session.PutFiles(ПутьКФайлуВыгрузки, КаталогНаСервере).Check();
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Файл выгружен успешно.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка передачи файла на сервер. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат ложь;
	КонецПопытки;
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;

	Возврат Истина;
КонецФункции // ()



// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗагрузкаФайлаССервераPSF( ПутьКФайлуНаСервере, ПутьКФайлуДляСохранения, Лог, session = Неопределено)  

	
	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF( Лог);
		Если session = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Загрузка файла с сервера [%1] в временный каталог [%2]",ПутьКФайлуНаСервере,ПутьКФайлуДляСохранения);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	Попытка
		session.GetFiles(ПутьКФайлуНаСервере, ПутьКФайлуДляСохранения).Check();
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Файл загружен успешно.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка загрузки файла с сервера. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат ложь;
	КонецПопытки;
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ()

// Возвращает списак файлов в каталоге
//
// Параметры:
//  Каталог  	- Строка 	- каталог в виде обратных слешей , заканчивается слешем
//  Маска  		- Строка 	- маска файла
//  Лог  		- Структура - структура параметров лога, для вывода в лог.
//  session  	- COM объект- подключение к серверу
//
// Возвращаемое значение:
//   Массив строк   - Список имен файлов на сервере в каталоге
//
Функция ПолучитьСписокФайловНаСервереPSF(Каталог, Маска = "", Лог , session = Неопределено) Экспорт 

	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF(Лог);
		Если session = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Получение списка файлов из каталога %1 с маской [%2]",Каталог, Маска );
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	КолФайлов = 0;
	МассивФайлов = новый Массив;
	
	Попытка
		directory  =  session.ListDirectory(Каталог+Маска);
		Для каждого fileInfo  Из directory.Files Цикл
			МассивФайлов.Добавить(fileInfo.Name);
		КонецЦикла;
	Исключение
		Сообщение = СтрШаблон("Ошибка при чтении файлов из каталога %1 Причина: %2",Каталог, ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,Сообщение,"ERR");
		Возврат Неопределено;
	КонецПопытки;
	
	Сообщение = СтрШаблон("Прочитали файлов  (%1 шт.)",МассивФайлов.Количество());
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;

	Возврат МассивФайлов;
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Массив строк   - Список имен файлов на сервере в каталоге
//
Функция ПереместитьФайлМеждуКаталогамиНаСервереPSF(Источник , Приемник , Лог , session)  

	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF(Лог);
		Если session = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Перемещение файла между каталогами с [%1] в [%2]",Источник,Приемник);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	Попытка
		session.MoveFile(Источник, Приемник);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Файл перемещен успешно.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка перемещения файла между каталогами на сервере. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат ложь;
	КонецПопытки;
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;
	
	Возврат Истина;


КонецФункции // ()

#КонецОбласти


#Область ФормированиеXMLНаОснованииXSDСхем

функция ПолучитьОбъектМоейФабрики(Параметры, ИмяТипаОбъекта) Экспорт
	ТипОбъекта = ФабрикаXDTO.Тип(Параметры.ПространствоИмен,ИмяТипаОбъекта);
	возврат ФабрикаXDTO.Создать(ТипОбъекта);
КонецФункции

функция ПолучитьОбъектФабрики(Параметры, ПространствоИмен ,  ИмяТипаОбъекта) Экспорт
	ТипОбъекта = ФабрикаXDTO.Тип(ПространствоИмен,ИмяТипаОбъекта);
	возврат ФабрикаXDTO.Создать(ТипОбъекта);
КонецФункции
			
Процедура ЗаполнитьПустымиСвойствамиОбъектРекурсивно(Параметры, Объект) Экспорт

	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСвойствОбъекта = Объект.Свойства();

	Для каждого СвойствоОбъекта Из КоллекцияСвойствОбъекта Цикл     
		//Сообщить(СтрШаблон("Объект[%1] Свойство[%2] Пустое(%3) %4||%5",
		//			Объект.Тип().Имя,
		//			СвойствоОбъекта.Имя,
		//			СвойствоОбъекта.ВозможноПустое,                                типзнч
		//			СвойствоОбъекта.НижняяГраница,
		//			СвойствоОбъекта.ВерхняяГраница
		//			));
		                                              
		Если СвойствоОбъекта.ВерхняяГраница <> -1 Тогда
			
			ИмяСвойства = СвойствоОбъекта.Имя;
			
			// если тип описан в нашем пространстве имен 
			Если СвойствоОбъекта.URIПространстваИмен = СвойствоОбъекта.Тип.URIПространстваИмен Тогда
				ОбъектСвойства = ПолучитьОбъектМоейФабрики(Параметры, СвойствоОбъекта.Тип.Имя);
			иначе
				ОбъектСвойства = ПолучитьОбъектФабрики(Параметры, СвойствоОбъекта.Тип.URIПространстваИмен , СвойствоОбъекта.Тип.Имя);
			КонецЕсли;
			
			// если это непримитивный тип 
			Если ОбъектСвойства <> Неопределено Тогда
				ЗаполнитьПустымиСвойствамиОбъектРекурсивно(Параметры,ОбъектСвойства);
				
				Параметры.Вставить(ИмяСвойства,ОбъектСвойства);
				Объект[ИмяСвойства] = ОбъектСвойства;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// возвращает строку в формате xsd:duration
Функция ПолучитьДатуСтрокойФомата_XSD_duration(ДанныеДата) Экспорт
	// пример даты <typ:messageDate>P2023Y03M11DT13H33M22S</typ:messageDate>
	
	Рез = СтрШаблон("P%1Y%2M%3DT%4H%5M%6S",
	Формат(Год(ДанныеДата), "ЧН=0; ЧГ=0"),
	Формат(Месяц(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(День(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(Час(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(Минута(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(Секунда(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0")
	);
	
	возврат Рез;
КонецФункции // ()

// возвращает дату из строки формата xsd:duration
Функция ПолучитьДатуИзСтрокиФомата_XSD_duration(XSD_duration, ОписаниеОшибки) Экспорт
	// пример даты <typ:messageDate>P2023Y03M11DT13H33M22S</typ:messageDate>
	// P2023Y3M14DT14H46M14S
	ПозДень = Найти(XSD_duration,"D"); 
	СтрДни	= Сред(XSD_duration,1,ПозДень);
	СтрЧасы = Сред(XSD_duration,ПозДень+1);
	Попытка
		хГод		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДни,"P","Y"));
		хМесяц		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДни,"Y","M"));
		хДень		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДни,"M","D"));
		хЧас		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрЧасы,"T","H"));
		хМинута		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрЧасы,"H","M"));
		хСекунда	=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрЧасы,"M","S"));
		
		РезДата = Дата(хГод,хМесяц,хДень,хЧас,хМинута,хСекунда);
	Исключение
		ОписаниеОшибки = СтрШаблон(
			"Не удалось получить дату из формата xsd:duration (%1). Причина: %2",
			XSD_duration,
			ОписаниеОшибки());
		Возврат Неопределено;			
	
	КонецПопытки;
	
	возврат РезДата;
КонецФункции // ()

// получение строки между обрамляющими уникальными символами
Функция ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДанные, НачальныйСимвол, КонечныйСимвол) Экспорт
	Рез  = "";
	
	ПозНач 	= Найти(СтрДанные,НачальныйСимвол); 
	ПозКон	= Найти(СтрДанные,КонечныйСимвол);
	
	Рез 	= Сред(СтрДанные,ПозНач+1,ПозКон-ПозНач-1);
	
	//Поликарпов А.А. 17.05.23 - Добавление пустых Часов,Минут,Секунд
	Если Рез = "" И (КонечныйСимвол = "H" Или КонечныйСимвол = "M" Или КонечныйСимвол = "S") Тогда
		Рез = "00";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ()

// Возвращает строку без дублирующихся пробелов
//
// Параметры:
//  СтрокаСПробелами  - строка , строка в которой возможно есть дубли пробелов
//
// Возвращаемое значение:
//   Строка   - без дублирующихся пробелов
//
Функция СЖПРОБЕЛЫ( СтрокаСПробелми) Экспорт
	
	Стр = СтрокаСПробелми;
	
	Пока найти(Стр,"  ")>0 Цикл
		Стр = СтрЗаменить(Стр,"  "," ");
	КонецЦикла;

	Возврат Стр;
КонецФункции // ()

// Возвращает значение фасета stVatCode
//
// Параметры:
//  Ставка НДС  - ПеречислениеСсылка.СтавкиНДС 
// Возвращаемое значение:
//   Строка   - строковое соответствие ставки НДС
//
Функция ПолучитьСтавкуНДСФасета_stVatCode(СтавкаНДС) Экспорт
	Рез = "";
	
	//ВызватьИсключение "Для ЕРП требуется доработка определения Ставки НДС";
	_Ставка = СтавкаНДС.ПеречислениеСтавкаНДС;
	Если _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка") Тогда
		Рез = "Unknown";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда 
		Рез = "vc_WithoutVAT";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда 
		Рез = "vc_18";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда 
		Рез = "vc_18_118";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда 
		Рез = "vc_10";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда 
		Рез = "vc_10_110";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда 
		Рез = "vc_0";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда 
		Рез = "vc_20";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда 
		Рез = "vc_20_120";	
	ИначеЕсли _Ставка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда 
		Рез = "vc_WithoutVAT";		
	КонецЕсли;

	Возврат Рез;

КонецФункции // ()

// Возвращает строку, в которой экранированные символы преобразованы в обычные
//
// Параметры:
//  ИсходнаяСтрока  - Строка - исходная строка, которая может содержать экранированные символы 
// Возвращаемое значение:
//   Строка   - преобразованная строка без экранирования
//
Функция ПолучитьСтрокуСПреобразованиемЭкранированныхСимволов(Знач ИсходнаяСтрока) Экспорт
	
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("&quot", """");
	СоответствиеСимволов.Вставить("&apos", "'");
	СоответствиеСимволов.Вставить("&lt",   "<");
	СоответствиеСимволов.Вставить("&gt",   ">");
	СоответствиеСимволов.Вставить("&amp",  "&");
	
	Для Каждого КлючИЗначение Из СоответствиеСимволов Цикл
		ПреобразованнаяСтрока = СтрЗаменить(ИсходнаяСтрока, КлючИЗначение.Ключ, КлючИЗначение.Значение);	
	КонецЦикла;
	
	Возврат ПреобразованнаяСтрока;
	
КонецФункции	

#КонецОбласти




#Область Прочее

// Задержка на произвольное количество секунд
// удобна при настройке фоновых заданий
	////НеПравильнаяПауза(5, истина, "ВыгрузитьНоменклатуру");
	////возврат ИСТИНА;
Процедура НеПравильнаяПауза(Задержка, ВыводитьСообщение = истина, ИмяПаузы = "")

	ДатаОкончания = ТекущаяДата() + Задержка ;
	
	ДатаСекунды = ТекущаяДата();
	
	
	Пока ДатаОкончания > ТекущаяДата()  Цикл
		// ЖДЕМ 
		Если ВыводитьСообщение и ДатаСекунды<>ТекущаяДата() Тогда
			ДатаСекунды = ТекущаяДата();
			Сообщить(СтрШаблон("%1 ждем : %2",Формат(ДатаСекунды, "ДЛФ=T"),ИмяПаузы));	
		КонецЕсли;
	КонецЦикла;
	
	Сообщить(СтрШаблон("==> Закончили ожидание : %1",ИмяПаузы));


КонецПроцедуры

// Проверяет статус загруженных файлов
// Параметры:
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения запроса по статусам .
//
Функция ПроверкаСтатусаВыгруженныхФайлов(ВыводитьСообщения) Экспорт
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_СтатусаВыгрузки.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Проверка статуса выгружанных файлов."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));

	
	// Соответствие поиска
	СтатусФайла = новый Соответствие;

	// подключение к фулфилмент
	session = УстановитьПодключениеКСерверуPSF(Лог);
	Если session = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокФайловЗагруженный = ПолучитьСписокФайловНаСервереPSF(НастройкиФФ.ВнешнийКаталогУспешнойОбработкиВыгрузки,, Лог, session);   //"/incoming/processed/"
	// неудача при получении списка файлов
	Если СписокФайловЗагруженный = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	Для каждого ЗагруженныйФайл Из СписокФайловЗагруженный Цикл
		СтатусФайла.Вставить(ЗагруженныйФайл, Истина);
	КонецЦикла;
	
	СписокФайловОшибкаПриЗагрузке = ПолучитьСписокФайловНаСервереPSF(НастройкиФФ.ВнешнийКаталогОшибочнойОбработкиВыгрузки,, Лог, session);  //"/incoming/errors/"
	
	// закрываем подключение
	session.Dispose();
	session = Неопределено;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");

	
	// неудача при получении списка файлов
	Если СписокФайловОшибкаПриЗагрузке = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	Для каждого ПроблемныйФайл Из СписокФайловОшибкаПриЗагрузке Цикл
		СтатусФайла.Вставить(ПроблемныйФайл, ложь);
	КонецЦикла;
	
	Сообщение = СтрШаблон("Прочитали обработанные файлы. Без ошибок (%1 шт.), с ошибками (%2 шт.)",
							СписокФайловЗагруженный.Количество(),
							СписокФайловОшибкаПриЗагрузке.Количество());
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгрзкаДанныхВФулфилмент.ИмяФайла,
		|	ВыгрзкаДанныхВФулфилмент.ДокументОснование,
		|	ВыгрзкаДанныхВФулфилмент.ДатаВыгрузки
		|ИЗ
		|	РегистрСведений.ВыгрзкаДанныхВФулфилмент КАК ВыгрзкаДанныхВФулфилмент
		|ГДЕ
		|	ВыгрзкаДанныхВФулфилмент.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НовыхСтатуса = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ФайлЗагруженБезОшибок = СтатусФайла.Получить(Выборка.ИмяФайла);
		Если ФайлЗагруженБезОшибок <> Неопределено Тогда
			МенЗап = РегистрыСведений.ВыгрзкаДанныхВФулфилмент.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств( МенЗап, Выборка);
			МенЗап.ДатаОтвета 			= ТекущаяДата();
			МенЗап.ВыгрузкаБезОшибок	= ФайлЗагруженБезОшибок;
			МенЗап.Записать(Истина);
			НовыхСтатуса=НовыхСтатуса+1;
		КонецЕсли;
	КонецЦикла;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Закончили получение статусов файлов. Найдено новых статусов ("+НовыхСтатуса+" шт.)");
	
	возврат Истина;
КонецФункции // ()

#КонецОбласти


#Область КСП_ПеренесеноИзОбщихМодулейУПП

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  ВидРасчета           - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт
	
	ИмяТабличнойЧасти = ксп_Элис_ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;

	Если (СпособРасчета = Неопределено)
		//ЕНС
	 //Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
	 //Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) 
	 Тогда
		Если ксп_Элис_ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
			ИмяТабличнойЧасти) Тогда
			Если  ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Перемещение") 
				ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				Если ДокументОбъект.ОкруглятьДоКопеек Тогда
					СуммаСкидки = Окр(Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100,2);
				Иначе
					СуммаСкидки = Окр(Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100);
				КонецЕсли;
				Сумма = Сумма - СуммаСкидки;
				СуммаСкидки = 0;
			ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				СуммаСкидки = Окр( Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100 );
				Сумма = Сумма - СуммаСкидки;
				СуммаСкидки = 0;
             Иначе  
				СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
			Конецесли;
		КонецЕсли;
		
		//ЕНС
		//Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
			Если ксп_Элис_ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				Если  ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Перемещение") 
					ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа")  
					ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
					
					Если ДокументОбъект.ОкруглятьДоКопеек Тогда
						СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100,2);
					иначе
						СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
					Конецесли;
				ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				иначе
					СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;
		

КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = ксп_Элис_ОбщегоНазначения.ПолучитьРеквизитШапки("УчитыватьНДС", ДокументОбъект, МетаданныеДокумента, Истина);
	СуммаВключаетНДС = ксп_Элис_ОбщегоНазначения.ПолучитьРеквизитШапки("СуммаВключаетНДС", ДокументОбъект, МетаданныеДокумента, Истина);

	Попытка  //petin
		СтрокаТабличнойЧасти.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		                                                   УчитыватьНДС, СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	Исключение//petin
	КонецПопытки;//petin											   

КонецПроцедуры
												   

#КонецОбласти


//ЕНС

// Для вызова из ПриНачалеРаботыСистемы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ИнициализацияОбщихНастроек() Экспорт
	
	ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.ИнициализацияОбщихНастроек();
	
		
КонецПроцедуры


#Область РегламентныеЗадания


Процедура ксп_ЗагрузкаДанныхКМФулфилмент() Экспорт
	
	// Механизм проверки того, является ли база рабочей
	Отказ = Ложь;
	ксп_Элис_ОбщегоНазначения.ПередВыполнениемРегламентногоЗадания(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхКМ();
	
КонецПроцедуры	

#КонецОбласти

