
#Область ПолучениеНастроек

// Получение настроек по подсистеме Фулфилмент. 
// Пропишим в коде фиксированные настройки , потом в эту функцию 
// добавим вызов к регистру настроек по подсистемам , но его надо еще сделать 
// для ускорения прописываем настройки в коде . 
//
// Возвращаемое значение:
//   Структура   - Нимиенование настройки и ее значение. Получим все настройки подсистемы Фулфилмент. 
//
Функция ПолучитьНастройкиФулфилментДляТекущейБазы() Экспорт 
	Настройки = новый Структура;
	                 
	СтрокаСоединения = ВРег(СтрокаСоединенияИнформационнойБазы());
	
	ЭтоРабочаяБаза = (Найти(СтрокаСоединения,"654ыфва654фыва654фыва654фыва654")>0);//todo Указать правильное значение
	
	Если ЭтоРабочаяБаза Тогда
		// доступ с серверу FF
		Настройки = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.ПолучитьНастройкиГруппы("Фулфилмент");
	иначе
		// тестовая база
		Настройки = ПланыВидовХарактеристик.КСП_НастройкиФулфилмент.ПолучитьНастройкиГруппы("ФулфилментТестовыйСервер");
	КонецЕсли;

	Настройки.Вставить("ЭтоРабочаяБаза",ЭтоРабочаяБаза);

	Возврат Настройки;
КонецФункции // ()

#КонецОбласти


#Область ВыгрузкаДанных

// Выгрузка номенклатуры по составу документа "Продажа"
// каталог выгрузки бирется из настроек
//
// Параметры:
//  Продажа  			- ДокументСсылка.Продажа - Из документа будет братся номенклатура для выгрузки
//  ВыводитьСообщения	- Булево - Выводить ход выгрузки в консоль сообщений, актуально для ручной выгрузки из интерфейса.
// Возвращаемое значение:
//   Булево   - успех выгрузки , в случае ошибки ложь.  
//
Функция ВыгрузитьНоменклатуру( Продажа, ВыводитьСообщения = Ложь ) Экспорт
	
	//НеПравильнаяПауза(5, истина, "ВыгрузитьНоменклатуру");
	//возврат ИСТИНА;
	
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_ВыгрузкаНоменклатуры.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Выгрузка номенклатуры."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));
	
	
	
	ПутьКВременномуКаталогу = КаталогВременныхФайлов();
	
	ИмяФайла 		= "FE714_"+Формат(ДатаФормированияФайла, "ДФ=yyyyMMdd_HHmmss_")+Строка(новый УникальныйИдентификатор);
	
	ИмяФайлаАрхива 		= ИмяФайла + ".zip";
	ИмяФайлаОсновное 	= ИмяФайла + ".xml";
	
	
	ПутьКФайлуВыгрузки 	= ПутьКВременномуКаталогу+ИмяФайлаОсновное;
	ПутьКФайлуАрхива 	= ПутьКВременномуКаталогу+ИмяФайлаАрхива;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Имя файла выгрузки : "+ИмяФайлаАрхива);

	
	Если не ФормированиеФайлаXMLПоФормату_FE714(Продажа, ПутьКФайлуВыгрузки, Лог) Тогда
		Возврат ложь;	
	КонецЕсли;
	
	// сжимаем файл
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Сжимаем выгрузку ZIP'ом : "+ПутьКФайлуАрхива);

	ЗаписьZIP = Новый ЗаписьZipФайла(ПутьКФайлуАрхива);
	ЗаписьZIP.Добавить(ПутьКФайлуВыгрузки);
	ЗаписьZIP.Записать();
	ЗаписьZIP = Неопределено;
	
	// сразу удаляем временный файл, далее работаем с файлом архива. 
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Удаляем файл выгрузки : "+ПутьКФайлуВыгрузки+" (так как есть архив)");
	Попытка
		УдалитьФайлы(ПутьКФайлуВыгрузки);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла выгрузки номенклатуры. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	
	// копирование в каталог архива
	ПутьАрхивуВыгружаемыхФайлов = НастройкиФФ.КаталогЛогированияОбмена+"ВыгружаемыеФайлы\"+ИмяФайлаАрхива;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Помещаем выгрузку в каталог архива "+ПутьАрхивуВыгружаемыхФайлов);

	Попытка
	    КопироватьФайл(ПутьКФайлуАрхива,ПутьАрхивуВыгружаемыхФайлов);
	Исключение
		ОписаниеОшибки = СтрШаблон("Ошибка копирования файла выгрузки номенклатуры (%1). Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ОписаниеОшибки , "ERR");
		Возврат ложь;	
	КонецПопытки;
	
	// передача файла на сервер PSF
	КаталогНаСервере = НастройкиФФ.ВнешнийКаталогВыгрузки; //"/incoming/pending/"; // каталог для обработки сервером PSF
		
	Если не ВыгрузкаФайлаНаСерверPSF(ПутьКФайлуАрхива, КаталогНаСервере, Лог ) Тогда
		Возврат Ложь;
	КонецЕсли;
	

	// регистрируем файл как выгруженный и отдельно будем анализировать результат обрботки сервером PSF
	МенЗап = РегистрыСведений.ВыгрзкаДанныхВФулфилмент.СоздатьМенеджерЗаписи();
	МенЗап.ИмяФайла 			= ИмяФайлаАрхива;
	МенЗап.ДокументОснование 	= Продажа;
	МенЗап.ДатаВыгрузки 		= ТекущаяДата();
	
	Попытка
		МенЗап.Записать(Истина);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(	
			Лог,
			СтрШаблон(	"Ошибка записи регистрации в регистр ""ВыгрзкаДанныхВФулфилмент"" о выгрузке файла %1
						|на сервер PSF. Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки()),
			"ERR");
		Возврат ложь;
	КонецПопытки;
	
	
	Попытка
		УдалитьФайлы(ПутьКФайлуАрхива);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла архива выгрузки номенклатуры. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции // ВыгрузитьНоменклатуру()

// Выгрузка номенклатуры по составу документа "Продажа"
// каталог выгрузки бирется из настроек
//
// Параметры:
//  Продажа  			- ДокументСсылка.Продажа - Из документа будет братся номенклатура для выгрузки
//  ВыводитьСообщения	- Булево - Выводить ход выгрузки в консоль сообщений, актуально для ручной выгрузки из интерфейса.
// Возвращаемое значение:
//   Булево   - успех выгрузки , в случае ошибки ложь.  
//
Функция ВыгрузитьАнонсПоставки( СсылкаОрдерНаПродажу, ВыводитьСообщения = Ложь ) Экспорт
	//НеПравильнаяПауза(5, истина, "ВыгрузитьАнонсПоставки");
	//возврат ИСТИНА;

	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_ВыгрузкаАнонсовПоставки.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Выгрузка анонса поставки."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));
	
	// формировние имени файла 
	ПутьКВременномуКаталогу = КаталогВременныхФайлов();
	
	UUIDФайла				= Строка(новый УникальныйИдентификатор);	
	
	ИмяФайла = "FE720_"+Формат(ДатаФормированияФайла, "ДФ=yyyyMMdd_HHmmss")+"_"+UUIDФайла;

	ИмяФайлаАрхива 		= ИмяФайла + ".zip";
	ИмяФайлаОсновное 	= ИмяФайла + ".xml";
	
	ПутьКФайлуВыгрузки 	= ПутьКВременномуКаталогу+ИмяФайлаОсновное;
	ПутьКФайлуАрхива 	= ПутьКВременномуКаталогу+ИмяФайлаАрхива;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Имя файла выгрузки : "+ИмяФайлаАрхива);

	
	Если не ФормированиеФайлаXMLПоФормату_FE720(СсылкаОрдерНаПродажу, ПутьКФайлуВыгрузки,UUIDФайла , ДатаФормированияФайла , Лог) Тогда
		Возврат ложь;	
	КонецЕсли;
	
	// сжимаем файл
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Сжимаем выгрузку ZIP'ом : "+ПутьКФайлуАрхива);

	ЗаписьZIP = Новый ЗаписьZipФайла(ПутьКФайлуАрхива);
	ЗаписьZIP.Добавить(ПутьКФайлуВыгрузки);
	ЗаписьZIP.Записать();
	ЗаписьZIP = Неопределено;
	
	// сразу удаляем временный файл, далее работаем с файлом архива. 
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Удаляем файл выгрузки : "+ПутьКФайлуВыгрузки+" (так как есть архив)");
	Попытка
		УдалитьФайлы(ПутьКФайлуВыгрузки);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла выгрузки анонса поставки. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	
	// копирование в каталог архива
	ПутьАрхивуВыгружаемыхФайлов = НастройкиФФ.КаталогЛогированияОбмена+"ВыгружаемыеФайлы\"+ИмяФайлаАрхива;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Помещаем выгрузку в каталог архива "+ПутьАрхивуВыгружаемыхФайлов);

	Попытка
	    КопироватьФайл(ПутьКФайлуАрхива,ПутьАрхивуВыгружаемыхФайлов);
	Исключение
		ОписаниеОшибки = СтрШаблон("Ошибка копирования файла анонса поставки (%1). Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ОписаниеОшибки , "ERR");
		Возврат ложь;	
	КонецПопытки;
	
	// передача файла на сервер PSF
	КаталогНаСервере = НастройкиФФ.ВнешнийКаталогВыгрузки; //"/incoming/pending/"; // каталог для обработки сервером PSF
		
	Если не ВыгрузкаФайлаНаСерверPSF(ПутьКФайлуАрхива, КаталогНаСервере, Лог ) Тогда
		Возврат Ложь;
	КонецЕсли;
	

	// регистрируем файл как выгруженный и отдельно будем анализировать результат обрботки сервером PSF
	МенЗап = РегистрыСведений.ВыгрзкаДанныхВФулфилмент.СоздатьМенеджерЗаписи();
	МенЗап.ИмяФайла 			= ИмяФайлаАрхива;
	МенЗап.ДокументОснование 	= СсылкаОрдерНаПродажу;
	МенЗап.ДатаВыгрузки 		= ТекущаяДата();
	
	Попытка
		МенЗап.Записать(Истина);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(	
			Лог,
			СтрШаблон(	"Ошибка записи регистрации в регистр ""ВыгрзкаДанныхВФулфилмент"" о выгрузке файла %1
						|на сервер PSF. Причина: %2",ИмяФайлаАрхива,ОписаниеОшибки()),
			"ERR");
		Возврат ложь;
	КонецПопытки;
	
	
	Попытка
		УдалитьФайлы(ПутьКФайлуАрхива);
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Ошибка удаления файла архива выгрузки анонса поставки. Причина: "+ОписаниеОшибки(), "ERR");
		Возврат ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции // ВыгрузитьНоменклатуру()

// Выгрузка номенклатуры по Перемещению (ЕРП)
// Формирование XML файла по формату FE714 на основании документа продажи.
//
// Параметры:
//  СсылкаПродажа  		- СсылкаДокументы.Продажа
//  ПутьКФайлуВыгрузки  - Строка - путь к файлу выгрузки 
//	Лог					- Структура - структура для логирования хода выгрузки 
//
// Возвращаемое значение:
//   булево   - истина если удалось сделать выгрузку , иначе ложь. Описание ошибки в логе.
Функция ФормированиеФайлаXMLПоФормату_FE714(СсылкаПродажа, ПутьКФайлуВыгрузки, Лог) Экспорт

	Обрк = Обработки.ксп_ФормированиеФайлаXMLПоФормату_FE714.Создать();
	Возврат Обрк.ФормированиеФайлаXMLПоФормату_FE714(СсылкаПродажа, ПутьКФайлуВыгрузки, Лог);
	
КонецФункции

// Анонс поставки
// Формирование XML файла по формату FE714 на основании документа продажи.
//
// Параметры:
//  СсылкаОрдерНаПродажу  	- СсылкаДокументы.ЗаказНаПеремещение
//  ПутьКФайлуВыгрузки  	- Строка - путь к файлу выгрузки 
//	ОписаниеОшибки			- Описание ошибки , если она есть 
//
// Возвращаемое значение:
//   булево   - истина если удалось сделать выгрузку , иначе ложь и описание ошибки .
Функция ФормированиеФайлаXMLПоФормату_FE720(СсылкаОрдерНаПродажу, ПутьКФайлуВыгрузки, UUIDФайла, ДатаФормированияФайла,  Лог)  Экспорт
	
	Обрк = Обработки.ксп_АнонсПоставки.Создать();
	Возврат Обрк.ФормированиеФайлаXMLПоФормаФормированиеФайлаXMLПоФормату_FE720ту_FE714(СсылкаОрдерНаПродажу, ПутьКФайлуВыгрузки, UUIDФайла, ДатаФормированияФайла,  Лог);
	
КонецФункции

#КонецОбласти


#Область ЗагрузкаДанных

// Загрузка остатков склада фулфилмент
// Параметры:
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения запроса по статусам .
//
Функция ЗагрузкаОстатков(ВыводитьСообщения = Ложь) Экспорт
	
	МаскаФайлов = "FE708_";
	РежимЗагрузки = "ЗагрузкаОстатков";
	Возврат ЗагрузкаДанныхИзФайлов(РежимЗагрузки, МаскаФайлов, ВыводитьСообщения);	
	
КонецФункции	

// Загрузка данных о выводе/возврате в оборот кодов маркировки
// Параметры:
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения запроса по статусам .
//
Функция ЗагрузкаДанныхКМ(ВыводитьСообщения = Ложь) Экспорт
	
	МаскаФайлов = "FE770_";
	РежимЗагрузки = "ЗагрузкаДанныхКМ";
	Возврат ЗагрузкаДанныхИзФайлов(РежимЗагрузки, МаскаФайлов, ВыводитьСообщения);	
	
КонецФункции	

// Загрузка данных из файлов фулфилмента
// Параметры:
// 		РежимЗагрузки - Строка - представление режима загрузки, например, "ЗагрузкаОстатков".	
// 		МаскаФайлов - Строка - маска файлов для загрузки данных, например, "FE708_".	
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения загрузки.
//
Функция ЗагрузкаДанныхИзФайлов(РежимЗагрузки, МаскаФайлов, ВыводитьСообщения) Экспорт
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	// отдельно удаляем файлы что бы не забивать временный каталог
	МассФайловДляУдаления = Новый Массив;
	
	// массив для перемещения в папку ошибки /errors
	МассивОшибочныхФайлов = новый Массив;
	
	ТекущийКаталогВременныхФайлов = КаталогВременныхФайлов();
	ТекущийКаталогВременныхФайлов = 
		?(Прав(ТекущийКаталогВременныхФайлов,1)="\",ТекущийКаталогВременныхФайлов,ТекущийКаталогВременныхФайлов+"\");
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_" + РежимЗагрузки + ".txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "" + РежимЗагрузки + "."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));

	
	// подключение к фулфилмент
	session = УстановитьПодключениеКСерверуPSF(Лог);
	Если session = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогЗагрузки 		= 	НастройкиФФ.ВнешнийКаталогЗагрузки; 					//"/outgoing/pending/";
	КаталогУспешнойЗагрузки = 	НастройкиФФ.ВнешнийКаталогУспешнойОбработкиЗагрузки; 	//"/outgoing/processed/1s/";
	КаталогОшибочныхФайлов 	= 	НастройкиФФ.ВнешнийКаталогОшибочнойОбработкиЗагрузки; 	//"/outgoing/errors/1s/";
	
	//Поликарпов А.А. 16.06.23 обр.0000051886
	Если МаскаФайлов = "FE708_" Тогда
		КаталогЗагрузки 	= 	НастройкиФФ.ВнешнийКаталогЗагрузкиRetCRM;
	КонецЕсли;
	
	СписокФайлов = ПолучитьСписокФайловНаСервереPSF(КаталогЗагрузки,, Лог, session);    //"/outgoing/pending/1s/";
	// неудача при получении списка файлов
	Если СписокФайлов = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	// сверяем со списком уже загруженных файлов
	ТабФайлов = новый ТаблицаЗначений;
	ТабФайлов.Колонки.Добавить("ИмяФайла",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная)));
	Для каждого ЗагруженныйФайл Из СписокФайлов Цикл
		Если Найти(ЗагруженныйФайл, МаскаФайлов) <> 0 Тогда
			ТабФайлов.Добавить().ИмяФайла = ЗагруженныйФайл;
		КонецЕсли;
	КонецЦикла;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Найдено файлов с маской %1 [%2 шт.]",МаскаФайлов,ТабФайлов.Количество()));
	
	
	ОбработалиФайлы = 0;
	КоличествоНеОбработанныхФайлов = 0;
	КоличествоОшибок = 0;
	Если ТабФайлов.Количество()>0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВхТаб.ИмяФайла
		|ПОМЕСТИТЬ ВтФайлы
		|ИЗ
		|	&ВхТаб КАК ВхТаб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтФайлы.ИмяФайла
		|ИЗ
		|	ВтФайлы КАК ВтФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗагрузкаДанныхИзФулфилмент КАК ЗагрузкаДанныхИзФулфилмент
		|		ПО ВтФайлы.ИмяФайла = ЗагрузкаДанныхИзФулфилмент.ИмяФайла
		|ГДЕ
		|	ЗагрузкаДанныхИзФулфилмент.ИмяФайла ЕСТЬ NULL";
		
		Запрос.Параметры.Вставить("ВхТаб",ТабФайлов);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		// загрузка файлов , которые еще не были загружены 
		Пока Выборка.Следующий() Цикл
			КоличествоНеОбработанныхФайлов = КоличествоНеОбработанныхФайлов+1;
			
			ПутьКФайлуНаСервере 		= СтрШаблон("%1%2",КаталогЗагрузки,Выборка.ИмяФайла);
			ПутьКФайлуДляСохранения     = СтрШаблон("%1%2",ТекущийКаталогВременныхФайлов,Выборка.ИмяФайла);
			
			Если не ЗагрузкаФайлаССервераPSF( ПутьКФайлуНаСервере, ПутьКФайлуДляСохранения, Лог, session ) Тогда
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;
			// запоминаем для удаления 
			МассФайловДляУдаления.Добавить(ПутьКФайлуДляСохранения);
			
			// копирование в каталог архива
			ПутьАрхивуЗагружаемызФайлов = НастройкиФФ.КаталогЛогированияОбмена+"ЗагружаемыеФайлы\"+Выборка.ИмяФайла;
			ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Помещаем выгрузку в каталог архива "+ПутьАрхивуЗагружаемызФайлов);
			
			Попытка
				КопироватьФайл(ПутьКФайлуДляСохранения, ПутьАрхивуЗагружаемызФайлов);
			Исключение
				ОписаниеОшибки = СтрШаблон("Ошибка копирования файла (%1). Причина: %2",Выборка.ИмяФайла,ОписаниеОшибки());
				ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ОписаниеОшибки , "ERR");
				Возврат ложь;	
			КонецПопытки;
			
			ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Распаковываем архив : "+Выборка.ИмяФайла);
			// распаковываем файл
			Попытка
				Архив = новый ЧтениеZipФайла(ПутьКФайлуДляСохранения);
				Если Архив.Элементы.Количество()<>1 Тогда
					МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
					Сообщение  = СтрШаблон("Ошибка проверки содержимого файла архива[%1] Количество файлов в архиве не равно 1.",
											Выборка.ИмяФайла );
					ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
					КоличествоОшибок=КоличествоОшибок+1;
					Продолжить;
				КонецЕсли;
				
				ЭлементАрхива =Архив.Элементы.Получить(0); 
				ИмяРазархивированногоФайда = ЭлементАрхива.Имя;
				
				Архив.Извлечь(ЭлементАрхива, ТекущийКаталогВременныхФайлов);
				Архив.Закрыть();
				
			Исключение
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Сообщение  = СтрШаблон("Ошибка распаковки ZIP архива [%1] Причина : %2",Выборка.ИмяФайла, ОписаниеОшибки());
				ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
				Продолжить;
			КонецПопытки;
			
			// запоминаем для удаления 
			ПутьКФайлу = ТекущийКаталогВременныхФайлов+ИмяРазархивированногоФайда;				
			МассФайловДляУдаления.Добавить(ПутьКФайлу);

			// читаем файл
			ЧтениеXML = ПрочитатьДанныеФайла(ПутьКФайлу, РежимЗагрузки, Лог);
			Если ЧтениеXML = Неопределено Тогда
				ЗагрузкаБезОшибок = Ложь;
			Иначе
				// загружаем файл
				Если РежимЗагрузки = "ЗагрузкаОстатков" Тогда
					ЗагрузкаБезОшибок = ЗагрузкаОстатковНаФулфилменте_FE708(ЧтениеXML, Лог);
				ИначеЕсли РежимЗагрузки = "ЗагрузкаДанныхКМ" Тогда
					ЗагрузкаБезОшибок = ЗагрузкаДанныхКМНаФулфилменте_FE770(ЧтениеXML, ПутьКФайлу, ИмяРазархивированногоФайда, Лог);								
				КонецЕсли;	
			КонецЕсли;
			
			// регистрируем как загруженный 
			МенЗап = РегистрыСведений.ЗагрузкаДанныхИзФулфилмент.СоздатьМенеджерЗаписи();
			МенЗап.ИмяФайла				= Выборка.ИмяФайла;
			МенЗап.ДатаЗагрузки			= ТекущаяДата();
			МенЗап.ЗагрузкаБезОшибок	= ЗагрузкаБезОшибок;
			МенЗап.Записать(Истина);
			
			Если не ЗагрузкаБезОшибок Тогда
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;	
			КонецЕсли;
			
			
			// пеермещаем файл успешных
			Источник 	= КаталогЗагрузки+Выборка.ИмяФайла;
			Приемник	= КаталогУспешнойЗагрузки+Выборка.ИмяФайла;
			Если не ПереместитьФайлМеждуКаталогамиНаСервереPSF(Источник , Приемник , Лог, session) Тогда
				МассивОшибочныхФайлов.Добавить(Выборка.ИмяФайла);
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;

			
			ОбработалиФайлы=ОбработалиФайлы+1;
		КонецЦикла;
	
	КонецЕсли;
	
	// перемещаем в гаталог ошибочных
	Если МассивОшибочныхФайлов.Количество()>0 Тогда
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Перемещаем ошибочно загруженные файлы в количестве [ шт.]",МассивОшибочныхФайлов.Количество()));
		Для каждого ФайлОшибки Из МассивОшибочныхФайлов Цикл
			// пеермещаем файл успешных
			//Поликарпов А.А. 17.05.23
			//Источник 	= КаталогЗагрузки+Выборка.ИмяФайла;
			//Приемник	= КаталогОшибочныхФайлов+Выборка.ИмяФайла;
			Источник 	= КаталогЗагрузки+ФайлОшибки;
			Приемник	= КаталогОшибочныхФайлов+ФайлОшибки;
			Если не ПереместитьФайлМеждуКаталогамиНаСервереPSF(Источник , Приемник , Лог, session) Тогда
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// закрываем подключение
	session.Dispose();
	session = Неопределено;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	
	// завершение загрузки
	Сообщение = СтрШаблон("Загрузка завершена. Загрузили новых файлов (%1 шт.) Всего файлов (%2 шт.) Ошибок (%3 шт.)",
							ОбработалиФайлы,
							КоличествоНеОбработанныхФайлов,
							КоличествоОшибок);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	// удаление файлов 
	Если МассФайловДляУдаления.Количество()>0 Тогда
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Удаляем временные файлы в количестве ["+МассФайловДляУдаления.Количество()+" шт.]", "-");
		Для каждого ПутьКФайлу Из МассФайловДляУдаления Цикл
			Попытка
			    УдалитьФайлы(ПутьКФайлуДляСохранения);
			Исключение
				Сообщение  = СтрШаблон("Ошибка удаления временного файла [%1] Причина : %2",ПутьКФайлу, ОписаниеОшибки());
				ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	возврат Истина;
КонецФункции // ()

Функция ПрочитатьДанныеФайла(ПутьКФайлуДанных, РежимЗагрузки, Лог) Экспорт
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Читаем файл %1 %2", РежимЗагрузки, ПутьКФайлуДанных));
	
	ФайлДанных = Новый Файл(ПутьКФайлуДанных);
	
	Если не ФайлДанных.Существует() Тогда
		Сообщение  = СтрШаблон("Не найден файл %1 для загрузки по пути : %2", РежимЗагрузки, ПутьКФайлуДанных);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат Неопределено;
	КонецЕсли;
				
	Попытка
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлуДанных);
		Возврат ЧтениеXML;
	Исключение
		Сообщение  = СтрШаблон("Ошибка чтения файла %1. Причина : %2", РежимЗагрузки, ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат Неопределено;
	КонецПопытки;
		
КонецФункции	

Функция ЗагрузкаОстатковНаФулфилменте_FE708(ЧтениеXML, Лог) Экспорт
		
	URIПространстваИмен = "http://service.profashionsolutions.ru/fe708_r002";
	ТипОбъекта_stockInformationRequest = ФабрикаXDTO.тип(URIПространстваИмен,"stockInformationRequest");
		
	Попытка
		
		stockInformationRequest = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъекта_stockInformationRequest);
		ЧтениеXML.Закрыть();
		stockInformationRequest.Проверить();
		
	Исключение
		Сообщение  = СтрШаблон("Ошибка чтения XML фабрикой XDTO. Причина: %1", ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат ложь;
	КонецПопытки;
	
	// проверяем для кого были сформированы остатки 
	
	// !!! Надо вставить проверку 
	
	// Читаем дату 
	ОписаниеОшибки = "";
	ДатаОстатков = ПолучитьДатуИзСтрокиФомата_XSD_duration(stockInformationRequest.service.messageDate, ОписаниеОшибки);
	Если ДатаОстатков = Неопределено Тогда
		Сообщение  = СтрШаблон("Ошибка чтения даты. Причина: %1",ОписаниеОшибки);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат ложь;
	КонецЕсли;

	// проверка даты загрузки 
	
	ПоследняяДата = ПолучитьПроизвольноеЗначение("Фулфилмент","ПоследняяЗагруженаяДатаОстатковФулфилмент");
	
	Если не ДатаОстатков > ПоследняяДата Тогда
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Пропускаем загрузку остатков, так как дата в файле остатков меньше даты загруженных остатков", "!");
		Возврат истина;
	КонецЕсли;
	
	ВхТаб = новый ТаблицаЗначений;
	ВхТаб.Колонки.Добавить("Номенклатура",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВхТаб.Колонки.Добавить("ХарактеристикаНоменклатуры",новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВхТаб.Колонки.Добавить("Количество",новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(10,0)));
	
	
	РаспознаноПозиций 	= 0;
	КоличествоОшибок 	= 0;
	ОбновилиПозиций		= 0;
	// читаем остатки
	Для каждого item Из stockInformationRequest.items.item Цикл
		
		Попытка
			
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(item.uuid));
				
			Если не ЗначениеЗаполнено(Номенклатура) Тогда
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;
			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(новый УникальныйИдентификатор(item.size));
			Если не ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
				КоличествоОшибок=КоличествоОшибок+1;
				Продолжить;
			КонецЕсли;
			
			Количество = число(item.quantity);
			
			СтрВхТаб = ВхТаб.Добавить();
			
			СтрВхТаб.Номенклатура 				= Номенклатура;
			СтрВхТаб.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
			СтрВхТаб.Количество 				= Количество;
			
			//МенЗап = РегистрыСведений.ОстаткиТоваровНаСкладеФулфилмента.СоздатьМенеджерЗаписи();
			//МенЗап.Период						= ДатаОстатков;
			//МенЗап.Номенклатура 				= Номенклатура;
			//МенЗап.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
			//МенЗап.Количество 					= Количество;
			//МенЗап.Записать();
			
			РаспознаноПозиций = РаспознаноПозиций + 1;
			
		Исключение
			КоличествоОшибок=КоличествоОшибок+1;
			Продолжить;
		КонецПопытки;
	
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВхТаб.Номенклатура,
		|	ВхТаб.ХарактеристикаНоменклатуры,
		|	ВхТаб.Количество КАК КоличествоВх
		|ПОМЕСТИТЬ ВтТаб
		|ИЗ
		|	&ВхТаб КАК ВхТаб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваровНаСкладеФулфилментаСрезПоследних.Номенклатура,
		|	ОстаткиТоваровНаСкладеФулфилментаСрезПоследних.ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровНаСкладеФулфилментаСрезПоследних.Количество КАК КоличествоОст,
		|	0 КАК КоличествоВх
		|ПОМЕСТИТЬ ВтБезГруппировки
		|ИЗ
		|	РегистрСведений.ОстаткиТоваровНаСкладеФулфилмента.СрезПоследних(&ДатаОстатков, ) КАК ОстаткиТоваровНаСкладеФулфилментаСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтТаб.Номенклатура,
		|	ВтТаб.ХарактеристикаНоменклатуры,
		|	0,
		|	ВтТаб.КоличествоВх
		|ИЗ
		|	ВтТаб КАК ВтТаб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтБезГруппировки.Номенклатура,
		|	ВтБезГруппировки.ХарактеристикаНоменклатуры,
		|	СУММА(ВтБезГруппировки.КоличествоОст) КАК КоличествоОст,
		|	СУММА(ВтБезГруппировки.КоличествоВх) КАК КоличествоВх
		|ПОМЕСТИТЬ ВхСГруппировкой
		|ИЗ
		|	ВтБезГруппировки КАК ВтБезГруппировки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтБезГруппировки.Номенклатура,
		|	ВтБезГруппировки.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВхСГруппировкой.Номенклатура,
		|	ВхСГруппировкой.ХарактеристикаНоменклатуры,
		|	ВхСГруппировкой.КоличествоОст,
		|	ВхСГруппировкой.КоличествоВх
		|ИЗ
		|	ВхСГруппировкой КАК ВхСГруппировкой
		|ГДЕ
		|	ВхСГруппировкой.КоличествоВх <> ВхСГруппировкой.КоличествоОст";
	
	Запрос.УстановитьПараметр("ДатаОстатков", 	ДатаОстатков);
	Запрос.УстановитьПараметр("ВхТаб", 			ВхТаб);
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	// грузим дельту 
	Для каждого СтрРез Из ТабРез Цикл
		МенЗап = РегистрыСведений.ОстаткиТоваровНаСкладеФулфилмента.СоздатьМенеджерЗаписи();
		МенЗап.Период						= ДатаОстатков;
		МенЗап.Номенклатура 				= СтрРез.Номенклатура;
		МенЗап.ХарактеристикаНоменклатуры 	= СтрРез.ХарактеристикаНоменклатуры;
		МенЗап.Количество 					= СтрРез.КоличествоВх;
		МенЗап.Записать();
		ОбновилиПозиций = ОбновилиПозиций + 1;
	КонецЦикла;
	
	ТекстСообщения = СтрШаблон("Завершили загрузку остатков. 
						|Распознано строк %1. Обновили %2 позиций номенклатуры с размерами. Количество ошибок при загрузке: %3",
					РаспознаноПозиций, 
					ОбновилиПозиций,
					КоличествоОшибок);
					
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ТекстСообщения);
	
					
	возврат истина;
КонецФункции // ()

Функция ЗагрузкаДанныхКМНаФулфилменте_FE770(ЧтениеXML, ПолноеИмяФайла, ИмяФайла, Лог) Экспорт
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	URIПространстваИмен = "http://service.profashionsolutions.ru/fe770";
	ТипОбъекта_labelsRequest = ФабрикаXDTO.тип(URIПространстваИмен, "labelsRequest");
		
	Попытка
		
		labelsRequest = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъекта_labelsRequest);
		ЧтениеXML.Закрыть();
		labelsRequest.Проверить();
		
	Исключение
		Сообщение  = СтрШаблон("Ошибка чтения XML фабрикой XDTO. Причина: %1", ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат ложь;
	КонецПопытки;
	
	СоответствиеСтатусовОплаты = Новый Соответствие;
	СоответствиеСтатусовОплаты.Вставить("PaidUp", "Оплачен");
	СоответствиеСтатусовОплаты.Вставить("NotPaid", "Не оплачен");
	
	СоответствиеТиповВозврата = Новый Соответствие;
	СоответствиеТиповВозврата.Вставить("client", "Клиентский возврат");
	СоответствиеТиповВозврата.Вставить("postal", "Почтовый возврат");
	СоответствиеТиповВозврата.Вставить("partial", "Частичный возврат");
	
	ТаблицаДанных = новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КодМаркировки",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("КодМаркировкиДляПоиска",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("ВидОперации",новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийКМФулфилмент"));
	ТаблицаДанных.Колонки.Добавить("ДатаСобытия",новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДокументНаименование",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаДанных.Колонки.Добавить("ДокументНомер",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаДанных.Колонки.Добавить("ДокументДата",новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("НоменклатураНаименование",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("НоменклатураСсылка",новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанных.Колонки.Добавить("ХарактеристикаНаименование",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("ХарактеристикаСсылка",новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанных.Колонки.Добавить("Штрихкод",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("Цена",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2))); 
	ТаблицаДанных.Колонки.Добавить("ЗаказНомер",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаДанных.Колонки.Добавить("ЗаказДата",новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("СтатусОплаты",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаДанных.Колонки.Добавить("НомерПосылки",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаДанных.Колонки.Добавить("ТипВозврата",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	
	РаспознаноПозиций = 0;
	КоличествоОшибок  = 0;
	
	Для каждого ctLabel Из labelsRequest.labels Цикл
		
		Попытка
			
			Если ТипЗнч(ctLabel.operationDate) = Тип("Дата") Тогда
				ДатаСобытия = ctLabel.operationDate;
			Иначе	
				ОписаниеОшибки = "";
				ДатаСобытия = ПолучитьДатуИзСтрокиФомата_XSD_duration(ctLabel.operationDate, ОписаниеОшибки);
				Если ДатаСобытия = Неопределено Тогда
					Сообщение  = СтрШаблон("Ошибка чтения даты события (%1). Причина: %2", ctLabel.operationDate, ОписаниеОшибки);
					ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
					КоличествоОшибок = КоличествоОшибок + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			ДокументДата = Неопределено;
			ДокументНомер = Неопределено;
			ДокументНаименование = Неопределено;
			
			Если Не ctLabel.document = Неопределено Тогда
				
				Если Не ctLabel.document.Свойства().Получить("date") = Неопределено Тогда
					Если ТипЗнч(ctLabel.document.date) = Тип("Дата") Тогда
						ДокументДата = ctLabel.document.date;
					Иначе	
						ДокументДата = ПолучитьДатуИзСтрокиФомата_XSD_duration(ctLabel.document.date, ОписаниеОшибки);
						Если ДокументДата = Неопределено Тогда
							Сообщение  = СтрШаблон("Ошибка чтения даты документа (%1). Причина: %2", ctLabel.document.date, ОписаниеОшибки);
							ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
							КоличествоОшибок = КоличествоОшибок + 1;
							Продолжить;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
				
				Если Не ctLabel.document.Свойства().Получить("number") = Неопределено Тогда
					ДокументНомер = ctLabel.document.number;
				КонецЕсли;	
				
				Если Не ctLabel.document.Свойства().Получить("name") = Неопределено Тогда
					ДокументНаименование = ctLabel.document.name;
				КонецЕсли;	
				
			КонецЕсли;	
			
			ЗаказДата = Неопределено;
			ЗаказНомер = Неопределено;
			
			Если Не ctLabel.order = Неопределено Тогда
				
				Если Не ctLabel.order.Свойства().Получить("date") = Неопределено Тогда
					Если ТипЗнч(ctLabel.order.date) = Тип("Дата") Тогда
						ЗаказДата = ctLabel.order.date;
					Иначе	
						ЗаказДата = ПолучитьДатуИзСтрокиФомата_XSD_duration(ctLabel.order.date, ОписаниеОшибки);
						Если ДокументДата = Неопределено Тогда
							Сообщение  = СтрШаблон("Ошибка чтения даты заказа (%1). Причина: %2", ctLabel.order.date, ОписаниеОшибки);
							ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
							КоличествоОшибок = КоличествоОшибок + 1;
							Продолжить;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;		
				
				Если Не ctLabel.order.Свойства().Получить("number") = Неопределено Тогда
					ЗаказНомер = ctLabel.order.number;
				КонецЕсли;	
				
			КонецЕсли;	
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			
			СтрокаДанных.КодМаркировки = ПолучитьСтрокуСПреобразованиемЭкранированныхСимволов(ctLabel.labelCode);			
			СтрокаДанных.КодМаркировкиДляПоиска = СтрокаДанных.КодМаркировки;
			Если Лев(СтрокаДанных.КодМаркировкиДляПоиска, 4) = "(01)" Тогда
				СтрокаДанных.КодМаркировкиДляПоиска = Сред(СтрокаДанных.КодМаркировкиДляПоиска, 1, 18) + Сред(СтрокаДанных.КодМаркировкиДляПоиска, 23);
				СтрокаДанных.КодМаркировкиДляПоиска = Прав(СтрокаДанных.КодМаркировкиДляПоиска, СтрДлина(СтрокаДанных.КодМаркировкиДляПоиска) - 4);
			КонецЕсли;
			Если Лев(СтрокаДанных.КодМаркировкиДляПоиска, 2) = "01" Тогда
				СтрокаДанных.КодМаркировкиДляПоиска = Сред(СтрокаДанных.КодМаркировкиДляПоиска, 1, 16) + Сред(СтрокаДанных.КодМаркировкиДляПоиска, 19);
				СтрокаДанных.КодМаркировкиДляПоиска = Прав(СтрокаДанных.КодМаркировкиДляПоиска, СтрДлина(СтрокаДанных.КодМаркировкиДляПоиска) - 2);
			КонецЕсли;
			
			СтрокаДанных.ВидОперации = ?(ctLabel.operationType = 1, Перечисления.ВидыДвиженийКМФулфилмент.ВыводИзОборота, Перечисления.ВидыДвиженийКМФулфилмент.ВозвратВОборот);
			СтрокаДанных.ДатаСобытия = ДатаСобытия;
			
			СтрокаДанных.ДокументНаименование = ДокументНаименование;
			СтрокаДанных.ДокументНомер = ДокументНомер;
			СтрокаДанных.ДокументДата = ДокументДата;
			
			СтрокаДанных.НоменклатураНаименование = ctLabel.item.name;
			Если Не ctLabel.item.Свойства().Получить("item_uuid") = Неопределено Тогда
				НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(ctLabel.item.item_uuid));
				Если ОбщегоНазначения.СсылкаСуществует(НоменклатураСсылка) Тогда
					СтрокаДанных.НоменклатураСсылка = НоменклатураСсылка;
				КонецЕсли;	
			КонецЕсли;	
			
			СтрокаДанных.ХарактеристикаНаименование = ctLabel.item.size;
			Если Не ctLabel.item.Свойства().Получить("size_uuid") = Неопределено Тогда
				ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(новый УникальныйИдентификатор(ctLabel.item.size_uuid));
				Если ОбщегоНазначения.СсылкаСуществует(ХарактеристикаСсылка) Тогда
					СтрокаДанных.ХарактеристикаСсылка = ХарактеристикаСсылка;
				КонецЕсли;	
			КонецЕсли;	
			
			СтрокаДанных.Штрихкод = ctLabel.item.ean;
			
			Если Не ctLabel.item.Свойства().Получить("price") = Неопределено Тогда
				СтрокаДанных.Цена = ctLabel.item.price;
			КонецЕсли;	
						
			СтрокаДанных.ЗаказНомер = ЗаказНомер;
			СтрокаДанных.ЗаказДата = ЗаказДата;
			
			Если Не ctLabel.Свойства().Получить("paymentStatus") = Неопределено Тогда
				СтатусОплаты = СоответствиеСтатусовОплаты.Получить(ctLabel.paymentStatus);
				Если СтатусОплаты = Неопределено Тогда
					СтрокаДанных.СтатусОплаты = ctLabel.paymentStatus;
				Иначе
					СтрокаДанных.СтатусОплаты = СтатусОплаты;
				КонецЕсли;	
			КонецЕсли;		
			
			Если Не ctLabel.Свойства().Получить("parcelNumber") = Неопределено Тогда				
				СтрокаДанных.НомерПосылки = ctLabel.parcelNumber;
			КонецЕсли;	
			
			Если Не ctLabel.Свойства().Получить("returnType") = Неопределено Тогда				
				ТипВозврата = СоответствиеТиповВозврата.Получить(ctLabel.returnType);
				Если ТипВозврата = Неопределено Тогда
					СтрокаДанных.ТипВозврата = ctLabel.returnType;
				Иначе
					СтрокаДанных.ТипВозврата = ТипВозврата;
				КонецЕсли;				
			КонецЕсли;	
				
		Исключение
			ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), "ERR");
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	
	КонецЦикла;		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДанных.КодМаркировки,
	|	ТаблицаДанных.КодМаркировкиДляПоиска,
	|	ТаблицаДанных.ВидОперации,
	|	ТаблицаДанных.ДатаСобытия,
	|	ТаблицаДанных.ДокументНаименование,
	|	ТаблицаДанных.ДокументНомер,
	|	ТаблицаДанных.ДокументДата,
	|	ТаблицаДанных.НоменклатураНаименование,
	|	ТаблицаДанных.НоменклатураСсылка,
	|	ТаблицаДанных.ХарактеристикаНаименование,
	|	ТаблицаДанных.ХарактеристикаСсылка,
	|	ТаблицаДанных.Штрихкод,
	|	ТаблицаДанных.Цена,
	|	ТаблицаДанных.ЗаказНомер,
	|	ТаблицаДанных.ЗаказДата,
	|	ТаблицаДанных.СтатусОплаты,
	|	ТаблицаДанных.НомерПосылки,
	|	ТаблицаДанных.ТипВозврата
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.КодМаркировки,
	|	ТаблицаДанных.КодМаркировкиДляПоиска,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеПоКМ.Владелец, ТаблицаДанных.НоменклатураСсылка)
	|		ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|	КОНЕЦ КАК НоменклатураСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ХарактеристикаСсылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеПоКМ.ХарактеристикаНоменклатуры, ТаблицаДанных.ХарактеристикаСсылка)
	|		ИНАЧЕ ТаблицаДанных.ХарактеристикаСсылка
	|	КОНЕЦ КАК ХарактеристикаСсылка
	|ПОМЕСТИТЬ СопоставлениеПоКодамМаркировки
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ДанныеПоКМ
	|		ПО (ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ХарактеристикаСсылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И ТаблицаДанных.КодМаркировкиДляПоиска = ДанныеПоКМ.Штрихкод
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(ДанныеПоКМ.Владелец, ТаблицаДанных.НоменклатураСсылка)
	|				ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.КодМаркировки,
	|	ТаблицаДанных.КодМаркировкиДляПоиска,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеПоКМ.Владелец, ТаблицаДанных.НоменклатураСсылка)
	|		ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ХарактеристикаСсылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеПоКМ.ХарактеристикаНоменклатуры, ТаблицаДанных.ХарактеристикаСсылка)
	|		ИНАЧЕ ТаблицаДанных.ХарактеристикаСсылка
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставлениеПоКодамМаркировки.КодМаркировки,
	|	СопоставлениеПоКодамМаркировки.КодМаркировкиДляПоиска,
	|	СопоставлениеПоКодамМаркировки.НоменклатураСсылка,
	|	СопоставлениеПоКодамМаркировки.ХарактеристикаСсылка
	|ПОМЕСТИТЬ СопоставлениеПоШтрихкодам
	|ИЗ
	|	СопоставлениеПоКодамМаркировки КАК СопоставлениеПоКодамМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанных.КодМаркировки,
	|	ТаблицаДанных.КодМаркировкиДляПоиска,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеПоШК.Владелец, ТаблицаДанных.НоменклатураСсылка)
	|		ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ХарактеристикаСсылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеПоШК.ХарактеристикаНоменклатуры, ТаблицаДанных.ХарактеристикаСсылка)
	|		ИНАЧЕ ТаблицаДанных.ХарактеристикаСсылка
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ДанныеПоШК
	|		ПО (ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ХарактеристикаСсылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И ТаблицаДанных.Штрихкод = ДанныеПоШК.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставлениеПоКодамМаркировки КАК СопоставлениеПоКодамМаркировки
	|		ПО ТаблицаДанных.КодМаркировки = СопоставлениеПоКодамМаркировки.КодМаркировки
	|ГДЕ
	|	СопоставлениеПоКодамМаркировки.НоменклатураСсылка ЕСТЬ NULL
	|	И НЕ ВЫБОР
	|				КОГДА ТаблицаДанных.НоменклатураСсылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(ДанныеПоШК.Владелец, ТаблицаДанных.НоменклатураСсылка)
	|				ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставлениеПоШтрихкодам.КодМаркировки,
	|	СопоставлениеПоШтрихкодам.КодМаркировкиДляПоиска,
	|	МАКСИМУМ(СопоставлениеПоШтрихкодам.НоменклатураСсылка) КАК НоменклатураСсылка,
	|	МАКСИМУМ(СопоставлениеПоШтрихкодам.ХарактеристикаСсылка) КАК ХарактеристикаСсылка,
	|	КОЛИЧЕСТВО(СопоставлениеПоШтрихкодам.НоменклатураСсылка) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ДанныеПоШтрихкодам
	|ИЗ
	|	СопоставлениеПоШтрихкодам КАК СопоставлениеПоШтрихкодам
	|
	|СГРУППИРОВАТЬ ПО
	|	СопоставлениеПоШтрихкодам.КодМаркировки,
	|	СопоставлениеПоШтрихкодам.КодМаркировкиДляПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ИмяФайла КАК ИмяФайла,
	|	ТаблицаДанных.КодМаркировки,
	|	ТаблицаДанных.КодМаркировкиДляПоиска,
	|	ТаблицаДанных.ВидОперации КАК ВидОперации,
	|	ТаблицаДанных.ДатаСобытия,
	|	ТаблицаДанных.ДокументНаименование,
	|	ТаблицаДанных.ДокументНомер,
	|	ТаблицаДанных.ДокументДата,
	|	ТаблицаДанных.НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПоШтрихкодам.КоличествоЗаписей, 0) = 1
	|			ТОГДА ДанныеПоШтрихкодам.НоменклатураСсылка
	|		ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|	КОНЕЦ КАК Номенклатура,
	|	ТаблицаДанных.ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПоШтрихкодам.КоличествоЗаписей, 0) = 1
	|			ТОГДА ДанныеПоШтрихкодам.ХарактеристикаСсылка
	|		ИНАЧЕ ТаблицаДанных.ХарактеристикаСсылка
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Одежда)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|	КОНЕЦ КАК ВидПродукции,
	|	ТаблицаДанных.Штрихкод,
	|	ТаблицаДанных.Цена,
	|	ЕСТЬNULL(ЗаказИнтернетМагазина.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказИнтернетМагазина.ПустаяСсылка)) КАК Заказ,
	|	ТаблицаДанных.ЗаказНомер КАК НомерЗаказа,
	|	ТаблицаДанных.ЗаказДата КАК ДатаЗаказа,
	|	ТаблицаДанных.СтатусОплаты,
	|	ТаблицаДанных.НомерПосылки,
	|	ТаблицаДанных.ТипВозврата,
	|	1 КАК Количество,
	|	ЕСТЬNULL(ДанныеПоШтрихкодам.КоличествоЗаписей, 0) КАК КоличествоЗаписейШК,
	|	ЕСТЬNULL(ДвиженияКМФулфилмент.Ссылка, ЗНАЧЕНИЕ(Документ.ДвиженияКМФулфилмент.ПустаяСсылка)) КАК ДокументСсылка,
	|	&Организация КАК Организация,
	|	СправочникНоменклатура.СтавкаНДС
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоШтрихкодам КАК ДанныеПоШтрихкодам
	|		ПО ТаблицаДанных.КодМаркировки = ДанныеПоШтрихкодам.КодМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказИнтернетМагазина КАК ЗаказИнтернетМагазина
	|		ПО ТаблицаДанных.ЗаказНомер = ЗаказИнтернетМагазина.НомерЗаказа
	|			И (НАЧАЛОПЕРИОДА(ТаблицаДанных.ЗаказДата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказИнтернетМагазина.Дата, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ВЫБОР
	|				КОГДА ЕСТЬNULL(ДанныеПоШтрихкодам.КоличествоЗаписей, 0) = 1
	|					ТОГДА ДанныеПоШтрихкодам.НоменклатураСсылка
	|				ИНАЧЕ ТаблицаДанных.НоменклатураСсылка
	|			КОНЕЦ = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДвиженияКМФулфилмент КАК ДвиженияКМФулфилмент
	|		ПО (ДвиженияКМФулфилмент.ИмяФайла = &ИмяФайла)
	|			И ТаблицаДанных.ВидОперации = ДвиженияКМФулфилмент.ВидОперации
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Одежда)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|			КОНЕЦ = ДвиженияКМФулфилмент.ВидПродукции)
	|			И (ЕСТЬNULL(ЗаказИнтернетМагазина.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказИнтернетМагазина.ПустаяСсылка)) = ДвиженияКМФулфилмент.Заказ)
	|ИТОГИ
	|	МАКСИМУМ(ИмяФайла),
	|	МАКСИМУМ(НомерЗаказа),
	|	МАКСИМУМ(ДатаЗаказа),
	|	МАКСИМУМ(ДокументСсылка),
	|	МАКСИМУМ(Организация)
	|ПО
	|	ВидОперации,
	|	ВидПродукции,
	|	Заказ");
	
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("Организация", НастройкиФФ.Организация);
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщение = СтрШаблон("Ошибка выполнения запроса: %1", ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
		Возврат Ложь;
	КонецПопытки;	
	
	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидОперации.Следующий() Цикл
		
		ВыборкаВидПродукции = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидПродукции.Следующий() Цикл
		
			ВыборкаЗаказ = ВыборкаВидПродукции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗаказ.Следующий() Цикл
				
				КоличествоОшибокПоДокументу = 0;
				
				Если Не ЗначениеЗаполнено(ВыборкаЗаказ.Заказ) Тогда
					Сообщение = СтрШаблон("Не найден заказ ИМ %1 от %2", ВыборкаЗаказ.НомерЗаказа, ВыборкаЗаказ.ДатаЗаказа);
					ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
					КоличествоОшибокПоДокументу = КоличествоОшибокПоДокументу + 1;
				//	Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаЗаказ.ДокументСсылка) Тогда
					ДокументОбъект = ВыборкаЗаказ.ДокументСсылка.ПолучитьОбъект();
				Иначе
					ДокументОбъект = Документы.ДвиженияКМФулфилмент.СоздатьДокумент();
					ДокументОбъект.Дата = ТекущаяДата();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаЗаказ);
				ДокументОбъект.ДвиженияКодовМаркировки.Очистить();
				ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла));
				
				ВыборкаДанных = ВыборкаЗаказ.Выбрать();
		
				Пока ВыборкаДанных.Следующий() Цикл
					
					ПропуститьСтроку = Ложь;
					
					Если Не ЗначениеЗаполнено(ВыборкаДанных.Номенклатура) Тогда
						Если ВыборкаДанных.КоличествоЗаписейШК = 0 Тогда
							Сообщение = СтрШаблон("Не найдена номенклатура %1 (нет записей по ШК %2, %3)", ВыборкаДанных.НоменклатураНаименование, ВыборкаДанных.КодМаркировкиДляПоиска, ВыборкаДанных.Штрихкод);
						ИначеЕсли ВыборкаДанных.КоличествоЗаписейШК > 1 Тогда
							Сообщение = СтрШаблон("Не найдена номенклатура %1 (несколько записей по ШК %2)", ВыборкаДанных.НоменклатураНаименование, ВыборкаДанных.Штрихкод);
						Иначе	
							Сообщение = СтрШаблон("Не найдена номенклатура %1, КМ %2, ШК %3", ВыборкаДанных.НоменклатураНаименование, ВыборкаДанных.КодМаркировкиДляПоиска, ВыборкаДанных.Штрихкод);
						КонецЕсли;	
						ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
						ПропуститьСтроку = Истина;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаДанных.ХарактеристикаНоменклатуры) Тогда
						Если ВыборкаДанных.КоличествоЗаписейШК = 0 Тогда
							Сообщение = СтрШаблон("Не найдена характеристика %1 (нет записей по ШК %2, %3)", ВыборкаДанных.ХарактеристикаНаименование, ВыборкаДанных.КодМаркировкиДляПоиска, ВыборкаДанных.Штрихкод);
						ИначеЕсли ВыборкаДанных.КоличествоЗаписейШК > 1 Тогда
							Сообщение = СтрШаблон("Не найдена характеристика %1 (несколько записей по ШК %2)", ВыборкаДанных.ХарактеристикаНаименование, ВыборкаДанных.Штрихкод);
						Иначе	
							Сообщение = СтрШаблон("Не найдена характеристика %1, КМ %2, ШК %3", ВыборкаДанных.ХарактеристикаНаименование, ВыборкаДанных.КодМаркировкиДляПоиска, ВыборкаДанных.Штрихкод);
						КонецЕсли;	
						ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
						ПропуститьСтроку = Истина;
					КонецЕсли;
				
					Если ПропуститьСтроку Тогда
						КоличествоОшибокПоДокументу = КоличествоОшибокПоДокументу + 1;
					//	Продолжить;
					КонецЕсли;	
						
					НоваяСтрока = ДокументОбъект.ДвиженияКодовМаркировки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанных);
					РассчитатьСуммуТабЧасти(НоваяСтрока, ДокументОбъект);
					РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументОбъект);
					НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
				
				КонецЦикла;  // ВыборкаДанных
				
				РежимЗаписи = ?(КоличествоОшибокПоДокументу = 0, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				
		        Если ДокументОбъект.ДвиженияКодовМаркировки.Количество() > 0 Тогда
					Попытка
						ДокументОбъект.Записать(РежимЗаписи);
					Исключение
						Сообщение = СтрШаблон("Ошибка проведения документа: %1", ОписаниеОшибки());
						ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение, "ERR");
						КоличествоОшибокПоДокументу = КоличествоОшибокПоДокументу + 1;
					КонецПопытки;
				КонецЕсли;
				
				КоличествоОшибок = КоличествоОшибок + КоличествоОшибокПоДокументу;
				
			КонецЦикла;  // ВыборкаЗаказ
			
		КонецЦикла;  // ВыборкаВидПродукции	
		
	КонецЦикла;  // ВыборкаВидОперации
	
	ТекстСообщения = СтрШаблон("Завершили загрузку данных КМ. 
						|Распознано строк %1. Количество ошибок при загрузке: %2",
					РаспознаноПозиций, 
					КоличествоОшибок);
					
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, ТекстСообщения);
					
	Возврат КоличествоОшибок = 0; 
	
КонецФункции // ()

#КонецОбласти


#Область ФункцииРаботыСФайламиНаСервереPSF

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УстановитьПодключениеКСерверуPSF( Лог) Экспорт 
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	// передача файла на сервер PSF
	Попытка
		sessionOptions = Новый COMОбъект("WinSCP.SessionOptions"); //Создаем объект SessionOptions
		ЗаполнитьЗначенияСвойств(sessionOptions,НастройкиФФ);
		session = Новый COMОбъект("WinSCP.Session"); //Создаем объект Session
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка создания СОМ объекта WinSCP. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат Неопределено;
	КонецПопытки;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, СтрШаблон("Попытка подключения к серверу PSF  %1:%2 ",НастройкиФФ.HostName,Формат(НастройкиФФ.PortNumber, "ЧГ=0")));
	
	// Подключаемся
	Попытка
		session.Open(sessionOptions);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Соеденение установлено.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка подключения к серверу PSF. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат Неопределено;
	КонецПопытки;
	
	если не session.Opened тогда
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Не удалось подключится серверу PSF. ","ERR");
		Возврат Неопределено;
	Конецесли;

	
	Возврат session;
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыгрузкаФайлаНаСерверPSF(ПутьКФайлуВыгрузки, КаталогНаСервере, Лог , session = Неопределено) Экспорт 
	
	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF( Лог);
		
		Если session = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Передача файла %1 в кталог на сервере : %2",ПутьКФайлуВыгрузки,КаталогНаСервере);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	Попытка
		session.PutFiles(ПутьКФайлуВыгрузки, КаталогНаСервере).Check();
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Файл выгружен успешно.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка передачи файла на сервер. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат ложь;
	КонецПопытки;
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;

	Возврат Истина;
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗагрузкаФайлаССервераPSF( ПутьКФайлуНаСервере, ПутьКФайлуДляСохранения, Лог, session = Неопределено)  

	
	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF( Лог);
		Если session = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Загрузка файла с сервера [%1] в временный каталог [%2]",ПутьКФайлуНаСервере,ПутьКФайлуДляСохранения);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	Попытка
		session.GetFiles(ПутьКФайлуНаСервере, ПутьКФайлуДляСохранения).Check();
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Файл загружен успешно.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка загрузки файла с сервера. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат ложь;
	КонецПопытки;
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ()

// Возвращает списак файлов в каталоге
//
// Параметры:
//  Каталог  	- Строка 	- каталог в виде обратных слешей , заканчивается слешем
//  Маска  		- Строка 	- маска файла
//  Лог  		- Структура - структура параметров лога, для вывода в лог.
//  session  	- COM объект- подключение к серверу
//
// Возвращаемое значение:
//   Массив строк   - Список имен файлов на сервере в каталоге
//
Функция ПолучитьСписокФайловНаСервереPSF(Каталог, Маска = "", Лог , session = Неопределено) Экспорт 

	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF(Лог);
		Если session = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Получение списка файлов из каталога %1 с маской [%2]",Каталог, Маска );
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	КолФайлов = 0;
	МассивФайлов = новый Массив;
	
	Попытка
		directory  =  session.ListDirectory(Каталог+Маска);
		Для каждого fileInfo  Из directory.Files Цикл
			МассивФайлов.Добавить(fileInfo.Name);
		КонецЦикла;
	Исключение
		Сообщение = СтрШаблон("Ошибка при чтении файлов из каталога %1 Причина: %2",Каталог, ОписаниеОшибки());
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,Сообщение,"ERR");
		Возврат Неопределено;
	КонецПопытки;
	
	Сообщение = СтрШаблон("Прочитали файлов  (%1 шт.)",МассивФайлов.Количество());
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;

	Возврат МассивФайлов;
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Массив строк   - Список имен файлов на сервере в каталоге
//
Функция ПереместитьФайлМеждуКаталогамиНаСервереPSF(Источник , Приемник , Лог , session)  

	СоздалиСоеденение = ложь;
	Если session = Неопределено Тогда
		session = УстановитьПодключениеКСерверуPSF(Лог);
		Если session = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СоздалиСоеденение = истина;
	КонецЕсли;
	
	// передача файла на сервер PSF
	Сообщение = СтрШаблон("Перемещение файла между каталогами с [%1] в [%2]",Источник,Приемник);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);
	
	Попытка
		session.MoveFile(Источник, Приемник);
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Файл перемещен успешно.");
	Исключение
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог,"Ошибка перемещения файла между каталогами на сервере. Причина: "+ОписаниеОшибки(),"ERR");
		Возврат ложь;
	КонецПопытки;
	
	// если сами создали то и сами закрываем 
	Если СоздалиСоеденение Тогда
		session.Dispose();
		session = Неопределено;
		ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");
	КонецЕсли;
	
	Возврат Истина;


КонецФункции // ()

#КонецОбласти


#Область ФормированиеXMLНаОснованииXSDСхем

функция ПолучитьОбъектМоейФабрики(Параметры, ИмяТипаОбъекта) Экспорт
	ТипОбъекта = ФабрикаXDTO.Тип(Параметры.ПространствоИмен,ИмяТипаОбъекта);
	возврат ФабрикаXDTO.Создать(ТипОбъекта);
КонецФункции

функция ПолучитьОбъектФабрики(Параметры, ПространствоИмен ,  ИмяТипаОбъекта) Экспорт
	ТипОбъекта = ФабрикаXDTO.Тип(ПространствоИмен,ИмяТипаОбъекта);
	возврат ФабрикаXDTO.Создать(ТипОбъекта);
КонецФункции
			
Процедура ЗаполнитьПустымиСвойствамиОбъектРекурсивно(Параметры, Объект) Экспорт

	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСвойствОбъекта = Объект.Свойства();

	Для каждого СвойствоОбъекта Из КоллекцияСвойствОбъекта Цикл     
		//Сообщить(СтрШаблон("Объект[%1] Свойство[%2] Пустое(%3) %4||%5",
		//			Объект.Тип().Имя,
		//			СвойствоОбъекта.Имя,
		//			СвойствоОбъекта.ВозможноПустое,                                типзнч
		//			СвойствоОбъекта.НижняяГраница,
		//			СвойствоОбъекта.ВерхняяГраница
		//			));
		                                              
		Если СвойствоОбъекта.ВерхняяГраница <> -1 Тогда
			
			ИмяСвойства = СвойствоОбъекта.Имя;
			
			// если тип описан в нашем пространстве имен 
			Если СвойствоОбъекта.URIПространстваИмен = СвойствоОбъекта.Тип.URIПространстваИмен Тогда
				ОбъектСвойства = ПолучитьОбъектМоейФабрики(Параметры, СвойствоОбъекта.Тип.Имя);
			иначе
				ОбъектСвойства = ПолучитьОбъектФабрики(Параметры, СвойствоОбъекта.Тип.URIПространстваИмен , СвойствоОбъекта.Тип.Имя);
			КонецЕсли;
			
			// если это непримитивный тип 
			Если ОбъектСвойства <> Неопределено Тогда
				ЗаполнитьПустымиСвойствамиОбъектРекурсивно(Параметры,ОбъектСвойства);
				
				Параметры.Вставить(ИмяСвойства,ОбъектСвойства);
				Объект[ИмяСвойства] = ОбъектСвойства;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// возвращает строку в формате xsd:duration
Функция ПолучитьДатуСтрокойФомата_XSD_duration(ДанныеДата) Экспорт
	// пример даты <typ:messageDate>P2023Y03M11DT13H33M22S</typ:messageDate>
	
	Рез = СтрШаблон("P%1Y%2M%3DT%4H%5M%6S",
	Формат(Год(ДанныеДата), "ЧН=0; ЧГ=0"),
	Формат(Месяц(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(День(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(Час(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(Минута(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0"),
	Формат(Секунда(ДанныеДата), "ЧЦ=2; ЧН=0; ЧВН=; ЧГ=0")
	);
	
	возврат Рез;
КонецФункции // ()

// возвращает дату из строки формата xsd:duration
Функция ПолучитьДатуИзСтрокиФомата_XSD_duration(XSD_duration, ОписаниеОшибки) Экспорт
	// пример даты <typ:messageDate>P2023Y03M11DT13H33M22S</typ:messageDate>
	// P2023Y3M14DT14H46M14S
	ПозДень = Найти(XSD_duration,"D"); 
	СтрДни	= Сред(XSD_duration,1,ПозДень);
	СтрЧасы = Сред(XSD_duration,ПозДень+1);
	Попытка
		хГод		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДни,"P","Y"));
		хМесяц		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДни,"Y","M"));
		хДень		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДни,"M","D"));
		хЧас		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрЧасы,"T","H"));
		хМинута		=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрЧасы,"H","M"));
		хСекунда	=  Число(ПолучитьСтрокуМеждуСимволамиПоФормату(СтрЧасы,"M","S"));
		
		РезДата = Дата(хГод,хМесяц,хДень,хЧас,хМинута,хСекунда);
	Исключение
		ОписаниеОшибки = СтрШаблон(
			"Не удалось получить дату из формата xsd:duration (%1). Причина: %2",
			XSD_duration,
			ОписаниеОшибки());
		Возврат Неопределено;			
	
	КонецПопытки;
	
	возврат РезДата;
КонецФункции // ()

// получение строки между обрамляющими уникальными символами
Функция ПолучитьСтрокуМеждуСимволамиПоФормату(СтрДанные, НачальныйСимвол, КонечныйСимвол) Экспорт
	Рез  = "";
	
	ПозНач 	= Найти(СтрДанные,НачальныйСимвол); 
	ПозКон	= Найти(СтрДанные,КонечныйСимвол);
	
	Рез 	= Сред(СтрДанные,ПозНач+1,ПозКон-ПозНач-1);
	
	//Поликарпов А.А. 17.05.23 - Добавление пустых Часов,Минут,Секунд
	Если Рез = "" И (КонечныйСимвол = "H" Или КонечныйСимвол = "M" Или КонечныйСимвол = "S") Тогда
		Рез = "00";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ()

// Возвращает строку без дублирующихся пробелов
//
// Параметры:
//  СтрокаСПробелами  - строка , строка в которой возможно есть дубли пробелов
//
// Возвращаемое значение:
//   Строка   - без дублирующихся пробелов
//
Функция СЖПРОБЕЛЫ( СтрокаСПробелми) Экспорт
	
	Стр = СтрокаСПробелми;
	
	Пока найти(Стр,"  ")>0 Цикл
		Стр = СтрЗаменить(Стр,"  "," ");
	КонецЦикла;

	Возврат Стр;
КонецФункции // ()

// Возвращает значение фасета stVatCode
//
// Параметры:
//  Ставка НДС  - ПеречислениеСсылка.СтавкиНДС 
// Возвращаемое значение:
//   Строка   - строковое соответствие ставки НДС
//
Функция ПолучитьСтавкуНДСФасета_stVatCode(СтавкаНДС) Экспорт
	Рез = "";
	
	ВызватьИсключение "Для ЕРП требуется доработка определения Ставки НДС";
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка") Тогда
		Рез = "Unknown";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда 
		Рез = "vc_WithoutVAT";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда 
		Рез = "vc_18";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда 
		Рез = "vc_18_118";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда 
		Рез = "vc_10";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда 
		Рез = "vc_10_110";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда 
		Рез = "vc_0";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда 
		Рез = "vc_20";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда 
		Рез = "vc_20_120";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС12") Тогда 
		Рез = "vc_WithoutVAT";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда 
		Рез = "vc_WithoutVAT";	
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда 
		Рез = "Unknown";	
	КонецЕсли;

	Возврат Рез;

КонецФункции // ()

// Возвращает строку, в которой экранированные символы преобразованы в обычные
//
// Параметры:
//  ИсходнаяСтрока  - Строка - исходная строка, которая может содержать экранированные символы 
// Возвращаемое значение:
//   Строка   - преобразованная строка без экранирования
//
Функция ПолучитьСтрокуСПреобразованиемЭкранированныхСимволов(Знач ИсходнаяСтрока) Экспорт
	
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("&quot", """");
	СоответствиеСимволов.Вставить("&apos", "'");
	СоответствиеСимволов.Вставить("&lt",   "<");
	СоответствиеСимволов.Вставить("&gt",   ">");
	СоответствиеСимволов.Вставить("&amp",  "&");
	
	Для Каждого КлючИЗначение Из СоответствиеСимволов Цикл
		ПреобразованнаяСтрока = СтрЗаменить(ИсходнаяСтрока, КлючИЗначение.Ключ, КлючИЗначение.Значение);	
	КонецЦикла;
	
	Возврат ПреобразованнаяСтрока;
	
КонецФункции	

#КонецОбласти


#Область РаботаСПроизвольнымиПараметрами

Функция ПолучитьПроизвольноеЗначение(ИмяПодситемы,ИмяЗначения) экспорт

	Рез = Неопределено;
	
	Если  ИмяЗначения = "ПоследняяЗагруженаяДатаОстатковФулфилмент" тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОстаткиТоваровНаСкладеФулфилмента.Период КАК Период
		|ИЗ
		|	РегистрСведений.ОстаткиТоваровНаСкладеФулфилмента КАК ОстаткиТоваровНаСкладеФулфилмента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Рез = ВыборкаДетальныеЗаписи.Период;
		иначе
			Рез = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ()

#КонецОбласти


#Область РегламентныеЗадания

Процедура ВыполнитьЗагрузкуДанныхКМ() Экспорт
	
	// Механизм проверки того, является ли база рабочей
	Отказ = Ложь;

	//начало - Елисеев :: 01.12.2023
	//МодульРегламентныхЗаданий.ПередВыполнениемРегламентногоЗадания(Отказ);

	Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована Тогда
		
		ЗаписьЖурналаРегистрации("Фулфилмент",УровеньЖурналаРегистрации.Ошибка,,,
			"Загрузка КМ не выполнена, т.к. ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = Истина" );
		
		Отказ = Истина;
		
	КонецЕсли;
	//конец - Елисеев :: 01.12.2023
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхКМ();
	
КонецПроцедуры

//Поликарпов А.А. 16.06.23 обр. 0000051888
Процедура ВыполнитьЗагрузкуДанныхОстатки() Экспорт
	
	// Механизм проверки того, является ли база рабочей
	Отказ = Ложь;
	//начало - Елисеев :: 01.12.2023
	//МодульРегламентныхЗаданий.ПередВыполнениемРегламентногоЗадания(Отказ);
	
	Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована Тогда
		
		ЗаписьЖурналаРегистрации("Фулфилмент",УровеньЖурналаРегистрации.Ошибка,,,
			"Загрузка остатков не выполнена, т.к. ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована = Истина" );
		
		Отказ = Истина;
		
	КонецЕсли;
	//конец - Елисеев :: 01.12.2023
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаОстатков();
	
КонецПроцедуры

#КонецОбласти


#Область Прочее

// Задержка на произвольное количество секунд
// удобна при настройке фоновых заданий
	////НеПравильнаяПауза(5, истина, "ВыгрузитьНоменклатуру");
	////возврат ИСТИНА;
Процедура НеПравильнаяПауза(Задержка, ВыводитьСообщение = истина, ИмяПаузы = "")

	ДатаОкончания = ТекущаяДата() + Задержка ;
	
	ДатаСекунды = ТекущаяДата();
	
	
	Пока ДатаОкончания > ТекущаяДата()  Цикл
		// ЖДЕМ 
		Если ВыводитьСообщение и ДатаСекунды<>ТекущаяДата() Тогда
			ДатаСекунды = ТекущаяДата();
			Сообщить(СтрШаблон("%1 ждем : %2",Формат(ДатаСекунды, "ДЛФ=T"),ИмяПаузы));	
		КонецЕсли;
	КонецЦикла;
	
	Сообщить(СтрШаблон("==> Закончили ожидание : %1",ИмяПаузы));


КонецПроцедуры

// Проверяет статус загруженных файлов
// Параметры:
// 		ВыводитьСообщения - Булево - Выводить сообщения лога в консоль.	
// Возвращаемое значение:
//   Булево		- Результат выполнения запроса по статусам .
//
Функция ПроверкаСтатусаВыгруженныхФайлов(ВыводитьСообщения) Экспорт
	
	НастройкиФФ = ПолучитьНастройкиФулфилментДляТекущейБазы();
	
	ДатаФормированияФайла = ТекущаяДатаСеанса();
	
	// инициализация лога 
	ИмяЛогФайла = Формат(ДатаФормированияФайла, "ДФ=yyyy-MM-dd")+"_СтатусаВыгрузки.txt";
	Лог = ксп_Элис_ОбщегоНазначения.ИнициализацияЛогированияВФайл( НастройкиФФ.КаталогЛогированияОбмена, ИмяЛогФайла, Ложь, ВыводитьСообщения);
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Проверка статуса выгружанных файлов."+?(ВыводитьСообщения," [Вывод сообщений в консоль]",""));

	
	// Соответствие поиска
	СтатусФайла = новый Соответствие;

	// подключение к фулфилмент
	session = УстановитьПодключениеКСерверуPSF(Лог);
	Если session = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокФайловЗагруженный = ПолучитьСписокФайловНаСервереPSF(НастройкиФФ.ВнешнийКаталогУспешнойОбработкиВыгрузки,, Лог, session);   //"/incoming/processed/"
	// неудача при получении списка файлов
	Если СписокФайловЗагруженный = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	Для каждого ЗагруженныйФайл Из СписокФайловЗагруженный Цикл
		СтатусФайла.Вставить(ЗагруженныйФайл, Истина);
	КонецЦикла;
	
	СписокФайловОшибкаПриЗагрузке = ПолучитьСписокФайловНаСервереPSF(НастройкиФФ.ВнешнийКаталогОшибочнойОбработкиВыгрузки,, Лог, session);  //"/incoming/errors/"
	
	// закрываем подключение
	session.Dispose();
	session = Неопределено;
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Отключились от сервера PSF.");

	
	// неудача при получении списка файлов
	Если СписокФайловОшибкаПриЗагрузке = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	Для каждого ПроблемныйФайл Из СписокФайловОшибкаПриЗагрузке Цикл
		СтатусФайла.Вставить(ПроблемныйФайл, ложь);
	КонецЦикла;
	
	Сообщение = СтрШаблон("Прочитали обработанные файлы. Без ошибок (%1 шт.), с ошибками (%2 шт.)",
							СписокФайловЗагруженный.Количество(),
							СписокФайловОшибкаПриЗагрузке.Количество());
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, Сообщение);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгрзкаДанныхВФулфилмент.ИмяФайла,
		|	ВыгрзкаДанныхВФулфилмент.ДокументОснование,
		|	ВыгрзкаДанныхВФулфилмент.ДатаВыгрузки
		|ИЗ
		|	РегистрСведений.ВыгрзкаДанныхВФулфилмент КАК ВыгрзкаДанныхВФулфилмент
		|ГДЕ
		|	ВыгрзкаДанныхВФулфилмент.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НовыхСтатуса = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ФайлЗагруженБезОшибок = СтатусФайла.Получить(Выборка.ИмяФайла);
		Если ФайлЗагруженБезОшибок <> Неопределено Тогда
			МенЗап = РегистрыСведений.ВыгрзкаДанныхВФулфилмент.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств( МенЗап, Выборка);
			МенЗап.ДатаОтвета 			= ТекущаяДата();
			МенЗап.ВыгрузкаБезОшибок	= ФайлЗагруженБезОшибок;
			МенЗап.Записать(Истина);
			НовыхСтатуса=НовыхСтатуса+1;
		КонецЕсли;
	КонецЦикла;
	
	ксп_Элис_ОбщегоНазначения.ЗаписатьВЛог(Лог, "Закончили получение статусов файлов. Найдено новых статусов ("+НовыхСтатуса+" шт.)");
	
	возврат Истина;
КонецФункции // ()

#КонецОбласти


#Область КСП_ПеренесеноИзОбщихМодулейУПП

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  ВидРасчета           - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт
	
	//20180528
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено И ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И ДокументОбъект.Контрагент.ПринадлежитЭлементу(Справочники.Контрагенты.ПОКУПАТЕЛИ) И (ДокументОбъект.Контрагент <> Справочники.Контрагенты.ПокупательРозницы)
		И ВключатьСкидкуНаценкуВЦену(ДокументОбъект) Тогда
		
		// все скидки/наценки накладываются на цену, а не сумму
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
	Иначе//**20180528
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// СААТЧИ - округление и проценты на Цену в Подажа - для таможни
	ИмяТабЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ТранспортныеУслуги",МетаданныеДокумента, ИмяТабЧасти) И (ДокументОбъект.ТранспортнаяНаценка<>0) Тогда	//05-03-2015 Водолазова
		Цена = СтрокаТабличнойЧасти.Цена ;
		ЦенаСкидки = 0;

		Если (СпособРасчета = Неопределено)
		 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
		 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
				                                 ИмяТабличнойЧасти) Тогда
				Если ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа") Тогда
					Если ДокументОбъект.ОкруглятьДоКопеек Тогда
						//ЦенаСкидки = Цена * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;	//**** Алекс Ц. 20150130 19/02/2015 вернули обратно
						ЦенаСкидки = Окр(Цена * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100,2);
					Иначе
						ЦенаСкидки = Окр(Цена * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100);
					КонецЕсли;	
						
					//Водолазова 10-02-2015 4.Т.1
					Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ИзменениеКурсаВалюты ИЛИ  СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка Тогда//12052015 водолазова
						Цена = Цена - ЦенаСкидки;
						ЦенаСкидки = 0;
					КонецЕсли;
					//водолазова
				ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ЦенаСкидки = Окр(Цена * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100);
					//водолазова 10-02-2015 4.Т.1
					Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ИзменениеКурсаВалюты Тогда
						Цена = Цена - ЦенаСкидки;
						ЦенаСкидки = 0;
					КонецЕсли;	
					//водолазова
				Иначе
					ЦенаСкидки = Окр(Цена * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100,2);
				КонецЕсли;
			КонецЕсли;

			Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					Если ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа")  Тогда
						Если ДокументОбъект.ОкруглятьДоКопеек Тогда
							//ЦенаСкидки = ЦенаСкидки + (Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);	//**** Алекс Ц. 20150130  19/02/2015 вернули обратно
							ЦенаСкидки = Окр(ЦенаСкидки + (Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100),2);
						Иначе
							ЦенаСкидки = Окр(ЦенаСкидки + (Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100));
						КонецЕсли;
					ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
						ЦенаСкидки = Окр(ЦенаСкидки + (Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100));
					Иначе
						ЦенаСкидки = Окр(ЦенаСкидки + (Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100),2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Цена = Цена - ЦенаСкидки;
		
		СтрокаТабличнойЧасти.ТранспортныеУслуги=0 ;
		//Если ДокументОбъект.ТранспортнаяНаценка<>0 Тогда//20150305 Водолазова
		Если ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа") Тогда //20160906 водол
			Если (ИмяТабЧасти="Товары" и ЗначениеЗаполнено(ДокументОбъект.Посредник) и ЗначениеЗаполнено(ДокументОбъект.Контрагент))
			 ИЛИ (ИмяТабЧасти="ТоварыОрганизации" и Не ЗначениеЗаполнено(ДокументОбъект.Посредник) и ЗначениеЗаполнено(ДокументОбъект.Контрагент)) Тогда
			    Если ДокументОбъект.ОкруглятьДоКопеек Тогда
			 		ЦенаТранспортныеУслуги=Окр(ДокументОбъект.ТранспортнаяНаценка*Цена/100,2);
				Иначе
					ЦенаТранспортныеУслуги=Окр(ДокументОбъект.ТранспортнаяНаценка*Цена/100);	
				КонецЕсли;
				СтрокаТабличнойЧасти.ТранспортныеУслуги= ЦенаТранспортныеУслуги * СтрокаТабличнойЧасти.Количество; 
				Цена=Цена+ЦенаТранспортныеУслуги	;
			КонецЕСли ;
		КонецЕСли ;	//20150305 Водолазова
		
		Если ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа") И ДокументОбъект.ТранспортнаяНаценка=0 Тогда
			Если ДокументОбъект.ОкруглятьДоКопеек Тогда
				СтрокаТабличнойЧасти.Сумма = Цена * СтрокаТабличнойЧасти.Количество;
			Иначе
				СтрокаТабличнойЧасти.Сумма = Окр(Цена * СтрокаТабличнойЧасти.Количество);
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Сумма = Цена * СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		
	Иначе
	
		Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СуммаСкидки = 0;

		Если (СпособРасчета = Неопределено)
		 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
		 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
				ИмяТабличнойЧасти) Тогда
				Если  ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Перемещение") 
					ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Если ДокументОбъект.ОкруглятьДоКопеек Тогда
						СуммаСкидки = Окр(Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100,2);
					Иначе
						СуммаСкидки = Окр(Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100);
					КонецЕсли;
					 //водолазова 10-02-15 4.Т.1
					 //Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ИзменениеКурсаВалюты Тогда
						Сумма = Сумма - СуммаСкидки;
						СуммаСкидки = 0;
					 //КонецЕсли;
					 //водолазова
				ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					СуммаСкидки = Окр( Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100 );
					//водолазова 10-02-2015 4.Т.1
						//Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ИзменениеКурсаВалюты Тогда
							Сумма = Сумма - СуммаСкидки;
							СуммаСкидки = 0;
						//КонецЕсли;	
					//водолазова
				//ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  //водолазова 05-03-15 * //20180302 водол добавл реал. перенесено выше, т.к. одинаково

				//		Если ДокументОбъект.ОкруглятьДоКопеек Тогда
				//			СуммаСкидки = Окр(Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100,2);
				//		Иначе
				//			СуммаСкидки = Окр(Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100);
				//		КонецЕсли;
				//		//Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ИзменениеКурсаВалюты Тогда
				//			Сумма = Сумма - СуммаСкидки;
				//			СуммаСкидки = 0;
				//		//КонецЕсли; // * водолазова
	             Иначе  
					СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
				
				Конецесли;
			КонецЕсли;
			
			Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					Если  ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Перемещение") 
						ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа")  
						ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
						
						Если ДокументОбъект.ОкруглятьДоКопеек Тогда
							СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100,2);
						иначе
							СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
						Конецесли;
					ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
						СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
					иначе
						//Если  ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.Продажа")  ИЛИ ТипЗнч(ДокументОбъект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда //20180302 водол добавл реал
						//	Если ДокументОбъект.ОкруглятьДоКопеек Тогда
						//		СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100,2);
						//	иначе
						//		СуммаСкидки = СуммаСкидки + Окр(Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
						//	Конецесли;
						//Иначе
						СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
						//КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;
		
	КонецЕСли ;
	КонецЕсли;	
КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("УчитыватьНДС", ДокументОбъект, МетаданныеДокумента, Истина);
	СуммаВключаетНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("СуммаВключаетНДС", ДокументОбъект, МетаданныеДокумента, Истина);

	Попытка  //petin
		СтрокаТабличнойЧасти.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		                                                   УчитыватьНДС, СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	Исключение//petin
	КонецПопытки;//petin											   

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()
												   
Функция ВключатьСкидкуНаценкуВЦену(Объект)  Экспорт
	
	ВключатьВЦену = Ложь;
	ДатаНачалаДействияДляЗаявок = '20180419';
	ДатаНачалаДействия = '20180608';
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя") 
		
		И ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаПокупателя") и Объект.ДокументОснование.Дата >= ДатаНачалаДействияДляЗаявок) 
		ИЛИ (ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ЗаявкаПокупателя") и Объект.ДокументОснование.Дата >= ДатаНачалаДействия)) Тогда
		
		ВключатьВЦену = Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаПокупателя") 
		
		И (Объект.Дата >= ДатаНачалаДействияДляЗаявок) Тогда
		
		ВключатьВЦену = Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		
		И ((НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И (Объект.Дата>=ДатаНачалаДействия))
		ИЛИ 
		   (ЗначениеЗаполнено(Объект.ДокументОснование) 
		   И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Перемещение") ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) 
		   И  Объект.ДокументОснование.Дата >= ДатаНачалаДействия)) Тогда

		ВключатьВЦену = Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") 
		
		И ((НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И (Объект.Дата >= ДатаНачалаДействия)) 
		ИЛИ (ЗначениеЗаполнено(Объект.ДокументОснование) И (Объект.ДокументОснование.Дата >= ДатаНачалаДействия))) Тогда
		
		ВключатьВЦену = Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.Продажа") 
		
		И ((НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И (Объект.Дата >= ДатаНачалаДействия)) 
		ИЛИ (ЗначениеЗаполнено(Объект.ДокументОснование) И (Объект.ДокументОснование.Дата >= ДатаНачалаДействия))) Тогда

		ВключатьВЦену = Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.Перемещение") 
		
		И (Объект.Дата >= ДатаНачалаДействия) Тогда
		
		ВключатьВЦену = Истина;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") И Не ЗначениеЗаполнено(Объект.ДокументВозврат) И (Объект.Товары.Количество()>0) Тогда
		
		Если ЗначениеЗаполнено(Объект.Товары[0].ДокументПартии)	И Объект.Товары[0].ДокументПартии.Дата >= ДатаНачалаДействия Тогда
			
			ВключатьВЦену = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Товары[0].ДокументПартии) И Объект.Дата >= ДатаНачалаДействия Тогда
			
			ВключатьВЦену = Истина;
			
		КонецЕсли;

		
	КонецЕсли;
	
	Возврат ВключатьВЦену;
	
	
КонецФункции

#КонецОбласти




