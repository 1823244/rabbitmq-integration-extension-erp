
#Область ПрограммныйИнтерфейс_Прокси

//@proxy
Процедура ЗапуститьГруппуВФоне(Контекст) Экспорт
	мис_класс_ЗапускЗаданий
		.ЗапуститьГруппуВФоне(Контекст);
КонецПроцедуры

//@proxy
Процедура ЗапускЗаданияДляЭлементаСправочникаTaskManagement(СтруктураПараметров, ОбщиеПараметры) Экспорт
	мис_класс_ЗапускЗаданий
		.ЗапускЗаданияДляЭлементаСправочникаTaskManagement(СтруктураПараметров, ОбщиеПараметры);
КонецПроцедуры

// Этот метод вызывается из обработки мис_класс_ПараллельнаяОбработкаАлгоритма,
// метод ОбработатьПараллельноРезультатЗапроса(),
// чтобы запустить в фоне другой метод, который ей передается из алгоритма,
// который мы хотим распараллелить
Процедура ПроксиМетодДляЗапускаВФоне(ИмяМетодаФоновогоЗадания,МассивПараметровМетодаФЗ) Экспорт
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетодаФоновогоЗадания,МассивПараметровМетодаФЗ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	УстановленныеПараметры = Новый Массив;
	
	// ЕНС. Этого кода должно быть достаточно, он выполнится при первом запуске базы
	мис_ЭтоСервернаяБаза = ?(Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr")=0,Ложь,Истина);
	ПараметрыСеанса.мис_ЭтоСервернаяБаза = мис_ЭтоСервернаяБаза;
	УстановленныеПараметры.Добавить("мис_ЭтоСервернаяБаза");
	
	Возврат УстановленныеПараметры;
	
КонецФункции

//создает уникальный ключ для задания из спр мис_УправлениеЗаданиями
//Параметры:
//	Задание 			- СправочникСсылка.мис_УправлениеЗаданиями
//	ПоВремениЗапуска 	- булево - если Истина, то добавляет к ключу задания текущую дату
//Возвращаемое значение:
//	Тип: Строка
Функция СформироватьУникальныйКлючЗадания(Задание,ПоВремениЗапуска = Ложь) Экспорт
	
	//Прикладной уникальный идентификатор. 
	//Ключ задается разработчиком и должен быть уникальным среди активных фоновых заданий, 
	//имеющих такое же имя метода, как и у данного фонового задания. 
	//Но могут быть неактивные фоновые задания с совпадающими ключами.
	//
	// Формат ключа
	//
	// Код эл-та спр-ка::Имя метода, запущенного в фоне[:ДатаЗапуска]
	
	ЭтоГруппа = Задание.ЭтоГруппа;
	Уровень   = "";//"Уровень("+Задание.Уровень()+")";
	Наименование = Задание.Наименование;
	Код = Задание.Код;
	ДатаЗапуска = Формат(ТекущаяДатаСеанса(),"ДФ=yyyyMMdd:HHmmss");
	Если ЭтоГруппа Тогда
		ИмяПроцедуры = "Пакет";
	Иначе
		ИмяПроцедуры = Задание.ПроцедураСПараметрами;
	КонецЕсли;
	Ключ = Код+":"+Уровень+":"+ИмяПроцедуры+ ?(ПоВремениЗапуска,":"+ДатаЗапуска,"");
	Возврат Ключ;
КонецФункции

#КонецОбласти

#Область ЗащитаКластераОтПереполнения

// лимит заданий получаем из спр СвойстваМетодов
Процедура ОжиданиеПоЛимитуМаксПроцессовОдногоМетода(ИдВызова, Задание, МассивЗаданийОдногоСеанса, МаксПроцессов,
			ВключитьОтладочныеЛоги, МассивЗаданий, safeCount, Отбор, Задача)
	//		
	//конст_пауза = Константы.мис_ПаузаПриДостиженииЛимитаФоновыхПроцессов.Получить();
	//конст_пауза = ?(конст_пауза > 0, конст_пауза, 10);
	//
	//т=СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	"Количество фоновых заданий одного сеанса превысило лимит (%1)",МаксПроцессов);
	//
	//Пока МассивЗаданийОдногоСеанса.Количество() >= МаксПроцессов Цикл
	//	// ожидание через заглушку
	//	НаименованиеЗадания="Пауза "+Строка(конст_пауза)+" сек. Достигнут лимит фон. заданий по задаче("+строка(МаксПроцессов)+"), сеанс="+Строка(НомерСоединенияИнформационнойБазы());
	//	Если ВключитьОтладочныеЛоги Тогда 
	//		мис_ЛоггерСервер.Информация(ИдВызова, 
	//		"ожидание. начало", т+". Задача "+строка(НаименованиеЗадания)+
	//		". Гуид задания "+Задание.УникальныйИдентификатор);
	//	КонецЕсли;
	//	
	//	мис_УправлениеЗаданиямиОбщегоНазначенияСервер.Пауза(конст_пауза);
	//	
	//	Если ВключитьОтладочныеЛоги Тогда 
	//		мис_ЛоггерСервер.Информация(ИдВызова, "ожидание. конец", "Задача "+
	//		строка(НаименованиеЗадания)+". Гуид задания "+Задание.УникальныйИдентификатор);
	//	КонецЕсли;
	//	
	//	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	//	МассивЗаданийОдногоСеанса = ПолучитьМассивЗаданийОдногоСеанса(Задача, МассивЗаданий, Имям);
	//	safeCount = safeCount + 1;
	//	//Если safeCount >= 1080 Тогда
	//	//	мис_ЛоггерСервер.Ошибка(ИдВызова, "Ошибка", "Ожидание по лимиту фон. заданий одного метода прервано, т.к. длилось более 3-х часов! Задача "+строка(НаименованиеЗадания)+". Лимит "+строка(МаксПроцессов));
	//	//	ВызватьИсключение "Ошибка ожидания фоновых заданий. Ждем уже более 3-х часов!";
	//	//КонецЕсли;
	//КонецЦикла;
			
КонецПроцедуры

//
Процедура ОжиданиеПоЛимитуФоновыхНаКластере(ИдВызова, Задание, ЛимитФоновыхНаКластере, МассивЗаданий,
			ВключитьОтладочныеЛоги, safeCount, Отбор)
			
	ВызватьИсключение "ОжиданиеПоЛимитуФоновыхНаКластере::Не реализовано";
			
	конст_пауза = Константы.мис_ПаузаПриДостиженииЛимитаФоновыхПроцессов.Получить();
	конст_пауза = ?(конст_пауза > 0, конст_пауза, 10);
	
	т=СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Общее количество фоновых заданий на сервере >= ", Строка(ЛимитФоновыхНаКластере));
	
	Пока МассивЗаданий.Количество() >= ЛимитФоновыхНаКластере Цикл
		// ожидание через заглушку
		НаименованиеЗадания="Пауза "+Строка(конст_пауза)+" сек. Достигнут лимит фон. заданий на кластере ("+Строка(ЛимитФоновыхНаКластере)+"), тек. значение "+строка(МассивЗаданий.Количество())+", сеанс="+Строка(НомерСоединенияИнформационнойБазы());
		Если ВключитьОтладочныеЛоги Тогда
			мис_ЛоггерСервер.Информация(ИдВызова, "ожидание. начало", т+
			". Задача "+строка(НаименованиеЗадания)+
			". Гуид задания "+Задание.УникальныйИдентификатор);
		КонецЕсли;
			
		//СУУ_УниверсальныеСервер.Пауза(конст_пауза); //2024-03-04 пока отключено
		
		Если ВключитьОтладочныеЛоги Тогда
			мис_ЛоггерСервер.Информация(ИдВызова, "ожидание. конец", "Задача "+
			строка(НаименованиеЗадания)+". Гуид задания "+Задание.УникальныйИдентификатор);
		КонецЕсли;
		
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		safeCount = safeCount + 1;
		//Если safeCount >= 1080 Тогда
		//	мис_ЛоггерСервер.Ошибка(ИдВызова, "Ошибка", "Ожидание по общему лимиту фон. заданий на кластере прервано, т.к. длилось более 3-х часов! Задача "+строка(НаименованиеЗадания)+". Лимит "+строка(ЛимитФоновыхНаКластере));
		//	ВызватьИсключение "Ошибка ожидания фоновых заданий. Ждем уже более 3-х часов!";
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//переводит таблицу параметров в массив параметров для предачи в процедуру
// ВыполнитьБезопасно
Функция ТаблицаПараметровВМассивПараметров(ТаблицаПараметров,Знач ИдВызова = Неопределено,ОбщиеПараметры=Неопределено) Экспорт

	Массив = Новый Массив;
	
	ДопустимыеПараметрыПодмены = ПолучитьДопустимыеПараметрыПодмены();
	
	Для Каждого Стр Из ТаблицаПараметров Цикл

		//15/05/15
		//Если есть общие параметры и строка параметров входит в список допустимых параметров замены, то
		//1. Принудительно ставим Стр.ЭтоВыражение = Ложь;
		//2. Подставляем стр.Значение = ОбщиеПараметры[Ключ];
		//3. Дальше отрабатывает обычный код вычисляющий общий параметр.
		// мы должны уметь подменять СписокСчетов, СписокОрганизаций, Организация, ДатаНачала, ДатаОкончания, ДатаИзменения, ОтключениеИтогов, Параллелизм
		Если ОбщиеПараметры<>Неопределено Тогда
			
			ПараметрСоответствия = ДопустимыеПараметрыПодмены[Врег(Стр.Параметр)];
			ТекПараметр = Врег(Стр.Параметр);
			
			ЕстьТекПарам     = ОбщиеПараметры.Свойство(ТекПараметр);
			Если ПараметрСоответствия <> Неопределено Тогда
				ЕстьПарамПодмены = ОбщиеПараметры.Свойство(ПараметрСоответствия);
			Иначе
				ЕстьПарамПодмены = Ложь;
			КонецЕсли;
			
			Если ЕстьТекПарам ИЛИ ЕстьПарамПодмены Тогда
				Если ЕстьТекПарам Тогда
					ТекЗначениеПодмены =  ОбщиеПараметры[ТекПараметр];
				Иначе
					ТекЗначениеПодмены =  ОбщиеПараметры[ПараметрСоответствия]
				КонецЕсли;
				
				Если ТипЗнч(ТекЗначениеПодмены) = Тип("СписокЗначений") И ТекЗначениеПодмены.Количество()=0 Тогда
					// не меняем. Возможно нужно потом переделать общпараметры со структуры на таблицу значений	
				Иначе
					СтароеЗначение = Стр.Значение;
					Стр.ЭтоВыражение = Ложь;
					Стр.Значение     = ТекЗначениеПодмены;
					
					мис_ЛоггерСервер.ЗаписатьСообщение(ИДВызова, "Замена на общий параметр",
					Перечисления.мис_СтатусыСообщений.Информация,
					"Старое значение:"+СтароеЗначение + Символы.ПС+
					"Новое значение:"+ТекЗначениеПодмены
					);

				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Если Стр.ЭтоВыражение Тогда
			Попытка
				Парам = Неопределено;
				Выполнить("Парам="+Стр.Значение);
				Массив.Добавить(Парам);
			Исключение
				// Если не удалось вычислить параметр, то необходимо прервать выполнение.
				// Параметры должны быть однозначно заданы
				//Отказ = Истина;
				т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				 
				мис_ЛоггерСервер.Ошибка(ИДВызова, "Ошибка в функции ТаблицаПараметровВМассивПараметров()",
				"Неправильно задан параметр {"+Стр.Параметр+":"+Стр.Значение+"}. Подробности: "+т);
				
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			
			//Параметр = Стр.Значение;
			ПройденаПроверка = Истина;

			// Проверяем сначала Тип из реквизита типЗначения.
			Если ЗначениеЗаполнено(Стр.ТипЗначения) И ТипЗнч(Стр.ТипЗначения)=Тип("ОписаниеТипов") Тогда
				Если Стр.ТипЗначения.СодержитТип(Тип("Булево")) И ТипЗнч(Стр.Значение)<>Тип("Булево") Тогда
					ПройденаПроверка = Ложь;
				ИначеЕсли Стр.ТипЗначения.СодержитТип(Тип("Дата")) И ТипЗнч(Стр.Значение)<>Тип("Дата") Тогда
					ПройденаПроверка = Ложь;
				ИначеЕсли Стр.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				Иначе
					//Проверям ссылочные типы
					Для Каждого Эл Из Стр.ТипЗначения.Типы() Цикл
						Если мис_УправлениеЗаданиямиОбщегоНазначенияСервер.ЭтоСсылочныйТип(Эл)
							И мис_УправлениеЗаданиямиОбщегоНазначенияСервер.ЭтоСсылочныйТип(ТипЗнч(Стр.Значение)) Тогда
							Если Стр.Значение = Неопределено Тогда
								ЭтоПустаяСсылка = Истина;
							Иначе 
								Попытка
									ЭтоПустаяСсылка = Стр.Значение.Пустая();
								Исключение
								    ЭтоПустаяСсылка = Истина;
								КонецПопытки;
							КонецЕсли; 
							Если ЭтоПустаяСсылка ИЛИ Найти(Строка(Стр.Значение),"Объект не найден")>0 ИЛИ Найти(Строка(Стр.Значение),"Object not found")>0 Тогда
								ПройденаПроверка = Ложь;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				//ПройденаПроверка = Ложь;   // слишком много сообщений вводящих в заблуждение
			КонецЕсли;
			
			Если ТипЗнч(Стр.Значение) = Тип("СписокЗначений") Тогда
				Для Каждого эл Из Стр.Значение Цикл
					Если НЕ ЗначениеЗаполнено(Эл.Значение) Тогда
						ПройденаПроверка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ПройденаПроверка Тогда
				мис_ЛоггерСервер.ЗаписатьСообщение(ИДВызова, "Предупреждение о параметрах",
				Перечисления.мис_СтатусыСообщений.Информация,
				"Возможно параметр ошибочно пуст {"+Стр.Параметр+"}. Подробности:"+Символы.ПС+
				"");
			КонецЕсли;
			
			Массив.Добавить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
		
КонецФункции

Функция ПолучитьДопустимыеПараметрыПодмены()
	ПарПодмены = Новый Соответствие;
	
	//ДатаНачала
	ПарПодмены.Вставить(ВРег("ДатаНачала")   ,ВРег("ДатаНачала"));
	ПарПодмены.Вставить(ВРег("НачалоПериода"),ВРег("ДатаНачала"));
	ПарПодмены.Вставить(ВРег("ДатаНач")      ,ВРег("ДатаНачала"));
	
	//ДатаОкончания
	ПарПодмены.Вставить(ВРег("ДатаОкончания"),ВРег("ДатаОкончания"));
	ПарПодмены.Вставить(ВРег("КонецПериода") ,ВРег("ДатаОкончания"));
	ПарПодмены.Вставить(ВРег("ДатаКон")      ,ВРег("ДатаОкончания"));
	ПарПодмены.Вставить(ВРег("ДатаКонца")    ,ВРег("ДатаОкончания"));
	ПарПодмены.Вставить(ВРег("ДатаИзменения"),ВРег("ДатаОкончания"));  // для прогрузки по логмоменту
	
	//Организация
	ПарПодмены.Вставить(ВРег("Организация")      ,ВРег("СписокОрганизаций"));
	ПарПодмены.Вставить(ВРег("СписокОрганизаций"),ВРег("СписокОрганизаций"));
	
	//СписокСчетов 
	//ВАЖНО! Не решен вопрос подмены этого параметра. Многие алгоритмы работают по строгому списку счетов, 
	//так что его подменять нельзя
	//ПарПодмены.Вставить(ВРег("СписокСчетов")     ,ВРег("СписокСчетов")); 

	Возврат ПарПодмены;
	
КонецФункции

#КонецОбласти

