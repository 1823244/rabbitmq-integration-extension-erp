
#Область ПрограммныйИнтерфейс

Процедура Отладка(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт Если ПараметрыСеанса.мис_УровеньЛогов > 1 Тогда Возврат;КонецЕсли; ЗаписатьСообщение(ИдВызова, КраткоеОписание, Перечисления.мис_СтатусыСообщений.Отладка, ДетальноеОписание, Неопределено, СчетчикПовторов, 1);КонецПроцедуры

Процедура Информация(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт Если ПараметрыСеанса.мис_УровеньЛогов > 2 Тогда Возврат;КонецЕсли; ЗаписатьСообщение(ИдВызова, КраткоеОписание, Перечисления.мис_СтатусыСообщений.Информация, ДетальноеОписание, Неопределено, СчетчикПовторов, 2);КонецПроцедуры

Процедура Предупреждение_(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт Если ПараметрыСеанса.мис_УровеньЛогов > 3 Тогда Возврат;КонецЕсли; ЗаписатьСообщение(ИдВызова, КраткоеОписание, Перечисления.мис_СтатусыСообщений.Предупреждение, ДетальноеОписание, Неопределено, СчетчикПовторов, 3);КонецПроцедуры

Процедура Ошибка(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт Если ПараметрыСеанса.мис_УровеньЛогов > 4 Тогда Возврат;КонецЕсли; ЗаписатьСообщение(ИдВызова, КраткоеОписание, Перечисления.мис_СтатусыСообщений.Ошибка, ДетальноеОписание, Неопределено, СчетчикПовторов, 4);КонецПроцедуры

Процедура КритическаяОшибка(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт
	
	Если ПараметрыСеанса.мис_УровеньЛогов > 5 Тогда Возврат;КонецЕсли;
	
	Если КраткоеОписание = Неопределено Тогда
		КраткоеОписание = "";
	КонецЕсли;
	
	Если ДетальноеОписание = Неопределено Тогда
		ДетальноеОписание = "";
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("mis_LoggerServer.КритическаяОшибка",,,,КраткоеОписание+". Подробнее: "+ДетальноеОписание);
	
	ЗаписатьСообщение(ИдВызова, КраткоеОписание, Перечисления.мис_СтатусыСообщений.КритическаяОшибка, ДетальноеОписание, Неопределено, СчетчикПовторов, 5);
	
КонецПроцедуры

// replace for СоздатьИдВызова()
//создает новый идентификатор вызова
//Параметры:
//	ИдВызоваРодитель 	- СправочникСсылка.мис_ИндексЛога - необязательный, ссылка на родительский вызов
//	Наименование 		- строка 			- обязательный, комментарий например «Импорт контрагентов из BO»
//	ВремяВызова 		- дата 				- время создания элемента (обычно - текущее)
//	МодульПроцедура 	- строка 			- обязательный, название модуля процедуры которую хотим видеть в логе
//	ПараметрыВызова 	- список значений 	- необязательный , хранилище значения со списком значений содержащее 
//		параметры вызова. Указываются только те параметры которые могут быть значимы для 
//		интерпретации сообщения.
//	Задание 			- СправочникСсылка.мис_УправлениеЗаданиями - задание, которое породило данный индекс лога
//Возвращаемое значение:
//	Ссылка на элемент справочника мис_ИндексЛога
//
Функция CreateRootLog(ИдВызоваРодитель=Неопределено, Знач Наименование, Знач ВремяВызова,
	Знач МодульПроцедура, ПараметрыВызова, Задание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ВремяВызова) Тогда
		ВремяВызова = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Наименование = Неопределено Тогда
		Наименование = "";
	КонецЕсли;
	
	Спр	= Справочники.мис_ИндексЛога.СоздатьЭлемент();
	Если НЕ ИдВызоваРодитель=Неопределено Тогда
		Спр.Родитель 	= ИдВызоваРодитель;
		Если ТипЗнч(ИдВызоваРодитель) = Тип("СправочникСсылка.мис_ИндексЛога")
			ИЛИ ТипЗнч(ИдВызоваРодитель) = Тип("СправочникОбъект.мис_ИндексЛога") Тогда
			Спр.Задание = ИдВызоваРодитель.Задание;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВызова) <> Тип("ХранилищеЗначения") Тогда
		ПараметрыВызова_ = Новый ХранилищеЗначения(ПараметрыВызова, Новый СжатиеДанных(9));
	Иначе
		ПараметрыВызова_ = ПараметрыВызова;
	КонецЕсли;
	
	Спр.Наименование 	= Наименование;
	Спр.ВремяВызова 	= ВремяВызова;
	Спр.МодульПроцедура = МодульПроцедура;
	Спр.ПараметрыВызова = ПараметрыВызова_;
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
	//	Если ТипЗнч(ПараметрыСеанса.ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
	//		Спр.Пользователь 	= ПараметрыСеанса.ТекущийПользователь; 
	//	КонецЕсли;
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Спр.Пользователь) Тогда
		//Спр.Пользователь 	= Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
	Спр.Задание 		= Задание;
	
	Попытка
		Спр.Записать();
		Возврат Спр.Ссылка;
	Исключение
		ЗаписьЖурналаРегистрации("mis_LoggerServer.СоздатьИдВызова",УровеньЖурналаРегистрации.Ошибка,,,"Не удалось создать ИдВызова. Наименование '"+Наименование+"'. Подробности: "+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьИдВызова(ИдВызоваРодитель=Неопределено, Знач Наименование, Знач ВремяВызова,
	Знач МодульПроцедура, ПараметрыВызова, Задание = Неопределено) Экспорт
	
	Возврат CreateRootLog(ИдВызоваРодитель,Наименование, ВремяВызова,
		МодульПроцедура, ПараметрыВызова, Задание ) ;

КонецФункции

#КонецОбласти

#Область ЗаписьСообщения

//записывает сообщение в лог
//Параметры:
//	ИдВызова - объект справочника ИндексЛога
//	КраткоеОписание - строка
//	ВидСообщения - перечисление мис_ВидСообщения
//	ДетальноеОписание - строка
//Возвращаемое значение:
//	нет
//
Функция ЗаписатьСообщение(ИдВызова, КраткоеОписание, ВидСообщения, ДетальноеОписание="",Знач ДатаВремяСообщения = Неопределено, СчетчикПовторов=0, Уровень = 2) Экспорт
	Если ТипЗнч(СчетчикПовторов) = Тип("Число") Тогда
		СчетчикПовторов = СчетчикПовторов + 1;
		Если СчетчикПовторов>11 Тогда Возврат Истина;
		ИначеЕсли СчетчикПовторов=11 Тогда
			а=0;ЗаписатьСообщение(ИдВызова, КраткоеОписание, ВидСообщения, "запись в лог выключена, т.к. записано уже 10 однотипных сообщений: "+ДетальноеОписание, ДатаВремяСообщения, а);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Если (ДатаВремяСообщения = Неопределено) ИЛИ (ТипЗнч(ДатаВремяСообщения)<>Тип("Дата")) ИЛИ ДатаВремяСообщения = Дата(1,1,1) Тогда
		ДатаВремяСообщения = ТекущаяДатаСеанса();
	КонецЕсли;
	Спр = Справочники.мис_ЛогСообщений.СоздатьЭлемент();
	Спр.Наименование= КраткоеОписание;
	Спр._Владелец= ИдВызова;
	Спр.ВидСообщения = ВидСообщения;
	Спр.ДетальноеОписание= ДетальноеОписание;
	Спр.ДатаВремя= ДатаВремяСообщения;
	Попытка
		Спр.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(КраткоеОписание, ВидСообщенияЖР(ВидСообщения), , , ДетальноеОписание,);
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область УдалениеСообщений

//удаляет сообщения старше чем Дней переданных в качестве параметра, используется для фоновых заданий
//Параметры:
//	Дней - дата, до которой надо удалить сообщения лога
//Возвращаемое значение:
//	нет
//
Функция УдалитьСообщения(ИдВызова = Неопределено, Дней, РазмерПакета=1000,ИдентификаторВызова = "",РазмерТранзакции = 100, Отладка = Ложь) Экспорт
	
	Попытка
		
		ИдВызоваРодитель= ИдВызова;
		Наименование 	= "Удаление записей лога сообщений";
		ВремяВызова 	= ТекущаяДатаСеанса();
		МодульПроцедура = "УдалитьСообщения";
		СписПар 		= Новый СписокЗначений;
		СписПар.Добавить(Дней, "Дней");
		СписПар.Добавить(РазмерПакета, "РазмерПакета");
		СписПар.Добавить(ИдентификаторВызова, "ИдентификаторВызова");
		СписПар.Добавить(РазмерТранзакции, "РазмерТранзакции");
		СписПар.Добавить(Отладка, "Отладка");
		ПараметрыВызова = Новый ХранилищеЗначения(СписПар, Новый СжатиеДанных(9));
		ИдВызова 		= mis_LoggerServer.СоздатьИдВызова (ИдВызоваРодитель, Наименование, ВремяВызова, МодульПроцедура, ПараметрыВызова);
		
		ДатаГраницы = ТекущаяДатаСеанса() - Дней * 24*60*60;
		
		mis_LoggerServer.ЗаписатьСообщение(ИДВызова, "Запуск удаления записей лога до " + ДатаГраницы, Перечисления.мис_СтатусыСообщений.Информация, "");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ИндексЛога.Ссылка КАК ИндексЛога
		                      |ПОМЕСТИТЬ ИндексЛога_ВерхнийУровень
		                      |ИЗ
		                      |	Справочник.мис_ИндексЛога КАК ИндексЛога
		                      |ГДЕ
		                      |	ИндексЛога.ВремяВызова < &ДатаГраницы
		                      |	И ИндексЛога.Родитель = ЗНАЧЕНИЕ(Справочник.мис_ИндексЛога.ПустаяСсылка)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ЛогСообщений.Ссылка
		                      |ИЗ
		                      |	Справочник.мис_ЛогСообщений КАК ЛогСообщений
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ИндексЛога.Ссылка КАК Ссылка
		                      |		ИЗ
		                      |			Справочник.мис_ИндексЛога КАК ИндексЛога
		                      |		ГДЕ
		                      |			ИндексЛога.Ссылка В ИЕРАРХИИ
		                      |					(ВЫБРАТЬ
		                      |						ИндексЛога_ВерхнийУровень.ИндексЛога КАК ИндексЛога
		                      |					ИЗ
		                      |						ИндексЛога_ВерхнийУровень КАК ИндексЛога_ВерхнийУровень)) КАК ВложенныйЗапрос
		                      |		ПО ЛогСообщений._Владелец = ВложенныйЗапрос.Ссылка
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ВложенныйЗапрос.Ссылка.ВремяВызова,
		                      |	ЛогСообщений.ДатаВремя
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Рег.Период,
		                      |	Рег.Задание
		                      |ИЗ
		                      |	РегистрСведений.мис_СтатусВыполненияЗаданий КАК Рег
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ИндексЛога.Ссылка КАК ИндексЛога
		                      |		ИЗ
		                      |			Справочник.мис_ИндексЛога КАК ИндексЛога
		                      |		ГДЕ
		                      |			ИндексЛога.ВремяВызова < &ДатаГраницы) КАК ИндексЛога_ВСЕ
		                      |		ПО Рег.ИндексЛога = ИндексЛога_ВСЕ.ИндексЛога
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ИндексЛога.Ссылка
		                      |ИЗ
		                      |	Справочник.мис_ИндексЛога КАК ИндексЛога
		                      |ГДЕ
		                      |	ИндексЛога.ВремяВызова < &ДатаГраницы
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	ИндексЛога.ВремяВызова");
		Запрос.УстановитьПараметр("ДатаГраницы", ДатаГраницы);

		Если НЕ ЗначениеЗаполнено(РазмерПакета) Тогда
			РазмерПакета = 1000;
		КонецЕсли;
		
		СчЗаданий 			= 0;
		СписокКУдалению = Новый СписокЗначений;
		КолВПакете = 0;
		
		Результат = Запрос.ВыполнитьПакет();
		Для Ы = 1 По 3 Цикл
			Выборка = Результат[Ы].Выбрать();
			mis_LoggerServer.ЗаписатьСообщение(ИДВызова, "Статистика", Перечисления.мис_СтатусыСообщений.Информация, "Всего записей в выборке №"+Ы+":" +Выборка.Количество());

			Пока Выборка.Следующий() Цикл
				
				Если Ы = 2 Тогда
					Данные  =  Новый Структура("Период,Задание",Выборка.Период,Выборка.Задание); //заниматься чтением будем в самом конце
					СписокКУдалению.Добавить(Данные);
					КолВПакете=КолВПакете+1;
					ВидМетаданных = "РегистрСведений";
				Иначе
					СписокКУдалению.Добавить(Выборка.Ссылка);
					КолВПакете=КолВПакете+1;
					ВидМетаданных = "Справочник";
				КонецЕсли;
				
				Если КолВПакете >= РазмерПакета Тогда
					ВыполнитьУдалениеПакета(ИдВызова, СписокКУдалению, СчЗаданий, ВидМетаданных,РазмерПакета,РазмерТранзакции,Отладка);
					КолВПакете = 0;
					СписокКУдалению = Новый СписокЗначений;
				КонецЕсли;
			КонецЦикла;
			
			//остаток
			ВыполнитьУдалениеПакета(ИдВызова, СписокКУдалению, СчЗаданий, ВидМетаданных,РазмерПакета,РазмерТранзакции,Отладка);
			СписокКУдалению = Новый СписокЗначений;
		КонецЦикла;

		mis_LoggerServer.ЗаписатьСообщение(ИДВызова, "Завершение", Перечисления.мис_СтатусыСообщений.Информация, "");
		
		Возврат Истина;
		
	Исключение
		
		mis_LoggerServer.ЗаписатьСообщение(ИДВызова, "Критическая ошибка", Перечисления.мис_СтатусыСообщений.КритическаяОшибка, ОписаниеОшибки());
		
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции

Процедура ВыполнитьУдалениеПакета(ИдВызова, Знач СписокКУдалению, СчЗаданий, ВидМетаданных,РазмерПакета,РазмерТранзакции,Отладка)
	СчЗаданий=СчЗаданий+1;
	МассивПараметров = Новый Массив;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокКУдалению", СписокКУдалению);
	СтруктураПараметров.Вставить("СчЗаданий", СчЗаданий);
	СтруктураПараметров.Вставить("ВидМетаданных", ВидМетаданных);
	СтруктураПараметров.Вставить("РазмерТранзакции", РазмерТранзакции);
	СтруктураПараметров.Вставить("Отладка", Отладка);
	
	ИдВызоваФон	= mis_LoggerServer.СоздатьИдВызова (ИдВызова, "Фоновое задание №"+Строка(СчЗаданий), ТекущаяДатаСеанса(),
		"mis_LoggerServer.УдалитьСообщения_Фон", ИдВызова.ПараметрыВызова);
	МассивПараметров.Добавить(ИдВызоваФон);
	МассивПараметров.Добавить(СтруктураПараметров);
	
	Если ксп_Функции.МожноВыполнитьВФоне(Отладка) И (СписокКУдалению.Количество()>=РазмерПакета) Тогда
		
		Задача="Удаление лога сообщений. Задание №"+Строка(СчЗаданий)+", сеанс="+
			Строка(НомерСоединенияИнформационнойБазы());
		ИмяПроцедуры = "mis_LoggerServer.УдалитьСообщения_Фон";
		мис_класс_ФоновыеЗадания
			.ДобавитьФоновоеЗадание(ИдВызова, ИмяПроцедуры, МассивПараметров, Задача, СписокКУдалению.Количество() > 0);
		
	Иначе
		
		// способ вызова для файловой базы
		УдалитьСообщения_Фон(ИдВызоваФон, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьСообщения_Фон(ИдВызоваФон, СтруктураПараметров) Экспорт

	Попытка
		РазмерТранзакции = СтруктураПараметров.РазмерТранзакции;
		ВыполнятьВТранзакции = (РазмерТранзакции > 0) ;
		тран = 0;
		Если ВыполнятьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;
		Ы = 0;
		СписокКУдалению = СтруктураПараметров.СписокКУдалению;
		ВидМетаданных = СтруктураПараметров.ВидМетаданных;
		Для Каждого ТекЗапись Из СписокКУдалению Цикл
			Попытка
				Если ВидМетаданных = "РегистрСведений" Тогда
					Спр = РегистрыСведений.мис_СтатусВыполненияЗаданий.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Спр, ТекЗапись.Значение);
					Спр.Прочитать();
				Иначе
					Спр = ТекЗапись.Значение.ПолучитьОбъект();
					Спр.ОбменДанными.Загрузка = Истина; // (а в запросе отбираем все идвызова,а не только корневые)
				КонецЕсли;
			Исключение
				mis_LoggerServer.ЗаписатьСообщение(ИДВызоваФон, "Ошибка получения объекта " + ТекЗапись.Значение, Перечисления.мис_СтатусыСообщений.Ошибка, ОписаниеОшибки());
			КонецПопытки;
			
			Попытка
				Спр.Удалить();
				Ы = Ы + 1;
			Исключение
				mis_LoggerServer.ЗаписатьСообщение(ИДВызоваФон, "Ошибка удаления объекта " + ТекЗапись.Значение, Перечисления.мис_СтатусыСообщений.Ошибка, ОписаниеОшибки());
			КонецПопытки;
			
			Если ВыполнятьВТранзакции Тогда
				тран = тран + 1;
				Если тран >= РазмерТранзакции Тогда
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;
					НачатьТранзакцию();
					тран = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполнятьВТранзакции И ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		mis_LoggerServer.ЗаписатьСообщение(ИДВызоваФон, "Удалено " + Ы + " записей", Перечисления.мис_СтатусыСообщений.Информация, "");

		Возврат Истина;
		
	Исключение
		
		mis_LoggerServer.ЗаписатьСообщение(ИДВызоваФон, "Критическая ошибка", Перечисления.мис_СтатусыСообщений.КритическаяОшибка, ОписаниеОшибки());
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ()

#КонецОбласти

#Область ТекстовыйЛог

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция КаталогФайловЛогов() Экспорт Возврат ПараметрыСеанса.мис_КаталогФайловЛогов; КонецФункции
 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ИмяФайлаИндексаЛога(ИндексЛога) Экспорт
	
	Если КаталогФайловЛогов() = "" ИЛИ КаталогФайловЛогов() = "\" ИЛИ КаталогФайловЛогов() = "/" Тогда
		Возврат "";
	КонецЕсли;
	Возврат КаталогФайловЛогов()+Строка(ИндексЛога.УникальныйИдентификатор())+".log";
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОткрытьФайлЛога(ИндексЛога) Экспорт
	Если НЕ ЗначениеЗаполнено(ИндексЛога) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяФайлаИндексаЛога(ИндексЛога)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Зап = Новый ЗаписьТекста(ИмяФайлаИндексаЛога(ИндексЛога),,,Истина);
		Возврат Зап;
	Исключение
	    Возврат Неопределено;
	КонецПопытки;
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗаписатьВФайлЛога(ИдВызова, КраткоеОписание, ДетальноеОписание, Уровень)
	Зап = ОткрытьФайлЛога(ИдВызова);
	Если Зап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Зап.Записать(Строка(XMLСтрока(ТекущаяДатаСеанса()))+":::::"+Строка(Уровень)+":::::"+КраткоеОписание+":::::");
	Зап.ЗаписатьСтроку(ДетальноеОписание,);
	Попытка
		Зап.Закрыть();
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Уровень = РегистрыСведений.мис_УровеньЛогов.ТекущийУровеньЛогов();
	Если Уровень = 0 Тогда
		Уровень = 2;// инфо
		РегистрыСведений.мис_УровеньЛогов.УстановитьУровень(Уровень)
	КонецЕсли;
	ПараметрыСеанса.мис_УровеньЛогов = Уровень;
	ПараметрыСеанса.мис_КаталогФайловЛогов = "";
	Если ЗначениеЗаполнено(СокрЛП(ПараметрыСеанса.мис_КаталогФайловЛогов))
		И Прав(СокрЛП(ПараметрыСеанса.мис_КаталогФайловЛогов),1) <> "\" Тогда
		ПараметрыСеанса.мис_КаталогФайловЛогов = СокрЛП(ПараметрыСеанса.мис_КаталогФайловЛогов) + "\";
	КонецЕсли;
	
	Если Метаданные.Константы.Найти("ПараметрыБлокировкиРаботыСВнешнимиРесурсами") <> Неопределено Тогда
		Если РасположениеИнформационнойБазыИзменилось() Тогда
			// На всякий случай предусмотрен этот блок
			// Возможно, здесь будет меняться имя базы для логов в ELK
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

# Область БлокировкаРаботыСВнешнимиРесурсами

Функция ТекущиеПараметрыБлокировки()
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	СтрокаСоединения = ?(РазделениеВключено, "", СтрокаСоединенияИнформационнойБазы());
	ИмяКомпьютера = ?(РазделениеВключено, "", ИмяКомпьютера());
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторБазы", СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	Результат.Вставить("ЭтоФайловаяБаза", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Результат.Вставить("РазделениеВключено", РазделениеВключено);
	Результат.Вставить("СтрокаСоединения", СтрокаСоединения);
	Результат.Вставить("ИмяКомпьютера", ИмяКомпьютера);
	Результат.Вставить("ПроверятьИмяСервера", Истина);
	Результат.Вставить("РаботаСВнешнимиРесурсамиЗаблокирована", Ложь);
	Результат.Вставить("ОтключенныеЗадания", Новый Массив);
	Результат.Вставить("ПричинаБлокировки", "");
	
	Возврат Результат;
	
КонецФункции

Функция СохраненныеПараметрыБлокировки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Сохраненные = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = ТекущиеПараметрыБлокировки();
	
	//Если Сохраненные = Неопределено Тогда 
	//	СохранитьПараметрыБлокировки(Результат); // Автоматическая инициализация.
	//	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
	//		ЗаписатьИдентификаторФайловойБазыВФайлПроверки(Результат.ИдентификаторБазы);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ТипЗнч(Сохраненные) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, Сохраненные); // Переинициализация новых свойств.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасположениеИнформационнойБазыИзменилось()
	
	ПараметрыБлокировки = СохраненныеПараметрыБлокировки();
	
	Если ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Неопределено Тогда
		Возврат Истина; // Установлен признак необходимости принятия решения о блокировке.
	ИначеЕсли ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована = Истина Тогда
		Возврат Истина; // Блокировка работы с внешними ресурсами подтверждена администратором.
	КонецЕсли;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если СтрокаСоединения = ПараметрыБлокировки.СтрокаСоединения Тогда
		Возврат Ложь; // Если строка соединения совпадает, то дальнейшую проверку не выполняем.
	КонецЕсли;
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ПеремещенаМеждуФайловымИКлиентСервернымРежимом = ЭтоФайловаяБаза <> ПараметрыБлокировки.ЭтоФайловаяБаза;
	
	Если ПеремещенаМеждуФайловымИКлиентСервернымРежимом Тогда
		//ТекстСообщения = 
		//	?(ЭтоФайловаяБаза, 
		//		НСтр("ru = 'Информационная база была перемещена из клиент-серверного режима работы в файловый.'"),
		//		НСтр("ru = 'Информационная база была перемещена из файловый режима работы в клиент-серверный.'"));
		//УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	// Ниже код с учетом того, что режим работы не менялся:
	// 1. была файловая осталась файловая;
	// 2. была клиент-серверная осталась клиент-серверная.
	
	Если ЭтоФайловаяБаза Тогда
		
		// Для файловой базы строка соединения может быть разной при подключении с различных компьютеров,
		// поэтому проверку перемещения базы осуществляем через файл проверки.
		
		Если Не ФайлПроверкиИдентификатораФайловойБазыСуществует() Тогда
			//ТекстСообщения = НСтр("ru = 'В каталоге информационной базы отсутствует файл проверки DoNotCopy.txt.'");
			//УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		
		ИзменилсяИдентификаторИнформационнойБазы = ИдентификаторФайловойБазыИзФайлаПроверки() <> ПараметрыБлокировки.ИдентификаторБазы;
		
		Если ИзменилсяИдентификаторИнформационнойБазы Тогда
			//ТекстСообщения = 
			//	НСтр("ru = 'Идентификатор информационной базы в файле проверки DoNotCopy.txt не соответствует идентификатору в текущей базе.'");
			//УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		
	Иначе // Клиент-серверная база
		
		ИмяБазы = НРег(СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).Ref);
		ИмяСервераМенеджераПодключений = НРег(СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).Srvr);
		ИмяСервераРабочегоПроцесса = НРег(ИмяКомпьютера());
		
		СохраненноеИмяБазы =
			НРег(СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПараметрыБлокировки.СтрокаСоединения).Ref);
		СохраненноеИмяСервераМенеджераПодключений =
			НРег(СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ПараметрыБлокировки.СтрокаСоединения).Srvr);
		СохраненноеИмяСервераРабочегоПроцесса = НРег(ПараметрыБлокировки.ИмяКомпьютера);
		
		ИзменилосьИмяБазы = ИмяБазы <> СохраненноеИмяБазы;
		ИзменилосьИмяКомпьютера = ПараметрыБлокировки.ПроверятьИмяСервера
			И ИмяСервераРабочегоПроцесса <> СохраненноеИмяСервераРабочегоПроцесса
			И СтрНайти(СохраненноеИмяСервераМенеджераПодключений, ИмяСервераМенеджераПодключений) = 0;
		
		// В случае масштабируемого кластера СохраненноеИмяСервераМенеджераПодключений может содержать имена
		// нескольких серверов, которые могут выступать в роли менеджера подключения
		// при этом ИмяСервераМенеджераПодключений при запуске сеанса регламентного задания будет содержать имя 
		// текущего активного менеджера. Чтобы обыграть эту ситуацию ищется вхождение текущего в сохраненном имени.
		
		Если ИзменилосьИмяБазы Или ИзменилосьИмяКомпьютера Тогда
			
			//ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//	НСтр("ru = 'Изменились параметры контроля уникальности клиент-серверной базы.
			//	           |
			//	           |Было:
			//	           |Строка соединения: <%1>
			//	           |Имя компьютера: <%2>
			//	           |
			//	           |Стало:
			//	           |Строка соединения: <%3>
			//	           |Имя компьютера: <%4>
			//	           |
			//	           |Проверять имя сервера: <%5>'"),
			//	ПараметрыБлокировки.СтрокаСоединения, 
			//	СохраненноеИмяСервераРабочегоПроцесса,
			//	СтрокаСоединения,
			//	ИмяСервераРабочегоПроцесса,
			//	ПараметрыБлокировки.ПроверятьИмяСервера);
			
			//УстановитьПризнакНеобходимостиПринятияРешенияОБлокировке(ПараметрыБлокировки, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИдентификаторФайловойБазыИзФайлаПроверки()
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуПроверкиИдентификатораФайловойБазы());
	ИдентификаторБазы = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	Возврат ИдентификаторБазы;
	
КонецФункции

Функция ПутьКФайлуПроверкиИдентификатораФайловойБазы()
	
	Возврат ОбщегоНазначенияКлиентСервер.КаталогФайловойИнформационнойБазы() + ПолучитьРазделительПути() + "DoNotCopy.txt";
	
КонецФункции

Функция ФайлПроверкиИдентификатораФайловойБазыСуществует()
	
	ФайлИнфо = Новый Файл(ПутьКФайлуПроверкиИдентификатораФайловойБазы());
	Возврат ФайлИнфо.Существует();
	
КонецФункции

# КонецОбласти

#Область Замер

//	Использование
// 		НачВремя = mis_LoggerServer.НачЗамер();
//		Длительность = mis_LoggerServer.ВремяОпер(НачВремя);
//		Сообщить("Время = "+строка(Длительность)+" мс");

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
// Использование
//	Вариант 1. Без возвращаемого значения.
//		
//	Логгер.НачЗамер();
//	Логгер.Инфо ("Начало отправки.");
//	Логгер.Инфо("Отправка завершена. Время " + Логгер.ВремяОпер());
//
//	Вариант 2. С использованием возвращаемого значения
//
//	ВремяНач = Логгер.НачЗамер();
//	Логгер.Инфо ("Начало отправки.");
//	Логгер.Инфо("Отправка завершена. Время " + Логгер.ВремяОпер(ВремяНач));
//
Функция НачЗамер() Экспорт
	
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецФункции
 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВремяОпер(Знач НачВремя) Экспорт
	
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() - НачВремя;
	
КонецФункции

// Возвращает строку, время операции + " мс", например "1254 мс"
Функция ВремяОперМС(Знач НачВремя = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НачВремя) Тогда
		Возврат "";
	КонецЕсли;
	Возврат Строка(ВремяОпер(НачВремя)) + " мс";
	
КонецФункции

#КонецОбласти

// Подключение в коде
//
	//// переменные модуля
	//Перем Логгер; // обработка  Logger
	//
	//// код для вставки в main-метод класса
	//
	//ПараметрыВызова=Новый СписокЗначений;
	//ПараметрыВызова.Добавить(мДатаНачала,"мДатаНачала");
	//ПараметрыВызова.Добавить(мДатаОкончания,"мДатаОкончания");
	//ПараметрыВызова.Добавить(ОбновитьНестартованные,"ОбновитьНестартованные");
	//мИдВызова = mis_LoggerServer.СоздатьИдВызова(
	//	ИдВызова, 
	//	"Обработка XXX метод YYY. Время запуска "+Строка(ТекущаяДата()), 
	//	ТекущаяДата(), 
	//	ИмяМетода,
	//	ПараметрыВызова);
	//Логгер = mis_LoggerServer.getLogger(мИдВызова);
	//ПараметрыВызова = Неопределено;
	//
	//Логгер.Инфо("Начало загрузки. Период: %1 - %2", Формат(мДатаНачала, "ДФ=dd.MM.yyyy") ,Формат(мДатаОкончания, "ДФ=dd.MM.yyyy"));
	//
	//ВремяНач = Логгер.НачЗамер();
	//
	//Логгер.Инфо("Начало рассылки");
	//
	//ВремяНач = Логгер.НачЗамер();
	//
	//... // действия
	//// Например, можно так передать ИдВызова
	//модуль.метод( Логгер.гетИдВызова() );
	//
	//Логгер.Инфо("Завершение рассылки. Время = %1 мс", Логгер.ВремяОпер(ВремяНач));
	//
	//// Конец код для вставки в main-метод класса

// Конструктор класса
// Параметры
//	ИдВызова - спр ИндексЛога - 
//	ИмяЛога - Строка - используется для генерации имени лога при записи в SQL: 
//		мИмяЛога = СокрЛП(Константы.фдЛогSQLDBName.Получить()) + "." + ИмяЛога;
Function getLogger(Знач ИдВызова = Неопределено, Знач ИмяЛога = Неопределено) Export
	
	Возврат Обработки.мис_Logger.Создать().Конструктор(ИдВызова, ИмяЛога);
	
EndFunction
 
// Конструктор класса
Function гетЛоггер(Знач ИдВызова = Неопределено, Знач ИмяЛога = Неопределено) Export
	
	Возврат Обработки.мис_Logger.Создать().Конструктор(ИдВызова, ИмяЛога);
	
EndFunction

#Область Подсистема_ЛогированиеВОбъектах

// подробнее смотрите в developers guide, глава "Стандартная библиотека Approvals"

// Обработчик события ПриЗаписи() в модуле объекта
Процедура ПриЗаписиОбъекта(ОбъектБД, Отказ) Экспорт
	
	mis_LoggerServer.Информация(ОбъектБД.ИдВызова, "ИНФО", "ПриЗаписи()");
	
КонецПроцедуры

// Обработчик события ПередЗаписью() в модуле объекта
Процедура ПередЗаписьюОбъекта(ОбъектБД, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД.ИдВызова) Тогда
			
		ИдВызоваРодитель=Неопределено;
		Наименование = "Реквизит ИдВызова. Время создания "+Строка(ТекущаяДатаСеанса());
		ВремяВызова = ТекущаяДатаСеанса();
		МодульПроцедура = "mis_LoggerServer.ПередЗаписьюОбъекта()";
		ПараметрыВызова = Неопределено;
		Задание = Неопределено;
			
		ИдВызова = mis_LoggerServer.СоздатьИдВызова(ИдВызоваРодитель, Наименование, ВремяВызова,
			МодульПроцедура, ПараметрыВызова, Задание);
			
		ОбъектБД.ИдВызова = ИдВызова;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриКопировании() в модуле объекта
Процедура ПриКопированииОбъекта(НовыйОбъектБД, ОбъектКопирования) Экспорт
	
	НовыйОбъектБД.ИдВызова = Неопределено;
	
КонецПроцедуры

#КонецОбласти

Процедура ТестАппендеров(Знач ИдВызова) Экспорт
	Логгер = mis_LoggerServer.getLogger(ИдВызова,"AppendersTest");
	Логгер.инфо("тест");

КонецПроцедуры

Функция ВидСообщенияЖР(ВидСообщения) Экспорт
	
	Если ВидСообщения 		= Перечисления.мис_СтатусыСообщений.Информация Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.Ошибка Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.КритическаяОшибка Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.Предупреждение Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли ВидСообщения 	= Перечисления.мис_СтатусыСообщений.Отладка Тогда
		ВидСообщенияЖР 		= УровеньЖурналаРегистрации.Информация;
	Иначе
		ВидСообщенияЖР 			= УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	Возврат ВидСообщенияЖР;
	
КонецФункции
