Функция МожноВыполнитьВФоне(Отладка = Ложь) Экспорт
	
	МожноВыполнитьПараллельно = ПараметрыСеанса.мис_ЭтоСервернаяБаза И (Отладка <> Истина) И НЕ ОбщегоНазначения.РежимОтладки();
	
	Возврат МожноВыполнитьПараллельно;
	
КонецФункции


//СУУ_ЕНС ищет валюту
//Параметры:
//	Наименование 	- строка/число - варианты: 
//										наименование валюты - RUB, RUR, GBP
//										код валюты - 643, 826 - может быть числом
//	Способ 			- число - значения: 1 - поиск по наименованию (USD), 2 - поиск по коду (840)
//Возвращаемое значение:
//	ссылка на справочник Валюты
//
Функция НайтиВалюту(Знач Наименование, Способ=1) Экспорт
	
	Рез = Неопределено;
	Если Способ = 1 Тогда
		//по наименованию (USD, GBP, RUR, RUB)
		Если ВРЕГ(Наименование) = "RUR" ИЛИ ВРЕГ(Наименование) = "RUB" Тогда
			_Наименование = "руб.";
		ИначеЕсли ВРЕГ(Наименование) = "CNH" Тогда
			_Наименование = "CNY";
		ИначеЕсли ВРЕГ(Наименование) = "GBX" Тогда
			_Наименование = "GBP";
		Иначе
			_Наименование = Наименование;
			
		КонецЕсли;
		Рез = Справочники.Валюты.НайтиПоНаименованию(_Наименование, Истина);
		
		if not valueIsFilled(Рез) then
			Рез = Справочники.Валюты.НайтиПоНаименованию(ВРЕГ(Наименование), Истина);
		endif;
	Иначе
		//СУУ_ТЕА - код скорей всего приходит как число и при преобразовании нам нужны лидирующие нули
		КодВалюты = Строка(Наименование);//т.к. код имеет длину 3 символа, то Формат() можно не использовать
		ДлинаКода = СтрДлина(КодВалюты);
		КолНулей = 3-ДлинаКода;
		Для ин=1 По КолНулей Цикл
			КодВалюты= "0" +КодВалюты;
		КонецЦикла;
		
		Если КодВалюты = "810" Тогда // Устаревший код. Но является стандартом при нумерации банковских счетов
			КодВалюты = "643";
		КонецЕсли;
		Рез = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

// Меняет тип колонки из числового в строковый
//
// Параметры:
//	ТЗРекордсет 	- таблица значений - 
//	ИмяКолонки 		- строка - 
//
Процедура КонвертироватьКолонкуВСтроковыйТип(ТЗРекордсет, ИмяКолонки) Экспорт
	
	ИмяВременнойКолонки = "_"+СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","_");
	
	ТЗРекордсет.Колонки.Добавить(ИмяВременнойКолонки,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная), ));
		
	Для Каждого Стрк Из ТЗРекордсет Цикл
		Стрк[ИмяВременнойКолонки] = Формат(Стрк[ИмяКолонки],"ЧГ=;ЧРГ=;ЧРД=");
	КонецЦикла;
	
	ТЗРекордсет.Колонки.Удалить(ТЗРекордсет.Колонки.Найти(ИмяКолонки));
	
	ТЗРекордсет.Колонки.Добавить(ИмяКолонки,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная), ));
		
	Для Каждого Стрк Из ТЗРекордсет Цикл
		Стрк[ИмяКолонки] = Стрк[ИмяВременнойКолонки];
	КонецЦикла;
	
	ТЗРекордсет.Колонки.Удалить(ТЗРекордсет.Колонки.Найти(ИмяВременнойКолонки));
		
КонецПроцедуры

// Выносим данный метод в общий модуль, а не в модуль менеджера справочника,
// потому что справочник типовой и мы не будем его изменять (даже модули)

// Описание_метода
//
// Параметры:
//	ВидКомиссии 	- СправочникСсылка._рарКомиссии - 
//
// Возвращаемое значение:
//	Тип: 	ПланСчетовСсылка.Хозрасчетны / Неопределено
//
Функция СчетРасчетовПоКомиссии(ВидКомиссии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Рег.СчетВзаиморасчетов КАК СчетВзаиморасчетов
		|ИЗ
		|	РегистрСведений._рарСчетаУчетаКомиссий.СрезПоследних(,Комиссия=&Комиссия) КАК Рег";
	
	Запрос.УстановитьПараметр("Комиссия", ВидКомиссии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СчетВзаиморасчетов;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
 
//СУУ_ЕНС генерирует новый номер для реквизитов регистров НомерСвязи
//
//номер состоит из двух частей - это собственно номер (левая часть) и ДатаВремя (правая часть)
//ДатаВремя - это ТекущаяДатаСеанса()
//алгоритм:
//длина номера - это длина строки минус 14 (это длина даты, пример 20131206235959)
//таким образом слева берем количество символов, равное длине номера, преобразуем в число, прибавляем 1
//затем снова преобразуем в строку, соединяем с датой, преобразуем в число и возвращаем как результат
//Параметры:
//	Номер - число, последний номер
//Возвращаемое значение:
//	число, номер связи
//
Функция ПолучитьПоследовательныйНомер(Номер=Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Номер) Тогда ТекДата = ТекущаяДатаСеанса();ДатаВремя = Формат(ТекДата, "ДФ=ггггММдд")+Формат(ТекДата, "ДФ=ЧЧммсс");Возврат Число(Строка(1)+ДатаВремя); КонецЕсли; ЧислоСтрокой=Формат(Номер,"ЧРД=; ЧРГ=; ЧГ=");Возврат Число(строка(число(Лев(ЧислоСтрокой, СтрДлина(ЧислоСтрокой)-14))+1)+Прав(ЧислоСтрокой,14));
	
КонецФункции

// Возвращает организацию, если она одна в базе. Иначе - Неопределено
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПолучитьЕдинственнуюОрганизациюБазыДанных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат Неопределено; КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;

	
КонецФункции

// Проверяет возможность запуска задания.
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОтменитьЗапуск(ИмяМетодаФон, ИмяГлавногоМетода) Экспорт
	
	ОтменитьЗапуск 		= Справочники.мис_СвойстваМетодов.ВключенФлагПрерыванияПроцедуры(ИмяМетодаФон);
	Если ОтменитьЗапуск Тогда
		//клог.варн("Запуск отменен, т.к. включен флаг прерывания метода "+ИмяМетодаФон);
		Возврат Истина;
	КонецЕсли;
		
	ОтменитьЗапуск 		= Справочники.мис_СвойстваМетодов.ВключенФлагПрерыванияПроцедуры(ИмяГлавногоМетода);
	Если ОтменитьЗапуск Тогда
		//клог.варн("Запуск отменен, т.к. включен флаг прерывания метода "+ИмяГлавногоМетода);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Создает кэш видов комиссий для поиска в нем при импорте сделок
//
// Параметры:
//	Нет
// Возвращаемое значение:
//	Тип: таблица значений
//
Функция КэшВидовКомиссий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	_рарКомиссии.Ссылка КАК Ссылка,
		|	_рарКомиссии.Наименование КАК Наименование
		|ИЗ
		|	Справочник._рарКомиссии КАК _рарКомиссии";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	ТЗ.Индексы.Добавить("Наименование");

	Возврат ТЗ;
	
КонецФункции

// Ищет биржевую комиссию в кэше (см. Функция КэшВидовКомиссий()) 
Функция БиржеваяКомиссия(мКэшКомиссий) Экспорт
	
	ПоискСтроки = мКэшКомиссий.Найти("Комиссия биржи BHDWH", "Наименование");
	Возврат ПоискСтроки.Ссылка;
	
КонецФункции

// Ищет брокерскую комиссию в кэше (см. Функция КэшВидовКомиссий()) 
Функция БрокерскаяКомиссия(мКэшКомиссий) Экспорт
	
	ПоискСтроки = мКэшКомиссий.Найти("Комиссия брокера BHDWH", "Наименование");
	Возврат ПоискСтроки.Ссылка;
	
КонецФункции

// Возвращает счет взаиморасчетов из параметров учета ценных бумаг (рег. свед.)
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
//todo сделать прокси в ПовтИсп
Функция СчетВзаиморасчетовСБрокером(Дата, Организация) Экспорт
	
    СчетСБрокером = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
    Запрос = Новый Запрос;
    ЗАпрос.Текст = "ВЫБРАТЬ
                   |	Рег.СчетВзаиморасчетовСБрокером КАК СчетВзаиморасчетовСБрокером
                   |ИЗ
                   |	РегистрСведений._рарПараметрыУчетаЦБ.СрезПоследних(&Период, Организация = &Организация) КАК Рег";
    Запрос.УстановитьПараметр("Период", Дата);
    запрос.УстановитьПараметр("Организация", Организация);
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
		Возврат Выборка.СчетВзаиморасчетовСБрокером;
    КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// ИМПОРТ СДЕЛОК из КХД

//СУУ_ТЕА - заполняем параметры запроса. знаки вопроса в нужном порядке заполнятся значениями
Процедура ИмпортСделокКП_BH_ЗаполнитьПараметрыСпискаСчетов(Параметры,СписокСчетов) Экспорт

     Если ЗначениеЗаполнено(СписокСчетов) Тогда
		Если ТипЗнч(СписокСчетов) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из СписокСчетов Цикл
				
				Если ТипЗнч(Эл.Значение) = Тип("СправочникСсылка.мис_ИсходныеСчета") Тогда
					Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной",
						Число(Эл.Значение.ИдИсхСистемы));
						
				ИначеЕсли ТипЗнч(Эл.Значение) = Тип("Число") Тогда
					Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Эл.Значение);
						
				ИначеЕсли ТипЗнч(Эл.Значение) = Тип("Строка") Тогда
					Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Число(Эл.Значение));
						
				КонецЕсли;
				
			КонецЦикла;
		ИначеЕсли ТипЗнч(СписокСчетов) = Тип("Массив") Тогда
			Для Каждого Эл Из СписокСчетов Цикл
				
				Если ТипЗнч(Эл) = Тип("СправочникСсылка.мис_ИсходныеСчета") Тогда
					Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной",
						Число(Эл.ИдИсхСистемы));
						
				ИначеЕсли ТипЗнч(Эл) = Тип("Число") Тогда
					Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Эл);
						
				ИначеЕсли ТипЗнч(Эл) = Тип("Строка") Тогда
					Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Число(Эл));
						
				КонецЕсли;
				
			КонецЦикла;
		ИначеЕсли ТипЗнч(СписокСчетов) = Тип("СправочникСсылка.мис_ИсходныеСчета") Тогда
			Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной",
				Число(СписокСчетов.ИдИсхСистемы));
			
		ИначеЕсли ТипЗнч(СписокСчетов) = Тип("Число") Тогда
			Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", СписокСчетов);
		ИначеЕсли ТипЗнч(СписокСчетов) = Тип("Строка") Тогда
			//Считаем что задана корректная строка  , пробуем ее превратить в массив
			мСчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокСчетов,",");
			Для Каждого Эл Из мСчета Цикл
  				ИдСчета = Число(Эл);
				Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", ИдСчета);
  			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ИмпортСделокКП_BH_ЗаполнитьПараметрыСпискаТиповОпераций(Параметры,Список) Экспорт
	
     Если ЗначениеЗаполнено(Список) Тогда
		Если ТипЗнч(Список) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из Список Цикл
				Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Эл.Значение.ИсхКод);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Список) = Тип("Массив") Тогда
			Для Каждого Эл Из Список Цикл
				Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Эл.ИсхКод);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Список) = Тип("СправочникСсылка.мис_КлассификаторПеречислений") Тогда
			Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Список.ИсхКод);
			
		ИначеЕсли ТипЗнч(Список) = Тип("Число") Тогда
			Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Список);
			
		ИначеЕсли ТипЗнч(Список) = Тип("Строка") Тогда
			//Считаем что задана корректная строка  , пробуем ее превратить в массив
			массивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Список,",");
			Для Каждого Эл Из массивСтрок Цикл
				Ид = Число(Эл);
				Обработки.мис_AdoConnection.СУУ_ДобавитьПараметрВТЗ(Параметры, ,"Число", ,	"Входной", Ид);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает курс из комментария вида "Из RUR 1,950.48 в USD 27.00 по курсу 72.24"
//
// Параметры:
//	Коммент 	- строка - комментарий
//
// Возвращаемое значение:
//	Тип: число
//
Функция ПолучитьКурсКонвертацииИзКомментарияДенТранз(Знач Коммент) Экспорт
	
	// пример комментария
	// "Из RUR 1,950.48 в USD 27.00 по курсу 72.24"
	
	Коммент = СокрЛП(Коммент);
	
	Старт = СтрНайти(Коммент, "по курсу");
	Если Старт = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Коммент = Сред(Коммент, Старт);
	Масс 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Коммент);
	Если Масс.Количество() <> 3 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Число(Масс[2]);
	
КонецФункции
 
// Возвращает тип сделки в исходной системе
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ТипСвязаннойСделки(КодВнешнейСистемы, IDСвязаннойСделки, IDТорговойПлощадки) Экспорт
	
	Рез = Неопределено;
	
	Если IDТорговойПлощадки = "17" Тогда//ВР МБ
		
		Рез = ТипСвязаннойСделкиСВОП(КодВнешнейСистемы, IDСвязаннойСделки);
		
	Иначе
		
		Рез = ТипСвязаннойСделкиРЕПО(КодВнешнейСистемы, IDСвязаннойСделки);
		Если НЕ ЗначениеЗаполнено(Рез) Тогда
			Рез = ТипСвязаннойСделкиСВОП(КодВнешнейСистемы, IDСвязаннойСделки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ТипСвязаннойСделкиРЕПО(КодВнешнейСистемы, IDСвязаннойСделки) Экспорт
	
	ИсходнаяСистема = мис_ФункцииПовтИсп.НайтиВидПоляИсходнойСистемы(КодВнешнейСистемы,"client_trades","IDсделки");
	
	Если НЕ ЗначениеЗаполнено(ИсходнаяСистема) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Рег.ТипВИсходнойСистеме КАК ТипВИсходнойСистеме
		|ИЗ
		|	РегистрСведений.мис_ВнешниеИдентификаторы_рарОперацииЦБ КАК Рег
		|ГДЕ
		|	Рег.ИД = &ИД
		|	И Рег.ИсходнаяСистема = &ИсходнаяСистема";
	
	Запрос.УстановитьПараметр("ИД", IDСвязаннойСделки);
	Запрос.УстановитьПараметр("ИсходнаяСистема", ИсходнаяСистема);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ТипВИсходнойСистеме;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипСвязаннойСделкиСВОП(КодВнешнейСистемы, IDСвязаннойСделки) Экспорт
	
	ИсходнаяСистема2 = мис_ФункцииПовтИсп.НайтиВидПоляИсходнойСистемы(КодВнешнейСистемы,"client_trades_fx_swap","ИДОперации");
	Если НЕ ЗначениеЗаполнено(ИсходнаяСистема2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Рег.ТипВИсходнойСистеме КАК ТипВИсходнойСистеме
		|ИЗ
		|	РегистрСведений.мис_ВнешниеИдентификаторы_рарСделкаСВОП КАК Рег
		|ГДЕ
		|	Рег.ИД = &ИД
		|	И Рег.ИсходнаяСистема = &ИсходнаяСистема";
	
	Запрос.УстановитьПараметр("ИД", IDСвязаннойСделки);
	Запрос.УстановитьПараметр("ИсходнаяСистема", ИсходнаяСистема2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ТипВИсходнойСистеме;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СвязаннаяСделкаДляДенТранзакции(КодВнешнейСистемы, IDСвязаннойСделки, IDТорговойПлощадки) Экспорт
	
	Рез = Неопределено;
	
	Если IDТорговойПлощадки = "17" Тогда //ВР МБ
		
		Рез = СвязаннаяСделкаДляДенТранзакцииСВОП(КодВнешнейСистемы, IDСвязаннойСделки);
		Если НЕ ЗначениеЗаполнено(Рез) Тогда
			Рез = СвязаннаяСделкаДляДенТранзакцииFX(КодВнешнейСистемы, IDСвязаннойСделки);
		КонецЕсли;
		
	Иначе
		
		Рез = СвязаннаяСделкаДляДенТранзакцииРЕПО(КодВнешнейСистемы, IDСвязаннойСделки);
		Если НЕ ЗначениеЗаполнено(Рез) Тогда
			Рез = СвязаннаяСделкаДляДенТранзакцииСВОП(КодВнешнейСистемы, IDСвязаннойСделки);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Рез) Тогда
			Рез = СвязаннаяСделкаДляДенТранзакцииFX(КодВнешнейСистемы, IDСвязаннойСделки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция СвязаннаяСделкаДляДенТранзакцииРЕПО(КодВнешнейСистемы, ID) Экспорт
	
	ИсходнаяСистема = мис_ФункцииПовтИсп.НайтиВидПоляИсходнойСистемы(КодВнешнейСистемы,"client_trades","IDсделки");
	
	Если НЕ ЗначениеЗаполнено(ИсходнаяСистема) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.мис_ВнешниеИдентификаторы_рарОперацииЦБ.НайтиСделкуПоИД(
		ИсходнаяСистема, ID);
	
КонецФункции

Функция СвязаннаяСделкаДляДенТранзакцииСВОП(КодВнешнейСистемы, ID) Экспорт
	
	ИсходнаяСистема = мис_ФункцииПовтИсп.НайтиВидПоляИсходнойСистемы(КодВнешнейСистемы,"client_trades_fx_swap","ИДОперации");
	Если НЕ ЗначениеЗаполнено(ИсходнаяСистема) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.мис_ВнешниеИдентификаторы_рарСделкаСВОП.НайтиСделкуПоИД(
		ИсходнаяСистема, ID);
		
КонецФункции

Функция СвязаннаяСделкаДляДенТранзакцииFX(КодВнешнейСистемы, ID) Экспорт
	
	ИсходнаяСистема = мис_ФункцииПовтИсп.НайтиВидПоляИсходнойСистемы("BrokerOtkritie","client_trades_fx_swap","DealNum");
	Если НЕ ЗначениеЗаполнено(ИсходнаяСистема) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Документы.мис_КонвертацияВалюты.НайтиСделкуПоИД(
		ИсходнаяСистема, ID);
		
КонецФункции

Процедура ПровестиРЕПО_нога2_второй_уровень(Знач ИДВызова, ТЗРекордсет, НомерЗадания, ДопПараметры) Экспорт

	Обработки.мис_ПроведениеДокументовЗаПериод
		.Создать()
		.ПровестиРЕПО_нога2_второй_уровень(ИДВызова, ТЗРекордсет, НомерЗадания, ДопПараметры);

КонецПроцедуры
                                                                                                           
Процедура ПровестиРЕПО_нога1_второй_уровень(Знач ИДВызова, ТЗРекордсет, НомерЗадания, ДопПараметры) Экспорт

	Обработки.мис_ПроведениеДокументовЗаПериод
		.Создать()
		.ПровестиРЕПО_нога1_второй_уровень(ИДВызова, ТЗРекордсет, НомерЗадания, ДопПараметры);

КонецПроцедуры
 
Функция ПолучитьПервуюНогуРЕПО(ДокСсылка) Экспорт

	ПерваяНога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "Ссылка.СделкаЧасть1");
	Если ЗначениеЗаполнено(ПерваяНога) Тогда
		Возврат ПерваяНога;
	Иначе
		Возврат ДокСсылка;
	КонецЕсли;

КонецФункции

Функция ПолучитьДокументДопНачисления(Дата, Организация, ВидНачисления) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	мис_ДопНачисления.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.мис_ДопНачисления КАК мис_ДопНачисления
		|ГДЕ
		|	мис_ДопНачисления.Дата = &Дата
		|	И мис_ДопНачисления.Организация = &Организация
		|	И мис_ДопНачисления.ВидНачисления = &ВидНачисления
		|	И мис_ДопНачисления.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидНачисления", ВидНачисления);
	Запрос.УстановитьПараметр("ПометкаУдаления", ЛОЖЬ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьДокументДопНачисления(Дата, Организация, ВидНачисления) Экспорт

	ДокСсылка = ПолучитьДокументДопНачисления(Дата, Организация, ВидНачисления);
	Если ДокСсылка = Неопределено Тогда
		
		ДокОбъект = Документы.мис_ДопНачисления.СоздатьДокумент();
		ДокОбъект.Дата = НачалоДня(Дата);
		ДокОбъект.Организация = Организация;
        ДокОбъект.ВидНачисления = ВидНачисления;
		
	Иначе
		
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		//ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
	КонецЕсли;
	
	ДокОбъект.LogMoment = ТекущаяДатаСеанса();
	
	ДокОбъект.Записать();
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ВидОперацииПарам - Перечисления._рарВидыОперацийЦБ
//	РежимТорговПарам - Справочники._рарРежимыТоргов - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЭтоЗаймЦБ(ВидОперацииПарам, РежимТорговПарам) Экспорт
	
	//+Елисеев Н.С. open.ru 08.09.2021	
	Если 	РежимТорговПарам = Справочники._рарРежимыТоргов.ТПлюс И
		(ВидОперацииПарам = Перечисления._рарВидыОперацийЦБ.ЗачислениеБумаг
			ИЛИ
		ВидОперацииПарам = Перечисления._рарВидыОперацийЦБ.СписаниеБумаг) Тогда

		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЭтоОперацияЦБ(Регистратор) Экспорт
	Возврат ТипЗнч(Регистратор) = Тип("ДокументСсылка._рарОперацииЦБ")
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументОбъект._рарОперацииЦБ");
КонецФункции

Процедура мис_ПлатежноеПоручениеПриЗаписи(Источник, Отказ) Экспорт
	ТекСтатус = РегистрыСведений.мис_ХодСогласования.ТекущийСтатус(Источник.Ссылка);
	Если НЕ ЗначениеЗаполнено(ТекСтатус) Тогда
		РегистрыСведений.мис_ХодСогласования.ДобавитьЗапись(Источник.Ссылка, Перечисления.мис_СтатусыСогласования.Новая);
	КонецЕсли;
КонецПроцедуры

// Заполняет документ ДооценкаНКД
// Параметры
//	Объект - ДокументОбъект._рарДооценкаНКД
Процедура мис_ЗаполнитьТабличнуюЧастьНКДНаСервере(Объект) Экспорт
	//+ Фоминский А.В. open.ru 18.08.2021
	Объект.НакопленныйКупонныйДоход.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ЦеннаяБумага,
	|	ХозрасчетныйОстатки.Субконто1.ВалютаНоминала КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЦенныеБумагиКупоны.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЦенныеБумагиКупоны.ДатаВыпуска, &ДатаДок, ДЕНЬ) * ЦенныеБумагиКупоны.Сумма / ЦенныеБумагиКупоны.ДнейВПериоде
	|	КОНЕЦ КАК НКД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Граница, Счет.Код = ""58.20.1"" ИЛИ Счет.Код = ""58.20.1В"",,) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦенныеБумаги.Купоны КАК ЦенныеБумагиКупоны
	|		ПО (ХозрасчетныйОстатки.Субконто1 = ЦенныеБумагиКупоны.Ссылка)
	|			И (ЦенныеБумагиКупоны.ДатаВыпуска < &ДатаДок И ЦенныеБумагиКупоны.ДатаПогашения >= &ДатаДок)
    |
	|УПОРЯДОЧИТЬ ПО
	|	Субконто1";
	
	Парам = Новый Массив(2);
	Парам[0] = НачалоДня(Объект.Дата);
	Парам[1] = ВидГраницы.Исключая;
	Граница = Новый(Тип("Граница"),Парам);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ДатаДок", НачалоДня(Объект.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = Объект.НакопленныйКупонныйДоход.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
	//- Фоминский А.В. open.ru 18.08.2021 
КонецПроцедуры

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МодульЧисла(Знач ПарамЧисло) Экспорт
	Если ТипЗнч(ПарамЧисло)<> Тип("Число") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ?(ПарамЧисло<0,-1,1)*ПарамЧисло;
КонецФункции

// Параметры
//	Список - список значений - в этот список добавляются счета из плана счетов
Функция ЗаполнитьСписокСчетами(Список,СчетаСтрокой) ЭКспорт
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СчетаСтрокой,",");
	Для Каждого Элемент Из МассивПодстрок Цикл
		Список.Добавить(мис_ФункцииПовтИсп.СчетПоКоду(СокрЛП(Элемент)));
	КонецЦикла;
		
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ТипВидЦБДляОтчетаЕОБЦБ(ТипЦБ, ВидЦБ) Экспорт
		
	Возврат Строка(ТипЦБ)+", "+Строка(ВидЦБ);
	
КонецФункции

// Возвращает первую попавшуюся котировку ценной бумаги.
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция РыночнаяКотировка(Дата, ЦеннаяБумага) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	_рарКотировки.last_price КАК last_price,
		|	_рарКотировки.ВалютаКотировки КАК ВалютаКотировки,
		|	_рарКотировки.Биржа КАК Биржа
		|ИЗ
		|	РегистрСведений._рарКотировки.СрезПоследних(&Период, ЦеннаяБумага = &ЦеннаяБумага) КАК _рарКотировки";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ЦеннаяБумага", ЦеннаяБумага);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Новый Структура("Котировка,Валюта,Биржа",
			Выборка.last_price,
			Выборка.ВалютаКотировки,
			Выборка.Биржа
			);
	КонецЦикла;

	Возврат Новый Структура("Котировка,Валюта,Биржа",
			0,
			Неопределено,
			Неопределено
			);
	
КонецФункции

// Возвращает элемент коллекции по ключу. Используется в отчетах
//
Функция СвойствоОбъекта(Элемент,Ключ) Экспорт
	Возврат Элемент[Ключ];
КонецФункции

//СУУ_ТЕА - возвращает таблицу с разбивкой периода по месяцам
//Параметры:
//	ИдВызова
//	ДатаНачала
//	ДатаОкончания
//	Разбивать - если Ложь, тогда возвращается ТЗ с одной строкой без разбивки по месяцам.
//Возвращаемое значение:
//	ТаблицаЗначений
Функция РазбитьПериодПомесячно(Знач ДатаНачала,Знач ДатаОкончания,Разбивать=Истина) Экспорт
	ТЗПериоды = Новый ТаблицаЗначений;
	ТЗПериоды.Колонки.Добавить("ДатаНачала");
	ТЗПериоды.Колонки.Добавить("ДатаОкончания");
	ТЗПериоды.Колонки.Добавить("Последний");
	
	Если Не Разбивать Тогда
		НовПериод               = ТЗПериоды.Добавить();
		НовПериод.ДатаНачала    = ДатаНачала;
		НовПериод.ДатаОкончания = ДатаОкончания;
		НовПериод.Последний     = Истина;
	Иначе
		ТекНачалоПериода = ДатаНачала;
		ТекКонецПериода  = НачалоДня(КонецМесяца(ДатаНачала));
		
		Пока ТекКонецПериода <= ДатаОкончания Цикл
			НовПериод               = ТЗПериоды.Добавить();
			НовПериод.ДатаНачала    = ТекНачалоПериода;
			НовПериод.ДатаОкончания = ТекКонецПериода;
			НовПериод.Последний     = Ложь;
			
			ТекНачалоПериода = НачалоДня(ТекКонецПериода+86400);
			ТекКонецПериода  = НачалоДня(КонецМесяца(ТекНачалоПериода));
		КонецЦикла;
		
		Если ТекНачалоПериода <= ДатаОкончания Тогда
			НовПериод               = ТЗПериоды.Добавить();
			НовПериод.ДатаНачала    = ТекНачалоПериода;
			НовПериод.ДатаОкончания = ДатаОкончания;
			НовПериод.Последний     = Истина;
		Иначе
			ТЗПериоды[ТЗПериоды.Количество()-1].Последний = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТЗПериоды;
КонецФункции

// Добавляет строку в ТЧ "СУУ_ИсхРеквизиты" с проверкой существования
// Параметры:
//	ИсхРеквизиты		- ТЧ "СУУ_ИсхРеквизиты" - 
//	ИсходнаяСистема		- строка
//	ИсхОбъект			- строка
//	ИмяПоля				- строка
//	ЗначениеПоля		- любой допустимый
//	
Процедура ДобавитьИсходныйРеквизит(ИсхРеквизиты,ИсходнаяСистема,ИсхОбъект,ИмяПоля,ЗначениеПоля) Экспорт
	
	// найти исх реквизит
	ИдВызова	= Неопределено;
	ВидПоля 	= sf_funCached.СУУ_НайтиВидПоляИсхСистемыПИ(
		ИдВызова, ИсходнаяСистема, ИсхОбъект, ИмяПоля);
	мис_Ассерты.ПараметрИмеетНужныйТипИЗаполнен(
		"ПланВидовХарактеристикСсылка.СУУ_ПоляИсхСистем", ВидПоля, "ИсхОбъект","Не найдено поле исходной системы "+ИсхОбъект);
	СтрокаТЧ 	= ИсхРеквизиты.Найти(ВидПоля, "ИсхРеквизит");
	
	Если СтрокаТЧ = Неопределено Тогда
		НовСтрока = ИсхРеквизиты.Добавить();
		НовСтрока.ИсхРеквизит = ВидПоля;
		НовСтрока.Значение    = ЗначениеПоля;
	Иначе
		// строка уже есть -> заменяем значение
		СтрокаТЧ.Значение    = ЗначениеПоля;
	КонецЕсли;
		
КонецПроцедуры

// Ищет код фин инструмента в таблице КодыФИ
// Параметры
//	ТипКода - Перечисления.ТипКодаФинИнструмента - например, ISIN
//	Объект - объект спр Фин инструменты - можно и ссылку, но лучше объект
Функция НайтиКодФИВТаблицеОбъектаКодыФИ(Объект, ТипКода) Экспорт
	
	стрк = Объект.СУУ_КодыФИ.Найти(ТипКода, "ТипКода");
	Если стрк <> Неопределено Тогда
		Возврат стрк.значение;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции
 

// Возвращает валютную пару в виде строки, напр. "USD/RUB"
//
// Параметры:
//	_ОбъектJSON 	- структура или соотв - 
//
// Возвращаемое значение:
//	Тип: строка, пример: USD/RUB; пустая, если не найдено
//
Функция ПолучитьВалютнуюПаруИзСделкиFX(_ОбъектJSON) Экспорт
	arr = _ОбъектJSON.product.definition.currencyPair.identifier;
	Для каждого элем Из arr Цикл
		Если элем.skbJavaType = "Identifier" И элем.code = "convention" Тогда
			Возврат элем.codifier;
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат "";
	
КонецФункции


Функция ПолучитьПометкуУдаленияДокумента(ВидДокумента, ДокументСсылка) Экспорт
		
		СтараяПометка = Ложь;
		Запрос = Новый Запрос("Выбрать ПометкаУдаления из Документ."+ВидДокумента+" Где Ссылка=&Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ЗапРез = Запрос.Выполнить();
		Выборка = ЗапРез.Выбрать();
		Если Выборка.Следующий() Тогда
			СтараяПометка = Выборка.ПометкаУдаления;
		КонецЕсли; 
		Возврат СтараяПометка;
		
КонецФункции




// https://sinfin.myjetbrains.com/youtrack/issue/1C-52/http-service-Statisctics-for-Grafana
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция БазоваяСтатистикаДляГрафаны(Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
	Иначе 
		ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоМесяца(ДатаОкончания);
	Иначе 
		ДатаНачала = НачалоДня(ДатаНачала);
	КонецЕсли;
		
	Рез = Новый Структура;
	Рез.Вставить("processingOrg", "SFCCY");                //todo переделать на константу
	Рез.Вставить("reportType", "Basic statictics");
	Рез.Вставить("dateStart", XMLСтрока(ДатаНачала));
	Рез.Вставить("dateEnd", XMLСтрока(ДатаОкончания));
	Рез.Вставить("trades", 0);
	Рез.Вставить("transfers", 0);
	
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJson, рез);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
КонецФункции



// https://sinfin.myjetbrains.com/youtrack/issue/1C-52/http-service-Statisctics-for-Grafana
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СтатистикаПоСделкамДляГрафаны(Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	objectList = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
	Иначе 
		ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоМесяца(ДатаОкончания);
	Иначе 
		ДатаНачала = НачалоДня(ДатаНачала);
	КонецЕсли;
	
	Рез = Новый Структура;
	Рез.Вставить("processingOrg", "SFCCY");                //todo переделать на константу
	Рез.Вставить("reportType", "Detailed statictics");
	Рез.Вставить("dateStart", XMLСтрока(ДатаНачала));
	Рез.Вставить("dateEnd", XMLСтрока(ДатаОкончания));
	Рез.Вставить("dataType", "trades");
	Рез.Вставить("totalCount", 0);
	Рез.Вставить("objectList", objectList);
	

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.ИдИсхСистемы КАК ИдИсхСистемы,
		|	МАКСИМУМ(естьNull(РС.CalypsoVersion,0)) КАК CalypsoVersion
		|ИЗ
		|	Документ.СУУ_СделкаКП КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.sf_ЛогИзменений_СделкаКП КАК РС
		|		ПО (РС.Операция = Док.Ссылка)
		|ГДЕ
		|	Док.Дата >= &ДатаНачала
		|	И Док.Дата <= &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.ИдИсхСистемы";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	ЭталоннаяСтруктура = Новый Структура("id,version","",0);
	ЭталоннаяСтруктураСтрк = ЗначениеВСтрокуВнутр(ЭталоннаяСтруктура);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		стрк 		= ЗначениеИзСтрокиВнутр(ЭталоннаяСтруктураСтрк);
		стрк.id 	= ВыборкаДетальныеЗаписи.ИдИсхСистемы;
		стрк.version= ВыборкаДетальныеЗаписи.CalypsoVersion;
		
		objectList.Добавить(стрк);
	КонецЦикла;
	
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJson, рез);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;//"trades stat "+Строка(ТекущаяДатаСеанса());

КонецФункции


// выполняет http GET-запрос, результат выводит в лог
//
// Параметры:                                    
//	Сервер - строка - например https://yandex.ru
//	Порт - число
//	Пользователь, Пароль, 
//	ИспользоватьSSL - булево - 
//	ТекстЗапроса 	- строка - например "/showStat"
//
Функция ВыполнитьHttpGetЗапрос(Знач ИдВызова, Сервер, Порт, Пользователь, Пароль, ИспользоватьSSL, ТекстЗапроса) экспорт
	
	ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
	
	лог = мис_ЛоггерСервер.гетЛоггер(ИдВызова);                  
	
	Попытка
		Если ИспользоватьSSL Тогда
			SSL = Новый ЗащищенноеСоединениеOpenSSL();
		Иначе 
			SSL = Неопределено;
		КонецЕсли;
		Соединение = Новый HTTPСоединение(Сервер,порт,Пользователь,Пароль,,,SSL);
		
		лог.инфо("Server: "+строка(Сервер));
		лог.инфо("Port: "+строка(Порт));
		лог.инфо("SSL: "+строка(ИспользоватьSSL));
		лог.инфо("Query: "+строка(ТекстЗапроса));
		
		
	  	Запрос = Новый HTTPЗапрос(ТекстЗапроса);

		//Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	 
	    Результат = Соединение.Получить(Запрос);
	 
		Если Результат.КодСостояния <> 200 Тогда
			лог.Ерр("Error while executing http-request. Status: " + Результат.КодСостояния
				+Символы.ПС+"Текст запроса:"+Символы.ПС+ТекстЗапроса);
				
		КонецЕсли;
	    
	    json = Результат.ПолучитьТелоКакСтроку(); 
		
		
		
		лог.инфо("Response: "+строка(json));
		
		лог.инфо("finished: time: "+строка(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНач )+" ms");
		
		Возврат json;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		лог.Ерр("Error while executing ВыполнитьHttpGetЗапрос() "
			+Символы.ПС+"Details: " + т);
	КонецПопытки;
		
КонецФункции

// выполняет http POST-запрос, результат выводит в лог
//
// Параметры:                                    
//	Сервер - строка - например https://yandex.ru
//	Порт - число
//	Пользователь, Пароль, 
//	ИспользоватьSSL - булево - 
//	ТекстЗапроса 	- строка - например "/showStat"
//	ТелоЗапроса 	- строка - 
//
Функция ВыполнитьHttpPostЗапрос(Знач ИдВызова, Сервер, Порт, Пользователь, Пароль, ИспользоватьSSL, ТекстЗапроса, ТелоЗапроса) экспорт
	
	ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
	
	лог = мис_ЛоггерСервер.гетЛоггер(ИдВызова);                  
	
	Попытка
		Если ИспользоватьSSL Тогда
			SSL = Новый ЗащищенноеСоединениеOpenSSL();
		Иначе 
			SSL = Неопределено;
		КонецЕсли;
		Соединение = Новый HTTPСоединение(Сервер,порт,Пользователь,Пароль,,,SSL);

		
	  	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
		
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);

		//Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	 
	    Результат = Соединение.ОтправитьДляОбработки(Запрос);
	 
		Если Результат.КодСостояния <> 200 Тогда
			лог.Ерр("Error while executing http-request. Status: " + Результат.КодСостояния
				+Символы.ПС+"Текст запроса:"+Символы.ПС+ТекстЗапроса);
				
		КонецЕсли;
	    
	    json = Результат.ПолучитьТелоКакСтроку(); 
		
		лог.инфо("Response: "+строка(json));
		
		лог.инфо("finished: time: "+строка(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНач )+" ms");
		
		Возврат json;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		лог.Ерр("Error while executing ВыполнитьHttpPostЗапрос() "
			+Символы.ПС+"Details: " + т);
	КонецПопытки;
		
КонецФункции



Функция СтатистикаПоСделкам(Знач ИдВызова, Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
	
	лог = мис_ЛоггерСервер.гетЛоггер(ИдВызова);
	
	Попытка
		
       	Если ЗначениеЗаполнено(Организация) И ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
			ВызватьИсключение "В параметре Организация передано значение другого типа!";
		КонецЕсли;

		
	Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Док_.ТипСделкиВИсходнойСистеме КАК ТипСделкиВИсходнойСистеме,
			|	Док_.ИдИсхСистемы КАК ИдИсхСистемы
			|ИЗ
			|	Документ.sf_TradeWithDerivatives КАК Док_
			|ГДЕ
			|	&УсловиеКомпанияУчета
			|	И &УсловиеДатаНачала
			|	И &УсловиеДатаОкончания
			|
			|union all
			|
			|ВЫБРАТЬ
			|	Док_.ТипСделкиВИсходнойСистеме КАК ТипСделкиВИсходнойСистеме,
			|	Док_.ИдИсхСистемы КАК ИдИсхСистемы
			|ИЗ
			|	Документ.СУУ_ВалютаКП КАК Док_
			|ГДЕ
			|	&УсловиеКомпанияУчета
			|	И &УсловиеДатаНачала
			|	И &УсловиеДатаОкончания
			|
			//|union all
			//|
			//|ВЫБРАТЬ
			//|	Док_.ТипСделкиВИсходнойСистеме КАК ТипСделкиВИсходнойСистеме,
			//|	Док_.ИдИсхСистемы КАК ИдИсхСистемы
			//|ИЗ
			//|	Документ.СУУ_Займ КАК Док_
			//|ГДЕ
			//|	&УсловиеКомпанияУчета
			//|	И &УсловиеДатаНачала
			//|	И &УсловиеДатаОкончания
			|
			|union all
			|
			|ВЫБРАТЬ
			|	Док_.ТипСделкиВИсходнойСистеме КАК ТипСделкиВИсходнойСистеме,
			|	Док_.ИдИсхСистемы КАК ИдИсхСистемы
			|ИЗ
			|	Документ.СУУ_ОперацияБезДанных КАК Док_
			|ГДЕ
			|	&УсловиеКомпанияУчета
			|	И &УсловиеДатаНачала
			|	И &УсловиеДатаОкончания
			|
			|union all
			|
			|ВЫБРАТЬ
			|	Док_.ТипСделкиВИсходнойСистеме КАК ТипСделкиВИсходнойСистеме,
			|	Док_.ИдИсхСистемы КАК ИдИсхСистемы
			|ИЗ
			|	Документ.СУУ_СделкаКП КАК Док_
			|ГДЕ
			|	&УсловиеКомпанияУчета
			|	И &УсловиеДатаНачала
			|	И &УсловиеДатаОкончания
			|
			|union all
			|
			|ВЫБРАТЬ
			|	Док_.ТипСделкиВИсходнойСистеме КАК ТипСделкиВИсходнойСистеме,
			|	Док_.ИдИсхСистемы КАК ИдИсхСистемы
			|ИЗ
			|	Документ.СУУ_СделкаРЕПО КАК Док_
			|ГДЕ
			|	&УсловиеКомпанияУчета
			|	И &УсловиеДатаНачала
			|	И &УсловиеДатаОкончания
			|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("КомпанияУчета", Организация);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКомпанияУчета", "Док_.КомпанияУчета = &КомпанияУчета");			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКомпанияУчета", "1=1");
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Insert selected data processing ВыборкаДетальныеЗаписи
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		лог.инфо("finished: time: "+строка(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНач )+" ms");
		
	Исключение
		т = ОписаниеОшибки();
	    лог.ерр("ошибка: "+строка(т));
	КонецПопытки;
	
	
	
	
КонецФункции



