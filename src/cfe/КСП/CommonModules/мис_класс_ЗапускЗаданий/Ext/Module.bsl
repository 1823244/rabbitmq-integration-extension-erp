
#Область ПрограммныйИнтерфейс

//@proxy мис_УправлениеЗаданиямиСервер.ЗапуститьГруппуВФоне()
// Обработчик регл задания. Старое имя - ЗапускГруппыЗаданий
// Запускает группу справочника мис_УправлениеЗаданиями на выполнение.
// Параметры
//	Контекст - структура
//		* Ссылка 				- СправочникСсылка.tm_УправлениеЗаданиями
//		* ЗапускИзСправочника 	- булево - флаг того, что был интерактивный запуск, а не через регл задание
//		* Ключ 					- строка - уникальный ключ задания
//		* ЭтоЦепочка 			- булево - есть задание в реквизите "СледующаяПроцедура"
//											Похоже, что не используется
//		* ОбщиеПараметры		- структура - общие параметры, заданные через форму общих параметров справочника мис_УправлениеЗаданиями.
//											Актуально только для группы.
//
Процедура ЗапуститьГруппуВФоне(Контекст) Экспорт
	
	//СУУ_ЕНС 19.12.2020 закомментировано ниже, т.к. это расширение, в нем нельзя создавать свои регл задания 
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.мис_Планировщик);
		
	ИдВызова = СоздатьИдВызоваЗапускГруппы(Контекст);
	
	клог = мис_ЛоггерСервер.getLogger(ИДВызова, "ЗапускГруппыЗаданий");
	
	Если НЕ РазрешенЗапускГруппыЗаданий(клог, Контекст)  Тогда
		Возврат;
	КонецЕсли;
	
	Ключ                = ПолучитьСвойствоКонтекста(Контекст,"Ключ"               ,"Строка");
	//ЭтоЦепочка          = ПолучитьСвойствоКонтекста(Контекст,"ЭтоЦепочка"         ,"Булево");
	ОбщиеПараметры		= ПолучитьСвойствоКонтекста(Контекст,"ОбщиеПараметры"	  ,"Структура"); //те, что вводятся в форме общих параметров
	
	Если НЕ ЗначениеЗаполнено(ОбщиеПараметры) Тогда
		ОбщиеПараметры = Неопределено;
	КонецЕсли;
	
	клог.инфо("Запуск обработчика регламентных заданий.");
	
	Попытка
		
		ЗаданиеСсылка 	= ПолучитьСвойствоКонтекста(Контекст,"Ссылка" ,"СправочникСсылка.мис_УправлениеЗаданиями");
		ЕстьСледующий 	= ЗначениеЗаполнено(ЗаданиеСсылка.СледующаяПроцедура);
		ПервыйВЦепочке 	= Истина;
		
		Пока ЕстьСледующий ИЛИ ПервыйВЦепочке Цикл
			
			ПервыйВЦепочке = Ложь;
			
			// Проверим константу в справочнике константы процедур. Нужно проверять все задания по цепочке
			Если мис_УправлениеЗаданиямиСлужебный.ЕстьЗапретНаЗапускРегламентногоЗадания() Тогда
				клог.Инфо("Обработка регламентных заданий завершена. Обнаружен запрет на запуск регл. заданий");
				Прервать;
			КонецЕсли;
			
			ЗапускИзСправочника = ПолучитьСвойствоКонтекста(Контекст,"ЗапускИзСправочника","Булево"); // Нужно чтобы понять что запуск из справочника и не надо делать проверок по недельному расписанию
			Если ЗапускИзСправочника = Ложь И НЕ РазрешенЗапускПоУсловиям(ЗаданиеСсылка) Тогда
				// запуск задания запрещен по дополнительным условиям
				
				// переопределить текущее задание и уйти на новую итерацию
				ЕстьСледующий = ЗначениеЗаполнено(ЗаданиеСсылка.СледующаяПроцедура);
				Если ЕстьСледующий Тогда
					ЗаданиеСсылка = ЗаданиеСсылка.СледующаяПроцедура;
				КонецЕсли;
				
				клог.Инфо("Пропущен запуск группы """+ЗаданиеСсылка.Наименование+""", т.к. не разрешен по условиям");
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЗаданиеСсылка.Активность Тогда
				Продолжить;
			КонецЕсли;
				
			//Это сообщение вяжем к корню
			клог.Инфо(">> Запуск группы """+ЗаданиеСсылка.Наименование+"""");
			
			// Для вложенных групп нужно использовать родительский ключ. А для невложенных - создаем новый
			ИдентификаторЗадания = Ключ;
			Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				ИдентификаторЗадания = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			//Создадим группе свой ИдВызова
			ИДВызоваГруппа = мис_ЛоггерСервер.СоздатьИдВызова(ИдВызова,"Пакет """+ЗаданиеСсылка.Наименование+"""",ТекущаяДатаСеанса(),,);
			
			ЗаписатьСтатусВыполняется(ИДВызоваГруппа,ЗаданиеСсылка,ИдентификаторЗадания);
			
			//						запуск															 //
			///////////////////////////////////////////////////////////////////////////////////////////
			
			ЗапускМассиваПараллельныхЗаданий(ИДВызова,ИДВызоваГруппа,ЗаданиеСсылка,ИдентификаторЗадания,ОбщиеПараметры);
			
			///////////////////////////////////////////////////////////////////////////////////////////
			
			РезультатВыполнения = ПолучитьРезультатВыполненияЗаданийИзГруппы(ЗаданиеСсылка,ИдентификаторЗадания);
			ЗаписатьСтатусРезультатВыполнения(ИДВызоваГруппа,ЗаданиеСсылка,РезультатВыполнения,ИдентификаторЗадания);
			
			// уходим на следующее по цепочке задание (здесь - на следующую группу)
			ЕстьСледующий = ЗначениеЗаполнено(ЗаданиеСсылка.СледующаяПроцедура);
			Если ЕстьСледующий Тогда
				ЗаданиеСсылка = ЗаданиеСсылка.СледующаяПроцедура;
			КонецЕсли;
			
		КонецЦикла;
		
		клог.инфо("Обработка регламентных заданий завершена.");
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		клог.Крит("Ошибка в процедуре ЗапускГруппыЗаданий(). Подробности: %1", т);
		ВызватьИсключение ;
	КонецПопытки;

КонецПроцедуры

//@рекурсия
//@proxy мис_УправлениеЗаданиямиСервер.ЗапускЗаданияДляЭлементаСправочникаTaskManagement()
//
// создание и запуск регламентных заданий первого уровня в фоне
//	на основе переданного элемента справочника в структуре параметров
//
//Параметры:
//	СтруктураПараметров - Структура параметров фонового задания
//Возвращаемое значение:
//	булево
Процедура ЗапускЗаданияДляЭлементаСправочникаTaskManagement(СтруктураПараметров, ОбщиеПараметры) Экспорт
	
	ИдВызоваКорень    		= СтруктураПараметров.ИдВызоваКорень;
	ИдВызоваРодитель  		= СтруктураПараметров.ИдВызова;
	Задание           		= СтруктураПараметров.ЗаданиеСсылка;
	НомерЗадания	  		= СтруктураПараметров.СчЗаданий;
	ЭтоЦепочка		  		= СтруктураПараметров.ЭтоЦепочка;
	ИдентификаторЗадания 	= СтруктураПараметров.ИдентификаторЗадания;
	НомерИтерации 			= СтруктураПараметров.НомерИтерации;
	
	// этот ИдВызова не связан с цепочкой???
	ИдВызова = мис_ЛоггерСервер.СоздатьИдВызова( //ИдВызоваРодитель     // <<-- Если хотим иерархии внутри цепочки, надо раскомментировать
	, "Фоновое задание. Итерация ("+НомерИтерации+"): "+Задание.Наименование, ТекущаяДатаСеанса(),
	"ЗапускЗаданияДляЭлементаСправочникаTaskManagement", ИдВызоваРодитель.ПараметрыВызова);
	
	// обязательно в попытке, иначе не поймаем баги
	
	Попытка
		
		Если мис_УправлениеЗаданиямиСлужебный.ЕстьЗапретНаЗапускРегламентногоЗадания() Тогда
			мис_ЛоггерСервер.Информация(ИДВызова,"Завершение по терминальной константе","Обработка регламентных заданий окончена.");
			Возврат;
		КонецЕсли;
		
		Если НЕ РазрешенЗапускПоУсловиям(Задание) Тогда
			// запуск задания запрещен по дополнительным условиям
			мис_ЛоггерСервер.Информация(ИДВызова,"Запуск задания не разрешен по доп условиям! Задание: "+Строка(Задание));
			Возврат;
		КонецЕсли;
		
		// Проверяем у подчиненного необходимость запуска
		Запускать = Задание.Активность;
		Если НЕ Запускать Тогда
			// Прерываем цепочку
			мис_ЛоггерСервер.Информация(ИДВызова, "Цепочка прервана", "Выключен флаг Активность у следующего задания: "+Строка(Задание));
			Возврат;
		КонецЕсли;
		
		//{ Выполнение метода с фиксацией статуса
		
		//ЗаписатьСтатус(ИДВызова,Задание,Перечисления.мис_СтатусВыполнения.Выполняется,ИдентификаторЗадания);
		ЗаписатьСтатусВыполняется(ИдВызова,Задание,ИдентификаторЗадания);
		
		_Задание = Строка(Задание);
		
		Если Задание.ЭтоГруппа Тогда
			ВызватьИсключение "Задание является группой. Запуск группы запрещен в этом методе! "+_Задание;
		КонецЕсли;
		
				//ИмяМетода 			= "мис_класс_ЗапускЗаданий.ЗапускМассиваПараллельныхЗаданий";
				////ИмяЗадания 			= ИмяМетода+":"+Задание.Наименование;
				////Ключ 				= мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(Задание);
				//МассивПараметров 	= Новый Массив;
				//МассивПараметров.Добавить(ИдВызоваКорень);
				//МассивПараметров.Добавить(ИдВызова);
				//МассивПараметров.Добавить(Задание);
				//МассивПараметров.Добавить(ИдентификаторЗадания);
				//МассивПараметров.Добавить(ОбщиеПараметры);
				//
				//ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода,МассивПараметров);

		Попытка
				ИмяМетода 			= Задание.ПроцедураСПараметрами;
				//ИмяЗадания 			= ИмяМетода+":"+Задание.Наименование;
				//Ключ 				= мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(Задание);
				ТаблицаПараметров 	= Задание.ПараметрыПроцедуры.Получить();
				МассивПараметров 	= мис_УправлениеЗаданиямиСервер.ТаблицаПараметровВМассивПараметров(ТаблицаПараметров, ИдВызова,ОбщиеПараметры);
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, МассивПараметров);
			
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ф = ОписаниеОшибки();
			мис_ЛоггерСервер.Отладка(ИдВызова,"Ошибка",т);
			мис_ЛоггерСервер.Ошибка(ИдВызова,"Ошибка",ф);
			//Возврат;
		КонецПопытки;
		
		РезультатВыполнения = ПолучитьРезультатВыполненияЗадания(ИдВызова);
		ЗаписатьСтатусРезультатВыполнения(ИдВызова,Задание,РезультатВыполнения,ИдентификаторЗадания);
		
		//}
		
		//Если РезультатВыполнения = Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения Тогда
		//	
		//	КоличествоПовторов = Задание.КоличествоПовторовПриАварийномЗавершении;
		//	ИнтервалПовтора    = Задание.ИнтервалПовтораПриАварийномЗавершении;
		//	
		//	НомерИтерации = СтруктураПараметров.НомерИтерации;
		//	
		//	Если НомерИтерации < КоличествоПовторов Тогда
		//		мис_УправлениеЗаданиямиОбщегоНазначенияСервер.Пауза(ИнтервалПовтора);
		//		СтруктураПараметров.Вставить("ИдВызова",ИдВызова); // вставляем идвызова, который вызвал ошибку.
		//		СтруктураПараметров.Вставить("НомерИтерации", НомерИтерации+1); // увеличиваем счетчик
		//		// рекурсия
		//		ЗапускЗаданияДляЭлементаСправочникаTaskManagement(СтруктураПараметров,ОбщиеПараметры);
		//	КонецЕсли;
		//	
		//	Возврат; 
		//	
		//КонецЕсли;
		
		// рекурсия
		Если ЗначениеЗаполнено(Задание.СледующаяПроцедура) Тогда
			
			ТекЗадание = Задание.СледующаяПроцедура;
			//Если ТекЗадание.ЭтоГруппа тогда
			//	ТекИдентификаторЗадания = Новый УникальныйИдентификатор;
			//Иначе
				ТекИдентификаторЗадания = ИдентификаторЗадания;//СформироватьУникальныйКлючЗадания(ТекЗадание);
			//КонецЕсли;
			
			СтруктураПараметров.Вставить("ЗаданиеСсылка"  , ТекЗадание);
			СтруктураПараметров.Вставить("СчЗаданий", НомерЗадания + 1);
			СтруктураПараметров.Вставить("ИдВызова" , ИдВызова); // В каждой значимой функции должен создаваться свой ИДВызова и присваиваться родительский.
			СтруктураПараметров.Вставить("ЭтоЦепочка",ЗначениеЗаполнено(ТекЗадание.СледующаяПроцедура));
			СтруктураПараметров.Вставить("НомерИтерации",1);
			СтруктураПараметров.Вставить("ИдентификаторЗадания", ТекИдентификаторЗадания);
				
			ЗапускЗаданияДляЭлементаСправочникаTaskManagement(СтруктураПараметров,ОбщиеПараметры);
		КонецЕсли;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		мис_ЛоггерСервер.КритическаяОшибка(ИдВызова, "Ошибка", "Подробности: "+ Строка(т));
		 
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Это серверный обработчик интерактивного запуска.
//
// Запускает элемент (не группу) справочника мис_УправлениеЗаданиями на выполнение.
// Вызывается из формы списка справочника мис_УправлениеЗаданиями.
//
// Параметры
//	Задание - СправочникСсылка.мис_УправлениеЗаданиями - задание, которое надо выполнить.
//	ПараметрыЗадания - ТЗ,массив структур или данные формы структура - параметры задания на форме элемента.
//							Фактически, это параметры метода, указанного в элементе справочника
//
Функция ЗапуститьЭлементСправочника(Знач ИдВызова, Знач Задание, Знач ПараметрыЗадания, Знач БезВопросов,
	Знач ИдВызоваОбработки = Неопределено) Экспорт
	
	// Вызов исключений возможен, т.к. это серверное продолжение интерактивного запуска
	
	Если ТипЗнч(Задание) <> Тип("СправочникСсылка.мис_УправлениеЗаданиями") Тогда
		ВызватьИсключение "Тип параметра <Задание> отличается от СправочникСсылка.мис_УправлениеЗаданиями!";
	КонецЕсли;
	Если Задание.ЭтоГруппа Тогда
		ВызватьИсключение "В параметре <Задание> должен быть элемент справочника, а не группа!";
	КонецЕсли;
	
	Ключ = мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(Задание)+ТекущаяДатаСеанса();
	
	Попытка
		
		Если БезВопросов Тогда
			ТаблицаПараметров = Задание.ПараметрыПроцедуры.Получить();
		Иначе
			Если ТипЗнч(ПараметрыЗадания) = Тип("ДанныеФормыСтруктура") Тогда
				ТаблицаПараметров = ДанныеФормыВЗначение(ПараметрыЗадания,Тип("ТаблицаЗначений"));
			ИначеЕсли ТипЗнч(ПараметрыЗадания) = Тип("ТаблицаЗначений") Тогда
				ТаблицаПараметров = ПараметрыЗадания;
			ИначеЕсли ТипЗнч(ПараметрыЗадания) = Тип("Массив") Тогда
				ТаблицаПараметров = ПараметрыЗадания;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИдВызоваОбработки <> Неопределено Тогда
			ВызОбъект = ИдВызоваОбработки.ПолучитьОбъект();
			ВызОбъект.Родитель = ИдВызова;
			ВызОбъект.Записать();
		КонецЕсли;
		
		МассивПараметров = мис_УправлениеЗаданиямиСервер.ТаблицаПараметровВМассивПараметров(ТаблицаПараметров,ИдВызова);
		
	Исключение
		РезультатВыполнения = Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения;
		ЗаписатьСтатусРезультатВыполнения(ИдВызова,Задание,РезультатВыполнения,Ключ);
		
		ВызватьИсключение;
	КонецПопытки;

	// В массиве параметров должен быть ИДВызова первым параметром (если есть подсистема логирования)
	Если МассивПараметров = Неопределено Тогда
		РезультатВыполнения = Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения;
		ЗаписатьСтатусРезультатВыполнения(ИдВызова,Задание,РезультатВыполнения,Ключ);
		ВызватьИсключение "Ошибки при установке параметров!";
	КонецЕсли;

	//ЗаписатьСтатус(ИдВызова,Задание,Перечисления.мис_СтатусВыполнения.Выполняется,Ключ);
	ЗаписатьСтатусВыполняется(ИдВызова,Задание,Ключ);
	
	// Выполним метод
	
	ВыполненоУспешно = Ложь;
	т = "";
	ф = "";
	Попытка
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(Задание.ПроцедураСПараметрами, МассивПараметров);
		ВыполненоУспешно = Истина;
	Исключение
		
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ф = ОписаниеОшибки();	
		//ВызватьИсключение;
	КонецПопытки;
	
	Если ВыполненоУспешно Тогда
		РезультатВыполнения = ПолучитьРезультатВыполненияЗадания(ИДВызова);
	Иначе
		мис_ЛоггерСервер.Ошибка(ИдВызова, "Ошибка", ф);
		мис_ЛоггерСервер.Отладка(ИдВызова, "Ошибка", т);
		РезультатВыполнения = Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения;
		
	КонецЕсли;
	
	ЗаписатьСтатусРезультатВыполнения(ИдВызова,Задание,РезультатВыполнения,Ключ);
	
	Возврат ИдВызова;//для метода ОбработатьРезультатЗапускаЭлемента() в форме списка спр УправлениеЗаданиями
	
КонецФункции

#КонецОбласти

#Область ЗапускФоновыхЗаданийИзСправочникамис_УправлениеЗаданиями

// Создает массив заданий из групп и элементов внутри родителя (группы спр Задания, параметр Родитель) и запускает все на выполнение.
//Параметры:
//	КорневойИДВызова		- справочникСсылка.ИндексЛога
//	ИдВызова				- справочникСсылка.ИндексЛога
//  ГруппаЗаданийСсылка		- справочникСсылка.мис_УправлениеЗаданиями
//	ИдентификаторЗадания 	- строка
//	ОбщиеПараметры			- структура
//
Процедура ЗапускМассиваПараллельныхЗаданий(Знач КорневойИДВызова,Знач ИдВызова,
	ГруппаЗаданийСсылка, Знач ИдентификаторЗадания,Знач ОбщиеПараметры) Экспорт
	
	Если ИДВызова = Неопределено Тогда
		ИдВызова = КорневойИДВызова;
	КонецЕсли;
	
	клог = мис_ЛоггерСервер.getLogger(ИДВызова, "ЗапускМассиваПараллельныхЗаданий");
	клог.инфо(">> Запуск группы """+ГруппаЗаданийСсылка.Наименование+"""");
	
	Если мис_УправлениеЗаданиямиСлужебный.ЕстьЗапретНаЗапускРегламентногоЗадания() Тогда
		клог.Инфо("Обработка регламентных заданий завершена. Обнаружен запрет на запуск регл. заданий");
		Возврат;
	КонецЕсли;
	
	// эти фоновые задания мы будем ожидать после запуска
	МассивФонЗаданий = Новый Массив;
	
	// Получить массив заданий, которые будут запущены параллельно. Это могут быть,
	// в том числе, первые задания цепочек.
	МассивПараллельных = ПолучитьМассивЗаданий(ГруппаЗаданийСсылка);
	
	клог.дебаг("Список заданий на запуск:");
	Для Каждого Эл Из МассивПараллельных Цикл
		клог.дебаг(""+строка(Эл.Код)+":"+Эл.Наименование+":"+эл.ПроцедураСПараметрами);
	КонецЦикла;
	
	Счетчик = 0;
	
	Попытка
		
		//			запуск заданий					//
		//////////////////////////////////////////////
		Для Каждого ЗаданиеСсылка Из МассивПараллельных Цикл
			
			Запускать = ЗаданиеСсылка.Активность;
			Если Не Запускать Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ РазрешенЗапускПоУсловиям(ЗаданиеСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Счетчик = Счетчик+1;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ИдВызоваКорень" 		, КорневойИДВызова);
			СтруктураПараметров.Вставить("ЗаданиеСсылка"  		, ЗаданиеСсылка);
			СтруктураПараметров.Вставить("СчЗаданий"			, Счетчик);
			СтруктураПараметров.Вставить("ИдВызова" 			, ИдВызова); // В каждой значимой функции должен создаваться свой ИДВызова
			СтруктураПараметров.Вставить("ЭтоЦепочка"			, ЗначениеЗаполнено(ЗаданиеСсылка.СледующаяПроцедура));
			СтруктураПараметров.Вставить("НомерИтерации"		, 1);
			СтруктураПараметров.Вставить("ИдентификаторЗадания"	, ИдентификаторЗадания);
					
			Если ксп_Функции.МожноВыполнитьВФоне() Тогда//fix2 2024-02-23
				
				Если ЗаданиеСсылка.ЭтоГруппа Тогда
					клог.инфо("Это группа ""%1"". Запускаем фоновое задание (группу): %2", ЗаданиеСсылка, "ЗапускГруппыЗаданий");
					
					//СУУ_ЕНС 16.03.2021 Отключил
					//ИдентификаторЗадания_ = Новый УникальныйИдентификатор;
					ИдентификаторЗадания_  = ИдентификаторЗадания;
					_ИмяПроцедуры = ЗаданиеСсылка.ПроцедураСПараметрами;
					Попытка
						ФонЗадание = ВыполнитьГруппуВФоне(клог, ЗаданиеСсылка, ОбщиеПараметры, ИдентификаторЗадания_);
					Исключение
					    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
						т				= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						клог.ерр("ВыполнитьГруппуВФоне(). Ошибка выполнения фонового задания. Имя метода "+_ИмяПроцедуры+". Подробности: "+т);
						ФонЗадание = Неопределено;
					КонецПопытки;

				Иначе
					клог.инфо("Это элемент ""%1"". Запускаем фоновое задание (элемент) с методом: %2", ЗаданиеСсылка,
						"ЗапускЗаданияДляЭлементаСправочникаTaskManagement()");
					
					_ИмяПроцедуры = ЗаданиеСсылка.ПроцедураСПараметрами;
					Попытка
						ФонЗадание = ВыполнитьЭлементВФоне(ИдВызова, ЗаданиеСсылка, СтруктураПараметров, ОбщиеПараметры);
					Исключение
					    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
						т				= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						клог.ерр("ВыполнитьЭлементВФоне(). Ошибка выполнения фонового задания. Имя метода "+_ИмяПроцедуры+". Подробности: "+т);
						ФонЗадание = Неопределено;
					КонецПопытки;
					
				КонецЕсли;
				
				Если ФонЗадание <> Неопределено Тогда
					МассивФонЗаданий.Добавить(ФонЗадание);
				КонецЕсли;
				
			Иначе
				ЗапускЗаданияДляЭлементаСправочникаTaskManagement(СтруктураПараметров,ОбщиеПараметры);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//				ожидание					//
		//////////////////////////////////////////////
		Если ксп_Функции.МожноВыполнитьВФоне() Тогда
			
			ИмяПроцедуры = "";//здесь могут быть разные методы, поэтому оставляем пустым.
			//Обработки.мис_класс_ФоновыеЗадания.ОжидатьМассивЗаданий(клог, МассивФонЗаданий, ЗаданиеСсылка, ИмяПроцедуры);
			ОжидатьМассивЗаданий(клог, МассивФонЗаданий, ИмяПроцедуры);
			
		КонецЕсли;
		
		клог.инфо(">> Завершение работы пакета """+ГруппаЗаданийСсылка.Наименование+"""");
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		клог.ерр("Подробности: "+т);
	КонецПопытки;
	
КонецПроцедуры

// Ожидает массив параллельных заданий.
// Вызывается из ЗапускМассиваПараллельныхЗаданий()
//
// Параметры
//	клог - логгер
//	МассивФонЗаданий - массив - фоновые задания для ожидания
//	ЗадачаСсылка - СправочникСсылка.мис_УправлениеЗаданиями - для формирования письма с ошибкой
//	ИмяПроцедуры - строка - для поиска сбойных фоновых заданий и вывода в лог их ошибок
//
Процедура ОжидатьМассивЗаданий(клог, Знач МассивФонЗаданий, ИмяПроцедуры) Экспорт
	
	колЗаданий = МассивФонЗаданий.Количество();
	НомерИтерации = 1;
	
	клог.дебаг("Завершенные и ошибочные задания будут удаляться из массива ожидания");
	
	Попытка
		ЕстьАктивные = Истина;
		Пока ЕстьАктивные И колЗаданий > 0 Цикл
			МассивФонЗаданий_ = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФонЗаданий);
			ЕстьАктивные = Ложь;
			клог.дебаг("Номер итерации = %1", НомерИтерации);
			клог.дебаг("Начинаем ожидание. Количество фоновых заданий = %1", колЗаданий);
			Для сч_ = -МассивФонЗаданий_.Количество()+1 По 0 Цикл
				// Это условие только для детализации лога, чтобы выделить ошибку
				н_ = МассивФонЗаданий_[-сч_].Наименование;
				с_ = МассивФонЗаданий_[-сч_].Состояние;
				Если с_ = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					клог.ерр("Задание %1 имеет статус %2", н_, СостояниеФоновогоЗадания.ЗавершеноАварийно);
					МассивФонЗаданий_.Удалить(-сч_);
				ИначеЕсли с_ <> СостояниеФоновогоЗадания.Активно Тогда
					клог.дебаг("Задание %1 имеет статус %2", н_, с_);
					МассивФонЗаданий_.Удалить(-сч_);
				Иначе
					ЕстьАктивные = Истина;
					клог.дебаг("Задание %1 имеет статус %2", н_, СостояниеФоновогоЗадания.Активно);
				КонецЕсли;
			КонецЦикла;
			//Для Каждого ФоновоеЗадание_ Из МассивФонЗаданий Цикл
			//	клог.инфо("Задание %1 имеет статус %2", ФоновоеЗадание_.Наименование, ФоновоеЗадание_.Состояние);
			//	Если ФоновоеЗадание_.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			//		ЕстьАктивные = Истина;
			//		//Прервать;
			//	КонецЕсли;
			//КонецЦикла;
			колЗаданий = МассивФонЗаданий_.Количество();
			МассивФонЗаданий = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивФонЗаданий_);
			НомерИтерации = НомерИтерации + 1;
		КонецЦикла;
		клог.дебаг("Завершили ожидание. Количество фоновых заданий = %1", колЗаданий);
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		клог.ерр("Ошибка ОжидатьЗавершенияВыполнения(). Подробности: "+т);
		
		Если ЗначениеЗаполнено(ИмяПроцедуры) Тогда
			//получим все задания, завершенные с ошибкой и выведем их ошибки
			СписокЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода,Состояние",
				ИмяПроцедуры, СостояниеФоновогоЗадания.ЗавершеноАварийно));
				
			мис_класс_ФоновыеЗадания.ВывестиОшибкиФоновыхЗаданий(клог, СписокЗаданий);// выводим в лог
		КонецЕсли;
	
		//Обработки.мис_класс_УведомленияПользователей.ОтправитьОповещениеОбОшибке(клог.гетИдВызова(), т, ЗадачаСсылка.ПроцедураСПараметрами, ЗадачаСсылка);
	КонецПопытки;
	
КонецПроцедуры

// Создает массив, элементами которого являются первые задания в цепочках
Функция ПолучитьМассивЗаданий(ГруппаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель",ГруппаСсылка);
	ТолькоЗапускаемыеПоРасписанию = Ложь;
	Запрос.Текст = ТекстЗапросаВыбораЦепочекЗаданий(ТолькоЗапускаемыеПоРасписанию);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// 				запуск фонового задания								 //
Функция ВыполнитьЭлементВФоне(ИдВызова, ЗаданиеСсылка, СтруктураПараметров, ОбщиеПараметры)
	
	Префикс			= ?(ЗаданиеСсылка.ЭтоГруппа, "Группа ", "Элемент ");
	ОписаниеЗадачи	= ""+Префикс+""""+ЗаданиеСсылка.Наименование+""", код "+ЗаданиеСсылка.Код+" (регл. авт запуск.)";
	ИмяПроцедуры 	= "мис_УправлениеЗаданиямиСервер.ЗапускЗаданияДляЭлементаСправочникаTaskManagement";
	Ключ 			= мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(ЗаданиеСсылка); // не может существовать более одного активного задания на один элемент справочника
	
	Если ЗаданиеСТакимКлючомУжеВыполняется(ИдВызова, ИмяПроцедуры, Ключ, ЗаданиеСсылка) Тогда
		мис_ЛоггерСервер.Ошибка(ИДВызова, "Ошибка",
		"ВыполнитьЭлементВФоне(). Невозможно запустить задание, т.к. задание с таким ключом уже выполняется! Имя метода "+ИмяПроцедуры+". Ключ: "+Ключ);
		Возврат Неопределено;
	КонецЕсли;
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СтруктураПараметров);
	МассивПараметров.Добавить(ОбщиеПараметры);
	
	// запуск фонового задания
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяПроцедуры, МассивПараметров, Ключ, ОписаниеЗадачи);
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		мис_ЛоггерСервер.Ошибка(ИДВызова, "Ошибка",
		"ВыполнитьЭлементВФоне(). Ошибка выполнения фонового задания. Имя метода "+ИмяПроцедуры+". Подробности: "+т);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФоновоеЗадание;
	
КонецФункции

// 				запуск фонового задания								 //
Функция ВыполнитьГруппуВФоне(клог, ЗаданиеСсылка, ОбщиеПараметры, Знач ИдентификаторЗадания)
	
	Префикс			= ?(ЗаданиеСсылка.ЭтоГруппа, "Группа ", "Элемент ");
	ОписаниеЗадачи	= ""+Префикс+""""+ЗаданиеСсылка.Наименование+""", код "+ЗаданиеСсылка.Код+" (регл. авт запуск.)";
	//рекурсия
	ИмяПроцедуры	= "мис_УправлениеЗаданиямиСервер.ЗапуститьГруппуВФоне";
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИдентификаторЗадания = мис_УправлениеЗаданиямиСервер.СформироватьУникальныйКлючЗадания(ЗаданиеСсылка); // не может существовать более одного активного задания на один элемент справочника
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Ключ",ИдентификаторЗадания);
	Контекст.Вставить("Ссылка",ЗаданиеСсылка);
	Контекст.Вставить("ЭтоЦепочка",ЗначениеЗаполнено(ЗаданиеСсылка.СледующаяПроцедура));
	Контекст.Вставить("ОбщиеПараметры",ОбщиеПараметры);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Контекст);
	
	// запуск фонового задания
	//Попытка
		
		ФоновоеЗадание	= ФоновыеЗадания.Выполнить(ИмяПроцедуры, МассивПараметров, ИдентификаторЗадания, ОписаниеЗадачи);
		
	//Исключение
	//	т				= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//	клог.Ошибка("ВыполнитьГруппуВФоне(). Ошибка выполнения фонового задания. Имя метода "+ИмяПроцедуры+". Подробности: "+т);
	//	Возврат Неопределено;
	//КонецПопытки;
	
	Возврат ФоновоеЗадание;

КонецФункции

// проверка
Функция ЗаданиеСТакимКлючомУжеВыполняется(ИдВызова, ИмяПроцедуры, Ключ, Элемент)
	
	Отбор = Новый Структура("ИмяМетода,Состояние,Ключ",
		ИмяПроцедуры, СостояниеФоновогоЗадания.Активно,Ключ);
	
	Попытка
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Исключение
		мис_ЛоггерСервер.Предупреждение_(ИДВызова, "Предупреждение",
		"Управление фоновыми заданиями. Ошибка получения массива заданий методом ПолучитьФоновыеЗадания().
		|Будет создан новый пустой массив. Подробности:"+Символы.ПС+ОписаниеОшибки());
		
		МассивЗаданий = Новый Массив;
	КонецПопытки;
	
	Если МассивЗаданий.Количество()>0 Тогда
		мис_ЛоггерСервер.Отладка(ИДВызова, "Отладка", "Задание с таким ключом уже выполняется: "+ Символы.ПС+
		"Ключ: " + Ключ + Символы.ПС + "Задание: " + Строка(Элемент));
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область УсловияЗапуска

// возвращает флаг необходимости запуска по прописанным условиям
Функция РазрешенЗапускПоУсловиям(Элемент) Экспорт
	
	Расписание 				= ПолучитьРасписаниеИзЭлемента(Элемент);
	
	Если ТипЗнч(Расписание) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивДнейНедели 		= Расписание.ДниНедели;
	ЗапускРазрешен		 	= РазрешенЗапускВЭтотДеньНедели(ТекущаяДатаСеанса(),МассивДнейНедели);
	
	Возврат ЗапускРазрешен;
	
КонецФункции

#КонецОбласти

#Область РезультатВыполненияЗадания

Функция ПолучитьРезультатВыполненияЗаданийИзГруппы(Родитель,ИдентификаторРегламентногоЗадания) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФон",ИдентификаторРегламентногоЗадания);
	Запрос.УстановитьПараметр("Родитель",Родитель);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ЛогСообщений.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусыСообщений.Ошибка)
	|					ТОГДА 1
	|				КОГДА ЛогСообщений.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусыСообщений.КритическаяОшибка)
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Результат
	|ИЗ
	|	Справочник.мис_ЛогСообщений КАК ЛогСообщений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИндексЛога.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.мис_ИндексЛога КАК ИндексЛога
	|		ГДЕ
	|			ИндексЛога.Ссылка В ИЕРАРХИИ
	|					(ВЫБРАТЬ
	|						Статусы.ИндексЛога
	|					ИЗ
	|						РегистрСведений.мис_СтатусВыполненияЗаданий.СрезПоследних(, ИдентификаторФон = &ИдентификаторФон) КАК Статусы)) КАК ВсеВызовы
	|		ПО ЛогСообщений._Владелец = ВсеВызовы.Ссылка
	|			И (ЛогСообщений.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусыСообщений.Ошибка)
	|				ИЛИ ЛогСообщений.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусыСообщений.КритическаяОшибка))";
	
	Результаты = Новый Соответствие;
	Результаты.Вставить(0,Перечисления.мис_СтатусВыполнения.ВыполненоБезОшибок);
	Результаты.Вставить(1,Перечисления.мис_СтатусВыполнения.ВыполненоСОшибками);
	Результаты.Вставить(2,Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения);
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат Результаты[0];
	КонецЕсли;
	Возврат Результаты[Рез.Выгрузить()[0][0]];
КонецФункции

//возвращает статус выполнения задания
//Параметры:
//	ИдВызова - ИД вызова
//Возвращаемое значение:
// тип: Перечисления.мис_СтатусВыполнения
Функция ПолучитьРезультатВыполненияЗадания(ИдВызова) Экспорт
	
	ЗаписьЖурналаРегистрации("ПолучитьРезультатВыполненияЗадания()",
		УровеньЖурналаРегистрации.Информация,,ИдВызова,"Вызов метода");
	
	ЗапросКритические = Новый Запрос;
	ЗапросКритические.УстановитьПараметр("ИДВызова",ИдВызова);
	ЗапросКритические.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.мис_ИндексЛога КАК ИндексЛога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.мис_ЛогСообщений КАК ЛогСообщений
	|		ПО ИндексЛога.Ссылка = ЛогСообщений._Владелец
	|ГДЕ
	|	ИндексЛога.Ссылка В ИЕРАРХИИ(&ИдВызова)
	|	И ЛогСообщений.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусыСообщений.КритическаяОшибка)";
	
	Рез = ЗапросКритические.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		ЗаписьЖурналаРегистрации("ПолучитьРезультатВыполненияЗадания()",
			УровеньЖурналаРегистрации.Информация,,ИдВызова,"Определен статус ПрерываниеВыполнения");
		
		Возврат Перечисления.мис_СтатусВыполнения.ПрерываниеВыполнения;
	КонецЕсли;
	
	ЗапросПростые = Новый Запрос;
	ЗапросПростые.УстановитьПараметр("ИДВызова",ИдВызова);
	ЗапросПростые.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.мис_ИндексЛога КАК ИндексЛога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Инд.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.мис_ИндексЛога КАК Инд
	|		ГДЕ
	|			Инд.Ссылка В ИЕРАРХИИ(&ИдВызова)) КАК ВсеИндексыЛога
	|		ПО ИндексЛога.Ссылка = ВсеИндексыЛога.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.мис_ЛогСообщений КАК ЛогСообщений
	|		ПО ИндексЛога.Ссылка = ЛогСообщений._Владелец
	|			И (ЛогСообщений.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусыСообщений.Ошибка))";
	
	Рез = ЗапросПростые.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		ЗаписьЖурналаРегистрации("ПолучитьРезультатВыполненияЗадания()",
			УровеньЖурналаРегистрации.Информация,,ИдВызова,"Определен статус ВыполненоСОшибками");
			
		Возврат Перечисления.мис_СтатусВыполнения.ВыполненоСОшибками;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("ПолучитьРезультатВыполненияЗадания()",
		УровеньЖурналаРегистрации.Информация,,ИдВызова,"Определен статус ВыполненоБезОшибок");
		
	Возврат Перечисления.мис_СтатусВыполнения.ВыполненоБезОшибок;
КонецФункции

#КонецОбласти

#Область РасписаниеЗаданий

// получает значение расписания из реквизита Расписание
Функция ПолучитьРасписаниеИзЭлемента(Элемент) Экспорт
		
	Расписание = Элемент.Расписание.Получить();
	Если ТипЗнч(Расписание) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Расписание;
КонецФункции

// проверяет возможность запуска в день недели, который соответствует параметру Дата
//Параметры:
//	ИДВызова - СправочникСсылка.мис_ИндексЛога
//	Дата - дата проверки
//	МассивДнейНедели - Массив	
Функция РазрешенЗапускВЭтотДеньНедели(Знач Дата, МассивДнейНедели) Экспорт
	
	Индекс = МассивДнейНедели.Найти(ДеньНедели(Дата));
	
	Возврат (Индекс <> Неопределено);
		
КонецФункции

Функция ТребуетсяВыполнениеПоРасписанию(ИдВызова,ДатаДляПроверки,Расписание,РезультатВыполнения) Экспорт
	Попытка
		//Расписание.ВремяЗавершения
		//Расписание.ВремяКонца
		//Расписание.ВремяНачала
		//Расписание.ДатаКонца
		//Расписание.ДатаНачала
		//Расписание.ДеньВМесяце
		//Расписание.ДеньНеделиВМесяце
		//Расписание.ДниНедели
		
		ДатаПроверки = НачалоДня(ДатаДляПроверки);
		ВремяПроверки = Дата(Формат(ДатаДляПроверки,"ДФ=00010101HHmmss"));
		
		Запускать = Истина;
		
		//Проверим, что на дату проверки необходим запуск
		Если ЗначениеЗаполнено(Расписание.ДатаНачала) Тогда
			Если ДатаПроверки >=Расписание.ДатаНачала Тогда
				// По времени запускать можно
				Запускать = Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(Расписание.ДатаКонца) Тогда
			Если ДатаПроверки <= Расписание.ДатаКонца Тогда
				// По времени запускать можно
				Запускать = Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		мис_ЛоггерСервер.отладка(ИДВызова, "Отладка",
			"ВремяПроверки: "+ВремяПроверки+Символы.ПС+
			"Расписание.ВремяНачала: "+ Расписание.ВремяНачала+Символы.ПС+
			"Расписание.ВремяКонца: " + Расписание.ВремяКонца);

		// Проверим что на время проверки необходим запуск
		Если ВремяПроверки >=Расписание.ВремяНачала И ВремяПроверки < Расписание.ВремяКонца Тогда
			// По времени запускать можно
			Запускать = Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		// проверки на период повтора
		Если Расписание.ПериодПовтораДней = 0 Тогда
			// разовый запуск - если результат выполнения <> Неопределено, то можно иначе нельзя
			Если РезультатВыполнения.СтатусВыполнения = Неопределено Тогда
				Запускать = Истина;
			Иначе
				// уже запускался - 
				Возврат Ложь;
			КонецЕсли;
		Иначе
			// период повтора
			// смотрим дату последнего запуска и плюсуем период повтора
			Если РезультатВыполнения.СтатусВыполнения = Неопределено Тогда
				Запускать = Истина;
			Иначе
				Запускать = КонецДня(ДатаДляПроверки) >=(НачалоДня(РезультатВыполнения.Начало) + Расписание.ПериодПовтораДней * 86400);
			КонецЕсли;
		КонецЕсли;
		
		//Проверка на дни недели
		Запускать = Расписание.ДниНедели.Найти(ДеньНедели(ДатаДляПроверки))<>Неопределено;
		
		//проверка на день в месяце
		
		//проверка на день недели в месяце
		
		мис_ЛоггерСервер.ЗаписатьСообщение(ИДВызова, "Отладка",
		Перечисления.мис_СтатусыСообщений.Информация,
		"Функция ТребуетсяВыполнениеПоРасписанию(). Подробности:"+Символы.ПС+
		"ВремяПроверки:" +ВремяПроверки+Символы.ПС+
		"Расписание.ВремяНачала:" +Расписание.ВремяНачала+Символы.ПС+
		"Расписание.ВремяКонца:" +Расписание.ВремяКонца+Символы.ПС+
		"ВремяПроверки >=Расписание.ВремяНачала И ВремяПроверки < Расписание.ВремяКонца:" +Булево(ВремяПроверки >=Расписание.ВремяНачала И ВремяПроверки < Расписание.ВремяКонца) + Символы.ПС+
		"Расписание.ПериодПовтораДней: " + Расписание.ПериодПовтораДней + Символы.ПС+
        "КонецДня(ДатаДляПроверки) >=(НачалоДня(РезультатВыполнения.Начало) + Расписание.ПериодПовтораДней * 86400): " + Булево(КонецДня(ДатаДляПроверки) >=(НачалоДня(РезультатВыполнения.Начало) + Расписание.ПериодПовтораДней * 86400)) + Символы.ПС+
		"РезультатВыполнения.СтатусВыполнения: " + РезультатВыполнения.СтатусВыполнения + Символы.ПС+
		"Расписание.ДниНедели.Найти(ДеньНедели(ДатаДляПроверки): " + Расписание.ДниНедели.Найти(ДеньНедели(ДатаДляПроверки)) + Символы.ПС+
		"ТребуетсяВыполнениеПоРасписанию: " +Запускать
		);
		
		Возврат Запускать;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СтатусыЗаданий

// Записывает статус результата выполнения задания в регистр сведений мис_СтатусВыполненияЗаданий
//Параметры:
//	ИдВызова,
//	Задание - спр ссылка мис_УправлениеЗаданиями - задание для выполнения
//	СтатусВыполнения - перечисление мис_СтатусВыполнения - новый статус для записи в регистр
//	ИдентификаторФон - строка - произвольный идентификатор задания
//Возвращаемое значение:
//	нет
Процедура ЗаписатьСтатусРезультатВыполнения(ИдВызова,Задание,СтатусВыполнения,ИдентификаторФон = Неопределено) Экспорт
	
	ДатаЗаписи = ТекущаяДатаСеанса();
		
	Запрос = Новый запрос;
	Запрос.УстановитьПараметр("Задание",Задание);
	Запрос.УстановитьПараметр("ВремяВызова",ИДВызова.ВремяВызова);
	Запрос.УстановитьПараметр("ИндексЛога",ИДВызова);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Рег.Период КАК Период,
	               |	Рег.Задание КАК Задание,
	               |	Рег.СтатусВыполнения КАК СтатусВыполнения,
	               |	Рег.ИндексЛога КАК ИндексЛога,
	               |	Рег.ДатаНачала КАК ДатаНачала,
	               |	Рег.ДатаОкончания КАК ДатаОкончания,
	               |	Рег.ИдентификаторФон КАК ИдентификаторФон
	               |ИЗ
	               |	РегистрСведений.мис_СтатусВыполненияЗаданий.СрезПоследних(&ВремяВызова, Задание = &Задание) КАК Рег
	               |ГДЕ
	               |	Рег.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.мис_СтатусВыполнения.Выполняется)
	               |	И Рег.ИндексЛога = &ИндексЛога";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ДанныеЗаписи = Результат.Выгрузить()[0];
	
	НаборЗаписей = РегистрыСведений.мис_СтатусВыполненияЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(Задание);
	НаборЗаписей.Отбор.Период.Установить(ДанныеЗаписи.Период);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.СтатусВыполнения = СтатусВыполнения;
		Запись.ДатаОкончания 	= ДатаЗаписи;
	КонецЦикла;
	НаборЗаписей.Записать();
		
КонецПроцедуры

// Записывает статус в регистр сведений мис_СтатусВыполненияЗаданий
//Параметры:
//	ИдВызова,
//	Задание - спр ссылка мис_УправлениеЗаданиями - задание для выполнения
//	ИдентификаторФон - строка - произвольный идентификатор задания
//Возвращаемое значение:
//	нет
Процедура ЗаписатьСтатусВыполняется(ИдВызова,Задание,ИдентификаторФон = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.мис_СтатусВыполненияЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(Задание);
	НаборЗаписей.Отбор.Период.Установить(ИДВызова.ВремяВызова);
	//первоначальное добавление записи
	Запись = НаборЗаписей.Добавить();
	Запись.Период 			= ИДВызова.ВремяВызова;
	Запись.Задание 			= Задание;
	Запись.СтатусВыполнения = Перечисления.мис_СтатусВыполнения.Выполняется;
	Запись.ДатаНачала 		= ТекущаяДатаСеанса();
	Запись.ИдентификаторФон = ?(ИдентификаторФон=Неопределено,"",ИдентификаторФон);
	Запись.ДатаОкончания 	= Дата(1,1,1);
	Запись.ИндексЛога 		= ИдВызова;
	Запись.Пользователь 	= Пользователи.ТекущийПользователь();//ИдВызова.Пользователь;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаВыбораЦепочекЗаданий(ЗапускПоРасписанию = Истина) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
					|	ЗначенияБезСсылки.Ссылка,
					|	ЗначенияБезСсылки.ЭтоГруппа
					|ПОМЕСТИТЬ ЗначенияБезСсылки
					|ИЗ
					|	Справочник.мис_УправлениеЗаданиями КАК ЗначенияБезСсылки
					|ГДЕ
					|	ЗначенияБезСсылки.СледующаяПроцедура = ЗНАЧЕНИЕ(Справочник.мис_УправлениеЗаданиями.ПустаяСсылка)
					|	И ЗначенияБезСсылки.Родитель = &Родитель И НЕ ПометкаУдаления
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Последний.СледующаяПроцедура КАК Ссылка
					|ПОМЕСТИТЬ ПоследниеВЦепочках
					|ИЗ
					|	Справочник.мис_УправлениеЗаданиями КАК Последний
					|ГДЕ
					|	Последний.СледующаяПроцедура В
					|			(ВЫБРАТЬ
					|				ЗначенияБезСсылки.Ссылка
					|			ИЗ
					|				ЗначенияБезСсылки) И НЕ ПометкаУдаления
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	НезависимыеЭлементы.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ НезависимыеЭлементы
					|ИЗ
					|	ЗначенияБезСсылки КАК НезависимыеЭлементы
					|ГДЕ
					|	НЕ НезависимыеЭлементы.Ссылка В
					|				(ВЫБРАТЬ
					|					ПоследниеВЦепочках.Ссылка
					|				ИЗ
					|					ПоследниеВЦепочках)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПервыеЭлементы.Ссылка
					|ПОМЕСТИТЬ ПервыеЭлементыЦепочек
					|ИЗ
					|	Справочник.мис_УправлениеЗаданиями КАК ПервыеЭлементы
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мис_УправлениеЗаданиями КАК ВсеЭлементы
					|		ПО ПервыеЭлементы.Ссылка = ВсеЭлементы.СледующаяПроцедура И НЕ ПервыеЭлементы.ПометкаУдаления
					|		И ВсеЭлементы.Родитель = &Родитель
					|ГДЕ
					|	НЕ ПервыеЭлементы.СледующаяПроцедура = ЗНАЧЕНИЕ(Справочник.мис_УправлениеЗаданиями.ПустаяСсылка)
					|	И ПервыеЭлементы.Родитель = &Родитель
					|	И ВсеЭлементы.СледующаяПроцедура ЕСТЬ NULL
					|;
					
					////////////////////////////////////////////////////////////////////////////////
					/// Элементы,которые МОЖНО запускать параллельно, т.к. они первые в цепочках
					/// или независимы и не имеют ссылок, не факт что все из них запустятся, 
					/// т.к. могут не удовлетворять условию по времени запуска
					
					|ВЫБРАТЬ
					|	ПервыеЭлементыЦепочек.Ссылка
					|ИЗ
					|	ПервыеЭлементыЦепочек КАК ПервыеЭлементыЦепочек "+?(ЗапускПоРасписанию,"где ПервыеЭлементыЦепочек.Ссылка.ЗапускПоРасписанию","")+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	НезависимыеЭлементы.Ссылка
					|ИЗ
					|	НезависимыеЭлементы КАК НезависимыеЭлементы "+?(ЗапускПоРасписанию,"где НезависимыеЭлементы.Ссылка.ЗапускПоРасписанию","");

	Возврат ТекстЗапроса;
КонецФункции

// создает ИдВызова
Функция СоздатьИдВызоваЗапускГруппы(Контекст)
	
	Наименование = "Запуск обработки регламентных заданий";
	ВремяВызова  = ТекущаяДатаСеанса();
	МодульПроцедура = "мис_УправлениеЗаданиямиСервер.ЗапуститьГруппуВФоне";
	СписокПар = Новый Структура;
	СписокПар.Вставить("Наименование"   ,Наименование);
	СписокПар.Вставить("ВремяВызова"    ,ВремяВызова);
	СписокПар.Вставить("МодульПроцедура",МодульПроцедура);
	ПараметрыВызова = Новый ХранилищеЗначения(СписокПар, Новый СжатиеДанных(9));
	
	Если ТипЗнч(Контекст) <> Тип("Структура") Тогда
		ВызватьИсключение "ЗапуститьГруппуВФоне(). В переменной Контекст должна быть структура!";
	КонецЕсли;
	
	ЗаданиеСсылка 		= ПолучитьСвойствоКонтекста(Контекст,"Ссылка" ,"СправочникСсылка.мис_УправлениеЗаданиями");
	
	ИДВызова = мис_ЛоггерСервер.СоздатьИдВызова(,Наименование,ВремяВызова,МодульПроцедура,ПараметрыВызова, ЗаданиеСсылка);
	
	Возврат ИДВызова;
	
КонецФункции

// Выполняет проверку
Функция РазрешенЗапускГруппыЗаданий(клог, Контекст)
	
	ЗаданиеСсылка 		= ПолучитьСвойствоКонтекста(Контекст,"Ссылка" ,"СправочникСсылка.мис_УправлениеЗаданиями");
	ЗапускИзСправочника = ПолучитьСвойствоКонтекста(Контекст,"ЗапускИзСправочника","Булево"); // Нужно чтобы понять что запуск из справочника и не надо делать проверок по недельному расписанию
	
	Если ЗапускИзСправочника=Ложь И НЕ РазрешенЗапускПоУсловиям(ЗаданиеСсылка) Тогда
		// запуск задания запрещен по дополнительным условиям
		клог.Инфо("Обработка регламентных заданий прервана. Запуск не разрешен по условиям");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаданиеСсылка.ЭтоГруппа Тогда
		клог.ерр("ЗапуститьГруппуВФоне(). В переменной ЗаданиеСсылка должна быть группа справочника, а не элемент!");
		ВызватьИсключение "ЗапуститьГруппуВФоне(). В переменной ЗаданиеСсылка должна быть группа справочника, а не элемент!";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Безопасно получает свойство из структуры "Контекст"
Функция ПолучитьСвойствоКонтекста(Контекст,Свойство,ТипСтрокой)
	НайденноеЗначение = Неопределено;
	Если Контекст.Свойство(Свойство,НайденноеЗначение) Тогда
		Возврат НайденноеЗначение;
	Иначе
		Возврат мис_УправлениеЗаданиямиОбщегоНазначенияСервер.ПолучитьПустоеЗначениеТипа(Тип(ТипСтрокой));
	КонецЕсли;
КонецФункции

