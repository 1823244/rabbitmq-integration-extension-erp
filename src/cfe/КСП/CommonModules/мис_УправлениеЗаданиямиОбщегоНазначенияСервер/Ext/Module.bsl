
Функция ПолучитьПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат Новый (ЗаданныйТип);
	КонецЕсли;
	
КонецФункции

Функция ЭтоСсылочныйТип(ТипЗначения) Экспорт
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//организует паузу через COMОбъект("wbemscripting.swbemlocator")
//Параметры:
//	Секунд - число, количество секунд паузы
//Возвращаемое значение:
//	нет
//	
Функция Пауза(Знач Секунд) Экспорт
	
	Если ТипЗнч(Секунд)<>Тип("Число") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Секунд = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	//ЗапуститьПриложение("ping -n "+Формат(секунд,"ЧГ=;ЧРГ=")+" 127.0.0.1",,Истина);
	
	//Компьютер=".";
	//Локатор=Новый COMОбъект("wbemscripting.swbemlocator");
	//Сервис=Локатор.ConnectServer(Компьютер,"root\cimv2","","","","",128);
	////Время = Сервис.ExecNotificationQuery("Select * from __instancemodificationevent WITHIN 1 where TargetInstance isa 'Win32_LocalTime' and TargetInstance.Second="+Секунда(ТекущаяДатаСеанса()+Секунд));
	////СледующееСобытие = Время.NextEvent();
	//
	////чтобы работало, если передано 1 минута и более 
	//Если Секунд > 59 Тогда
	//	
	//	КолИтераций = Цел( Секунд / 59 );
	//	Остаток = Секунд % 59;
	//	Если Остаток <> 0 Тогда
	//		КолИтераций = КолИтераций + 1;
	//	КонецЕсли;
	//	
	//	Для сч = 1 по КолИтераций Цикл
	//		ВремСек = ?(Остаток <> 0 И сч=КолИтераций, Остаток, 59);
	//		Время = Сервис.ExecNotificationQuery("Select * from __instancemodificationevent WITHIN 1 where TargetInstance isa 'Win32_LocalTime' and TargetInstance.Second="+Секунда(ТекущаяДатаСеанса()+ВремСек));
	//		СледующееСобытие = Время.NextEvent();
	//	КонецЦикла;
	//	
	//Иначе
	//	Время = Сервис.ExecNotificationQuery("Select * from __instancemodificationevent WITHIN 1 where TargetInstance isa 'Win32_LocalTime' and TargetInstance.Second="+Секунда(ТекущаяДатаСеанса()+Секунд));
	//	СледующееСобытие = Время.NextEvent();
	//КонецЕсли;

КонецФункции

Функция СкопироватьСтруктуру(ИДВызова,Знач Структура) Экспорт
	Рез = Новый Структура;
	Для Каждого КлючЗначение Из Структура Цикл
		Рез.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ДобавитьСлэшКИмениФайла( Путь )
	
	Возврат Путь + ?(Прав(Путь,1)="\","","\");
	
КонецФункции

//Параметры
//	Действие - вх - строка - возможные значения:
//		"Создать" - создает и возвращает построитель текста (объект ЗаписьXML)
//		"Добавить" - добавляе строку к построителю
//		"Закрыть" - закрывает построитель и возвращает строку
//	СтрокаТекста - вх - строка - строка, которую добавляем к тексту
//	ТекстПостроитель - вх/вых - - на входе - неопределено, на выходе - объект ЗаписьXML
//Пример использования.
//      ТекстПостроитель = ПостроитьСтрокуЧерезПостроительТекста("Создать");
//		Для сч = 1 по 100 Цикл
//			ПостроитьСтрокуЧерезПостроительТекста("Добавить", ТекстПостроитель, СтрокаТекста);
//		КонецЦикла;
//		РезСтрока = ПостроитьСтрокуЧерезПостроительТекста("Закрыть", ТекстПостроитель);
Функция ПостроитьСтрокуЧерезПостроительТекста(Действие="Создать",
	ТекстПостроитель=Неопределено, СтрокаТекста=Неопределено) Экспорт
	
	Если Действие="Создать" Тогда
    	ТекстПостроитель = Новый ЗаписьXML;ТекстПостроитель.УстановитьСтроку();Возврат ТекстПостроитель;
	ИначеЕсли Действие="Добавить" Тогда
		Если ТекстПостроитель<>Неопределено Тогда //в некоторых местах используются заглушки, поэтому здесь добавлю проверку
			ТекстПостроитель.ЗаписатьБезОбработки(СтрокаТекста);ТекстПостроитель.ЗаписатьБезОбработки(Символы.ПС);
		КонецЕсли;
	ИначеЕсли Действие="Закрыть" Тогда
		//в некоторых местах используются заглушки, поэтому здесь добавлю проверку
		Возврат ?(ТекстПостроитель<>Неопределено, ТекстПостроитель.Закрыть(),"");
	КонецЕсли;
	
КонецФункции

#Область ПользовательскиеНастройки

Функция ПолучитьНастройкуИзХранилищаНастроекПоТекущемуПользователю(КлючОбъекта, КлючНастроек) Экспорт
	
	Отбор = Новый Структура;Отбор.Вставить("КлючОбъекта", КлючОбъекта);Отбор.Вставить("КлючНастроек", КлючНастроек);Отбор.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь); Выборка = ХранилищеОбщихНастроек.Выбрать(Отбор); Пока Выборка.Следующий() Цикл Возврат Выборка.Настройки; КонецЦикла;	Возврат Неопределено;

КонецФункции

// Параметры
//	Пользователь - строка - любая строка для однозначной идентификации настройки
Функция ПолучитьНастройкуИзХранилищаНастроекПоВыбранномуПользователю(КлючОбъекта, КлючНастроек, Пользователь) Экспорт
	
	Отбор = Новый Структура;Отбор.Вставить("КлючОбъекта", КлючОбъекта);Отбор.Вставить("КлючНастроек", КлючНастроек);Отбор.Вставить("Пользователь", Пользователь); Выборка = ХранилищеОбщихНастроек.Выбрать(Отбор); Пока Выборка.Следующий() Цикл Возврат Выборка.Настройки; КонецЦикла;	Возврат Неопределено;

КонецФункции

Функция УдалитьНастройкуИзХранилищаНастроекПоВыбранномуПользователю(КлючОбъекта, КлючНастроек, Пользователь) Экспорт
	
	ХранилищеОбщихНастроек.Удалить( КлючОбъекта, КлючНастроек, Пользователь );

КонецФункции

#КонецОбласти

