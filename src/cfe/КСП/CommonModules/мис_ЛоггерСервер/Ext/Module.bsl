// 2022. this module retained for backward compatibility with unit-tests
#Область ПрограммныйИнтерфейс

Процедура Отладка(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт
	mis_LoggerServer.Отладка(ИдВызова, КраткоеОписание, ДетальноеОписание , СчетчикПовторов ) ;
КонецПроцедуры

Процедура Информация(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт

	mis_LoggerServer.Информация(ИдВызова, КраткоеОписание, ДетальноеОписание , СчетчикПовторов) ;
КонецПроцедуры

Процедура Предупреждение_(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт
	mis_LoggerServer.Предупреждение_(ИдВызова, КраткоеОписание, ДетальноеОписание , СчетчикПовторов) ;
КонецПроцедуры

Процедура Ошибка(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт
	mis_LoggerServer.Ошибка(ИдВызова, КраткоеОписание, ДетальноеОписание , СчетчикПовторов) ;
КонецПроцедуры

Процедура КритическаяОшибка(ИдВызова, КраткоеОписание, ДетальноеОписание = "", СчетчикПовторов = 0) Экспорт
	
	mis_LoggerServer.КритическаяОшибка(ИдВызова, КраткоеОписание, ДетальноеОписание , СчетчикПовторов) ;
КонецПроцедуры

//создает новый идентификатор вызова
//Параметры:
//	ИдВызоваРодитель 	- СправочникСсылка.мис_ИндексЛога - необязательный, ссылка на родительский вызов
//	Наименование 		- строка 			- обязательный, комментарий например «Импорт контрагентов из BO»
//	ВремяВызова 		- дата 				- время создания элемента (обычно - текущее)
//	МодульПроцедура 	- строка 			- обязательный, название модуля процедуры которую хотим видеть в логе
//	ПараметрыВызова 	- список значений 	- необязательный , хранилище значения со списком значений содержащее 
//		параметры вызова. Указываются только те параметры которые могут быть значимы для 
//		интерпретации сообщения.
//	Задание 			- СправочникСсылка.мис_УправлениеЗаданиями - задание, которое породило данный индекс лога
//Возвращаемое значение:
//	Ссылка на элемент справочника мис_ИндексЛога
//
Функция СоздатьИдВызова(ИдВызоваРодитель=Неопределено, Знач Наименование, Знач ВремяВызова,
	Знач МодульПроцедура, ПараметрыВызова, Задание = Неопределено) Экспорт
	
	return mis_LoggerServer.CreateRootLog(ИдВызоваРодитель, Наименование, ВремяВызова,
		МодульПроцедура, ПараметрыВызова, Задание );
КонецФункции

#КонецОбласти

#Область ЗаписьСообщения

//записывает сообщение в лог
//Параметры:
//	ИдВызова - объект справочника ИндексЛога
//	КраткоеОписание - строка
//	ВидСообщения - перечисление мис_ВидСообщения
//	ДетальноеОписание - строка
//Возвращаемое значение:
//	нет
//
Функция ЗаписатьСообщение(ИдВызова, КраткоеОписание, ВидСообщения, ДетальноеОписание="",Знач ДатаВремяСообщения = Неопределено, СчетчикПовторов=0, Уровень = 2) Экспорт
		return mis_LoggerServer.ЗаписатьСообщение(ИдВызова, КраткоеОписание, ВидСообщения, ДетальноеОписание,ДатаВремяСообщения , СчетчикПовторов, Уровень );
	
КонецФункции

#КонецОбласти

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	mis_LoggerServer.УстановкаПараметровСеанса(ИменаПараметровСеанса);
	
КонецПроцедуры

#Область Замер

//	Использование
// 		НачВремя = mis_LoggerServer.НачЗамер();
//		Длительность = mis_LoggerServer.ВремяОпер(НачВремя);
//		Сообщить("Время = "+строка(Длительность)+" мс");

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
// Использование
//	Вариант 1. Без возвращаемого значения.
//		
//	Логгер.НачЗамер();
//	Логгер.Инфо ("Начало отправки.");
//	Логгер.Инфо("Отправка завершена. Время " + Логгер.ВремяОпер());
//
//	Вариант 2. С использованием возвращаемого значения
//
//	ВремяНач = Логгер.НачЗамер();
//	Логгер.Инфо ("Начало отправки.");
//	Логгер.Инфо("Отправка завершена. Время " + Логгер.ВремяОпер(ВремяНач));
//
Функция НачЗамер() Экспорт
	
	Возврат mis_LoggerServer.НачЗамер() ;
	
КонецФункции
 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВремяОпер(Знач НачВремя) Экспорт
	
	Возврат mis_LoggerServer.ВремяОпер( НачВремя) ;
	
КонецФункции

// Возвращает строку, время операции + " мс", например "1254 мс"
Функция ВремяОперМС(Знач НачВремя = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НачВремя) Тогда
		Возврат "";
	КонецЕсли;
	Возврат Строка(ВремяОпер(НачВремя)) + " мс";
	
КонецФункции

#КонецОбласти

// Подключение в коде
//
	//// переменные модуля
	//Перем Логгер; // обработка  Logger
	//
	//// код для вставки в main-метод класса
	//
	//ПараметрыВызова=Новый СписокЗначений;
	//ПараметрыВызова.Добавить(мДатаНачала,"мДатаНачала");
	//ПараметрыВызова.Добавить(мДатаОкончания,"мДатаОкончания");
	//ПараметрыВызова.Добавить(ОбновитьНестартованные,"ОбновитьНестартованные");
	//мИдВызова = mis_LoggerServer.СоздатьИдВызова(
	//	ИдВызова, 
	//	"Обработка XXX метод YYY. Время запуска "+Строка(ТекущаяДатаСеанса()), 
	//	ТекущаяДатаСеанса(), 
	//	ИмяМетода,
	//	ПараметрыВызова);
	//Логгер = mis_LoggerServer.getLogger(мИдВызова);
	//ПараметрыВызова = Неопределено;
	//
	//Логгер.Инфо("Начало загрузки. Период: %1 - %2", Формат(мДатаНачала, "ДФ=dd.MM.yyyy") ,Формат(мДатаОкончания, "ДФ=dd.MM.yyyy"));
	//
	//ВремяНач = Логгер.НачЗамер();
	//
	//Логгер.Инфо("Начало рассылки");
	//
	//ВремяНач = Логгер.НачЗамер();
	//
	//... // действия
	//// Например, можно так передать ИдВызова
	//модуль.метод( Логгер.гетИдВызова() );
	//
	//Логгер.Инфо("Завершение рассылки. Время = %1 мс", Логгер.ВремяОпер(ВремяНач));
	//
	//// Конец код для вставки в main-метод класса

// Конструктор класса
// Параметры
//	ИдВызова - спр ИндексЛога - 
//	ИмяЛога - Строка - используется для генерации имени лога при записи в SQL: 
//		мИмяЛога = СокрЛП(Константы.фдЛогSQLDBName.Получить()) + "." + ИмяЛога;
Function getLogger(Знач ИдВызова = Неопределено, Знач ИмяЛога = Неопределено) Export
	
	return mis_LoggerServer.getLogger(ИдВызова ,  ИмяЛога );
	
EndFunction
 
// Конструктор класса
Function гетЛоггер(Знач ИдВызова = Неопределено, Знач ИмяЛога = Неопределено) Export
	
	return mis_LoggerServer.getLogger(ИдВызова ,  ИмяЛога );
	
EndFunction

#Область Подсистема_ЛогированиеВОбъектах

// подробнее смотрите в developers guide, глава "Стандартная библиотека Approvals"

// Обработчик события ПриЗаписи() в модуле объекта
Процедура ПриЗаписиОбъекта(ОбъектБД, Отказ) Экспорт
	
	mis_LoggerServer.Информация(ОбъектБД.ИдВызова, "ИНФО", "ПриЗаписи()");
	
КонецПроцедуры

// Обработчик события ПередЗаписью() в модуле объекта
Процедура ПередЗаписьюОбъекта(ОбъектБД, Отказ) Экспорт
	
	mis_LoggerServer.ПередЗаписьюОбъекта(ОбъектБД, Отказ);
	
КонецПроцедуры

// Обработчик события ПриКопировании() в модуле объекта
Процедура ПриКопированииОбъекта(НовыйОбъектБД, ОбъектКопирования) Экспорт
	
	mis_LoggerServer.ПриКопированииОбъекта(НовыйОбъектБД, ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

Процедура ТестАппендеров(Знач ИдВызова) Экспорт
	mis_LoggerServer.ТестАппендеров( ИдВызова);

КонецПроцедуры

Функция ВидСообщенияЖР(ВидСообщения) Экспорт
	
		Возврат mis_LoggerServer.ВидСообщенияЖР(ВидСообщения) ;
	
КонецФункции
