// +++ Функции для работы с JSON
Функция Экранировать(Стр)
	Х=СтрЗаменить(Стр,"""","\""");
	Х=СтрЗаменить(Х,"/","\/");
	Х=СтрЗаменить(Х,Символ(8),"\b");
	Х=СтрЗаменить(Х,Символы.ПФ,"\f");
	Х=СтрЗаменить(Х,Символы.ПС,"\n");
	Х=СтрЗаменить(Х,Символы.ВК,"\r");
	Х=СтрЗаменить(Х,Символы.ВТаб,"\t");
	Возврат Х
КонецФункции

Функция JSON(Значение,Форматировать=Ложь) Экспорт
	
	Возврат ФорматированныйJSON(Значение)
	
КонецФункции

Функция JsonTest(Данные, ЗаписьJSON) Экспорт 
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, , ,ЭкранированиеСимволовJSON.СимволыВнеASCII, , ,Истина, ,Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

//В функции конструкции условий расставлены по частоте их использования.
//Если кому нибудь удастся более оптимально (в смысле быстродействия) написать,
//то просьба сообщить мне на zhelateleva@retailcrm.ru
Функция НеФорматированныйJSON(Значение)
	Разделитель="";
	
	ТипЗн=ТипЗнч(Значение);
	
	Если ТипЗн=Тип("Строка") Тогда
		Стр=""""+Экранировать(Значение)+""""
		
	ИначеЕсли ТипЗн=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Булево") Тогда
		Стр=XMLСтрока(Значение)
		
	ИначеЕсли ТипЗн=Тип("Дата") Тогда
		Стр=""""+?(ЗначениеЗаполнено(Значение),XMLСтрока(Значение),"")+""""
		
	ИначеЕсли ТипЗн=Тип("Структура") ИЛИ ТипЗн=Тип("Соответствие") Тогда
		Стр="{";
		Для Каждого Параметр Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+""""+Параметр.Ключ+""":"+НеФорматированныйJSON(Параметр.Значение);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"}";
		
	ИначеЕсли ТипЗн=Тип("Массив") Тогда
		Стр="[";
		Для Каждого Элемент Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+НеФорматированныйJSON(Элемент);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"]";
		
	ИначеЕсли ТипЗн=Тип("ТаблицаЗначений") Тогда
		Колонки=Значение.Колонки;
		Массив=Новый Массив;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура=Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				Структура.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя])
			КонецЦикла;
			Массив.Добавить(Структура);
		КонецЦикла;
		Стр=НеФорматированныйJSON(Массив)
		
	ИначеЕсли Значение=Неопределено Тогда
		Стр="null"
		
	Иначе
		Стр=""""+Экранировать(Значение)+""""
	КонецЕсли;
	
	Возврат Стр
КонецФункции

//Функция более медленная, чем НеФорматированныйJSON,
//но дает более структурированное представление данных.
//Рекомендуется использовать её только в отладочных целях.
Функция ФорматированныйJSON(Значение,Отступ="")
	
	Разделитель="";
	
	ТипЗн=ТипЗнч(Значение);
	
	Если ТипЗн=Тип("Строка") Тогда
		Стр=""""+Экранировать(Значение)+""""
		
	ИначеЕсли ТипЗн=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Булево") Тогда
		Стр=XMLСтрока(Значение)
		
	ИначеЕсли ТипЗн=Тип("Дата") Тогда
		Стр=""""+?(ЗначениеЗаполнено(Значение),XMLСтрока(Значение),"")+""""
		
	ИначеЕсли ТипЗн=Тип("Структура") ИЛИ ТипЗн=Тип("Соответствие") Тогда
		Стр="{";
		Для Каждого Параметр Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+Отступ+""""+Параметр.Ключ+""":"+ФорматированныйJSON(Параметр.Значение,Отступ+Символы.Таб);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+Отступ+"}";
		
	ИначеЕсли ТипЗн=Тип("Массив") Тогда
		Стр="[";
		Для Каждого Элемент Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+Отступ+ФорматированныйJSON(Элемент,Отступ);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+Отступ+"]";
		
	ИначеЕсли ТипЗн=Тип("ТаблицаЗначений") Тогда
		Колонки=Значение.Колонки;
		Массив=Новый Массив;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура=Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				Структура.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя])
			КонецЦикла;
			Массив.Добавить(Структура);
		КонецЦикла;
		Стр=ФорматированныйJSON(Массив)
		
	ИначеЕсли Значение=Неопределено Тогда
		Стр="null"
		
	Иначе
		Стр=""""+Экранировать(Значение)+""""
	КонецЕсли;
	
	Возврат Стр
	
КонецФункции

Функция UnJSON(СтрJSON) Экспорт
	
	Перем Значение;
	
	Если ПолучитьЗначениеJSON(СтрJSON,Значение)=0 Тогда
		Возврат Значение
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции 

Функция UnJSONТест(СтрJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрJSON);
	Структура = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Возврат Структура
	
КонецФункции

Функция Hex2Число(Hex)
	
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	
	Для Х=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Х,1))*Pow(16,СтрДлина(Стр)-Х)
	КонецЦикла;
	
	Возврат Dec
	
КонецФункции

Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;                    
	
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
	
КонецФункции

Функция ЗначениеВКавычках(ЗначениеВСтроке)
	
	//Это или строка или дата.
	//Дата не обрабатывается
	//Всегда возвращаем просто строку
	Возврат ЗначениеВСтроке
	
КонецФункции

Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	
	//Это число, булево или null.
	//Хотя здесь могут быть и строки. Например: {Code:123}
	Стр=ВРег(ЗначениеВСтроке);
	Если Стр="TRUE" Тогда Возврат Истина
	ИначеЕсли Стр="FALSE" Тогда Возврат Ложь
	ИначеЕсли Стр="NULL" Тогда Возврат Неопределено
	КонецЕсли;
	
	//Пробежимся по предполагаемому "числу"
	Экспонента=Ложь;
	ХХ=" ";
	Для Индекс=1 По СтрДлина(Стр) Цикл
		Х=Сред(Стр,Индекс,1);
		Если Найти("0123456789.+-",Х) Тогда
			ХХ=ХХ+Х
		ИначеЕсли Х="E" Тогда
			Экспонента=Истина;
			УУ=XMLЗначение(Тип("Число"),ХХ);
			ХХ=" ";
		Иначе
			Возврат ЗначениеВСтроке //Это точно не число, а строка
		КонецЕсли;
	КонецЦикла;
	
	ХХ=XMLЗначение(Тип("Число"),ХХ);
	Если Экспонента Тогда
		ХХ=УУ*Pow(10,ХХ)
	КонецЕсли;
	
	Возврат ХХ
	
КонецФункции

Функция ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция=1,Ключ="")
	
	Перем Кавычка;
	
	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;
	
	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Х=Лев(ХХ,1);
		Позиция=Позиция+1;
		
		Если Х>" " ИЛИ Строка Тогда //Отсекаем всякий хлам
			
			Если Комментарий Тогда
				//Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ="*/" Тогда
					//Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;
				
			ИначеЕсли Х="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ //перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС //перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК //возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб //символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); //шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;
				
			ИначеЕсли Строка Тогда
				//Если строка не закончилась - то пропускаем управляющие символы
				Если Х=Кавычка Тогда
					//Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Х;
				КонецЕсли;
				
			ИначеЕсли ХХ="/*" Тогда
				//Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;
				
			ИначеЕсли Найти("""'{}[]:,",Х)>0 Тогда
				Если Х="""" ИЛИ Х="'" Тогда
					//Началась строка
					//Строка - коллекция нуля или больше символов Unicode, заключенная в
					//двойные кавычки, используя "\" в качестве символа экранирования.
					//Символ представляется как односимвольная строка.
					//Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Х;
					Кавычек=Кавычек+1;
					
				ИначеЕсли Х="{" Тогда
					//Начался объект
					//Объект - неупорядоченный набор пар ключ/значение.
					//Объект начинается с "{" и заканчивается "}".
					//Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект=Новый Соответствие;
					//Объект=Новый Структура;
					Пока Истина Цикл
						//Получим ключ и значение
						Ключ="";
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция,Ключ);
						//0 - есть значение и не конец объекта (запятая)
						//1 - есть значение и конец объекта
						//2 - нет значения и не конец объекта (запятая)
						//3 - нет значения и конец объекта
						Если Режим=0 Тогда
							Объект.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							Объект.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=Объект;
					Возврат 0
					
				ИначеЕсли Х="[" Тогда
					//Начался массив
					//Массив - упорядоченная коллекция значений.
					//Массив начинается с "[" и заканчивается "]".
					//Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
						//0 - есть значение и не конец массива (запятая)
						//1 - есть значение и конец массива
						//2 - нет значения и не конец массива (запятая)
						//3 - нет значения и конец массива
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим=1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=Массив;
					Возврат 0
					
				ИначеЕсли Х="]" ИЛИ Х="}" Тогда
					//Закончился массив/объект
					Если ЗначениеВСтроке="" И Кавычек=0 Тогда
						Возврат 3 //нет значения и конец массива/объекта
					Иначе
						Значение=ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 //есть значение и конец массива/объекта
					КонецЕсли;
					
				ИначеЕсли Х=":" Тогда
					Ключ=ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
					
				Иначе
					// запятая
					Прервать
				КонецЕсли;
				
			Иначе
				ЗначениеВСтроке=ЗначениеВСтроке+Х;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Кавычек>0 Тогда
		Значение=ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2
		Иначе
			Значение=ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0
	
КонецФункции

&НаСервере
Функция Перекодировка(Текст) Экспорт
	
	Кодировать = Ложь;
	
	ИсходнаяСтрока = СокрЛП(Текст);
	
	Если СтрДлина(ИсходнаяСтрока)>0 Тогда
		
		Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Кодировать = истина;
				//если есть хотя бы 1 символ кириллицы - нужна перекодировка
				Прервать;
			ИначеЕсли Найти(ИсходнаяСтрока, Символ(160)) Тогда     //поиск неразрывного пробела
				Кодировать = истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Кодировать Тогда 
		
		НомПозиции 	= 0;
		РезТекст 	= "";
		
		ДлинаТекста = СтрДлина(Текст);
		
		Пока НомПозиции < ДлинаТекста Цикл
			
			ТекСимв = Сред(Текст, НомПозиции + 1, 1);
			
			КодСимв = СокрЛП(Из_10(КодСимвола(ТекСимв), 16));
			
			Пока СтрДлина(КодСимв) < 4 Цикл
				КодСимв = "0" + КодСимв;
			КонецЦикла;
			
			ПерекодированныйСомвол = "\u" + КодСимв;
			
			РезТекст = РезТекст + ПерекодированныйСомвол;
			
			НомПозиции = НомПозиции + 1;
			
		КонецЦикла; 
		
		Возврат РезТекст;
		
	Иначе 
		Возврат Текст;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Функция ДатаВремяДляCRM(ПреобразуемаяДата, СоВременем = Истина) Экспорт
	
	// Возвращает дату в формате 2014-03-21 
	//05:14:07
	
	Если ТипЗнч(ПреобразуемаяДата) <> Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемаяДата = "" + Формат(Год(ПреобразуемаяДата), "ЧГ=0") + 
	"-" + ?(СтрДлина(Месяц(ПреобразуемаяДата)) = 1, "0", "") 	+ Месяц(ПреобразуемаяДата)	+ 
	"-" + ?(СтрДлина(День(ПреобразуемаяДата)) = 1, "0", "") 	+ День(ПреобразуемаяДата);
	
	Если СоВременем Тогда
		ВозвращаемаяДата = ВозвращаемаяДата + " " + 
		?(СтрДлина(Час(ПреобразуемаяДата)) 		= 1, "0", "") 	+ Час(ПреобразуемаяДата) 	+ ":" + 
		?(СтрДлина(Минута(ПреобразуемаяДата)) 	= 1, "0", "") 	+ Минута(ПреобразуемаяДата) + ":" + 
		?(СтрДлина(Секунда(ПреобразуемаяДата)) 	= 1, "0", "") 	+ Секунда(ПреобразуемаяДата);
	КонецЕсли;
	
	Возврат ВозвращаемаяДата
	
КонецФункции

&НаСервере
Функция Из_10(Значение = 0, Нотация = 36) Экспорт
	
	Если Нотация<=0 Тогда Возврат("") КонецЕсли;
	Значение=Число(Значение);
	
	Если Значение<=0 Тогда Возврат("0") КонецЕсли;
	Значение=Цел(Значение);
	Результат="";
	
	Пока Значение>0 Цикл
		Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%Нотация+1,1)+Результат;
		Значение=Цел(Значение/Нотация) ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// --- Функции для работы с JSON

// +++ Работа с HTTP +++
Функция HTTPзапросGET(АдресСервера,АдресСкрипта) Экспорт
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
	
	HTTP_Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	HTTP_Соединение.Получить(АдресСкрипта,ИмяФайлаОтвета);	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	ТекстОтвета = Новый ТекстовыйДокумент();
	ТекстОтвета.Прочитать(ИмяФайлаОтвета,"utf-8");
	
	возврат ТекстОтвета.ПолучитьТекст();
	
	// +++ Работает на 8.2	+++
	//HTTP_Соединение = Новый COMОбъект("Microsoft.XMLHTTP");
	//HTTP_Соединение.Open("GET", "https://" + АдресСервера + АдресСкрипта, 0);
	//HTTP_Соединение.Send();
	//
	//возврат HTTP_Соединение.responseText; 
	// ---
	
КонецФункции

Функция HTTPзапросPOST(АдресСервера,АдресСкрипта,НаборПеременных) Экспорт
	// Набор переменных это соответствие ключ - имя переменной, значение - значение
	// Если переменная массив, то Массив должен быть оформлен в виде соответствия
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");	
	ИмяФайлаОтвета = КаталогВременныхФайлов() + Boundary + ".tmp";
	ИмяФайлаТелаЗапроса = ПолучитьИмяВременногоФайла("txt");
	
	попытка
		ФайлТелаЗапроса = Новый ЗаписьТекста(ИмяФайлаТелаЗапроса, КодировкаТекста.ANSI, Символы.ПС, Ложь);
	исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	// +++ добавляем переменные в тело запроса +++	
	Для каждого стр из НаборПеременных Цикл
		Если строка(типЗнч(стр.Значение)) = "Соответствие" Тогда
			Для каждого суб_стр из стр.Значение Цикл
				Если строка(типЗнч(суб_стр.Значение)) = "Соответствие" Тогда
					Для каждого суб_суб_стр из суб_стр.Значение Цикл
						ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
						ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"["+суб_стр.Ключ+"][" + суб_суб_стр.Ключ + "]" + Символы.ПС);
						ФайлТелаЗапроса.ЗаписатьСтроку(суб_суб_стр.Значение);
					КонецЦикла;
				Иначе
					ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
					ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"["+суб_стр.Ключ+"]" + Символы.ПС);
					ФайлТелаЗапроса.ЗаписатьСтроку(суб_стр.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
			ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"""" + Символы.ПС);
			ФайлТелаЗапроса.ЗаписатьСтроку(стр.Значение);
		КонецЕсли;		
	КонецЦикла;	
	// --- добавляем переменные в тело запроса ---
	
	ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary + "--");
	ФайлТелаЗапроса.Закрыть();
	
	ФайлОтправки = Новый Файл(ИмяФайлаТелаЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие(); 
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
	ЗаголовокHTTP.Вставить("Referer", СерверИсточник);
	
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	ЗаголовокHTTP.Вставить("Content-Length", XMLСтрока(ФайлОтправки.Размер()));
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
	
	HTTP_Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	HTTP_Соединение.ОтправитьДляОбработки(ИмяФайлаТелаЗапроса, АдресСкрипта, ФайлРезультата, ЗаголовокHTTP);
	
	ТекстОтвета = Новый ТекстовыйДокумент();
	ТекстОтвета.Прочитать(ФайлРезультата,"utf-8");
	ТекстОтвета = ТекстОтвета.ПолучитьТекст();
	
	Возврат(ТекстОтвета);
	
КонецФункции

Функция HTTPзапросPOSTАрхив(АдресСервера,АдресСкрипта,НаборПеременных) Экспорт
	// Набор переменных это соответствие ключ - имя переменной, значение - значение
	// Если переменная массив, то Массив должен быть оформлен в виде соответствия
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");	
	ИмяФайлаОтвета = КаталогВременныхФайлов() + Boundary + ".tmp";
	ИмяФайлаТелаЗапроса = ПолучитьИмяВременногоФайла("txt");
	
	попытка
		ФайлТелаЗапроса = Новый ЗаписьТекста(ИмяФайлаТелаЗапроса, КодировкаТекста.ANSI, Символы.ПС, Ложь);
	исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	// +++ добавляем переменные в тело запроса +++	
	Для каждого стр из НаборПеременных Цикл
		Если строка(типЗнч(стр.Значение)) = "Соответствие" Тогда
			Для каждого суб_стр из стр.Значение Цикл
				Если строка(типЗнч(суб_стр.Значение)) = "Соответствие" Тогда
					Для каждого суб_суб_стр из суб_стр.Значение Цикл
						ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
						ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"["+суб_стр.Ключ+"][" + суб_суб_стр.Ключ + "]" + Символы.ПС);
						ФайлТелаЗапроса.ЗаписатьСтроку(суб_суб_стр.Значение);
					КонецЦикла;
				Иначе
					ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
					ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"["+суб_стр.Ключ+"]" + Символы.ПС);
					ФайлТелаЗапроса.ЗаписатьСтроку(суб_стр.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
			ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"""" + Символы.ПС);
			ФайлТелаЗапроса.ЗаписатьСтроку(стр.Значение);
		КонецЕсли;		
	КонецЦикла;	
	// --- добавляем переменные в тело запроса ---
	
	ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary + "--");
	ФайлТелаЗапроса.Закрыть();
	
	ФайлОтправки = Новый Файл(ИмяФайлаТелаЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие(); 
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
	ЗаголовокHTTP.Вставить("Referer", СерверИсточник);
	
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	ЗаголовокHTTP.Вставить("Content-Length", XMLСтрока(ФайлОтправки.Размер()));
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
	
	HTTP_Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	Попытка
		HTTP_Соединение.ОтправитьДляОбработки(ИмяФайлаТелаЗапроса, АдресСкрипта, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ФайлРезультата,"utf-8");
		ТекстОтвета = ТекстОтвета.ПолучитьТекст();
		
		Возврат(ТекстОтвета);
	КонецПопытки;
	
	ТекстОтвета = Новый ТекстовыйДокумент();
	ТекстОтвета.Прочитать(ФайлРезультата,"utf-8");
	ТекстОтвета = ТекстОтвета.ПолучитьТекст();
	
	Возврат(ТекстОтвета);
	
КонецФункции
// --- Работа с HTTP --- 

Функция ПолучитьНомерЗаказа(номЗаказа) Экспорт
	
	Попытка
		Префикс = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксЗаказов");
		ном = Сред(номЗаказа,стрДлина(Префикс)+1);
		возврат Формат(Число(ном),"ЧГ=");
	Исключение
		//возврат Неопределено;
		//ЕНС
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// ЕНС. Создание/Обновление Заказа во внешней системе
// Используется метод АПИ:
//	https://docs.retailcrm.ru/Developers/API/APIVersions/APIv5#post--api-v5-orders-externalId-edit
// Если была ошибка, она обрабатывается в методе:
//		ОбработатьОтветВыгрузкиЗаказа();
//
Процедура ВыгрузитьЗаказВCRM(док, Отменить = Ложь) Экспорт
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	
	//поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.Ссылка, СвойствоЗаказовМагазин);
	
	переменные.Вставить("site", КодМагазина);	
	
	СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
	
	//Созданные в 1С заказы не будут переданы в retailCRM. Для того чтобы передавать такие заказы, необходимо убрать возврат и добавить условие 
	//перед отправкой HTTPзапросPOST. Создавать заказы необходимо методом /api/v5/orders/create, и из полученного ответа забирать id заказа и 
	//записывать его в доп.сведение заказа покупателя, чтобы при повторной выгрузке из 1С, заказ не был создан в retailCRM повторно.
	Если НомерЗаказа = "" Тогда 
		Сообщить ("Заказы, созданные в 1С, не выгружаются в retailCRM в рамках шаблонного решения.");
		Возврат
	КонецЕсли;
	
	НоменклатураДоставки = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	товары = Новый Массив();			
	Для каждого стр из Док["Товары"] Цикл
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Доставка = Новый Соответствие();
			СтоимостьДоставки = стр.Количество * стр.Цена;
			Продолжить;
		КонецЕсли;
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + Док.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		товар.Вставить("productName",	стр.Номенклатура.Наименование);
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		Если ЗначениеЗаполнено(стр.ВидЦены) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			
			ТипЦены = Новый Соответствие();
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда 
				КодТипаЦены = ТипыЦен.Найти(стр.ВидЦены, "ТипЦены");
				Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
					ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
					товар.Вставить("priceType", ТипЦены);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
		//передача признака отмены строки
		Если стр.Отменено = Истина или Отменить = Истина Тогда 
			Статус = "failure";
			товар.Вставить("status", Статус);
		Иначе 
			Если стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда 
				товар.Вставить("status", "in-reserve");
			ИначеЕсли 
				стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				Если док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда 
					товар.Вставить("status", "ready-for-assembly");
				ИначеЕсли  
					док.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда 
					товар.Вставить("status", "sold");
				КонецЕсли;
			ИначеЕсли 
				стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда 
				товар.Вставить("status", "confirming");
			КонецЕсли;
		КонецЕсли;
		
		РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		//при ПЛ
		Если стр.crm_СкидкаПЛ > 0 Тогда 
			СкидкаПЛ = стр.crm_СкидкаПЛ;
			ОбщаяСкидка = (стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки - СкидкаПЛ)/стр.Количество;
		КонецЕсли;
		//при ПЛ
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0);       
		
		Если ЗначениеЗаполнено(стр.crm_idПозиции) Тогда 
			товар.Вставить("id",	СокрЛП(Формат(стр.crm_idПозиции, "ЧГ=0")));	
		КонецЕсли;
		
		ИдентификаторыПозиции = Новый Массив();
		ИдентифПоз = Новый Соответствие();
		ИдентифПоз.Вставить("code",		"1C");		
		ИдентифПоз.Вставить("value",	стр.ИдентификаторСтроки);
		ИдентификаторыПозиции.Добавить(ИдентифПоз);
		
		товар.Вставить("externalIds",			ИдентификаторыПозиции);
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ = Новый Соответствие();
	
	заказ.Вставить("items",товары);
	заказ.Вставить("customerComment", СокрЛП(Док.Комментарий));
	заказ.Вставить("managerComment",  "");	
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	Если СтоимостьДоставки <> Неопределено Тогда 
		Доставка.Вставить("cost",		Формат(СтоимостьДоставки, 	"ЧРД=.; ЧГ=0"));
		Доставка.Вставить("netCost",	Формат(СтоимостьДоставки, 	"ЧРД=.; ЧГ=0"));
	КонецЕсли;
	
	Если Доставка <> Неопределено Тогда 
		заказ.Вставить("delivery", Доставка);
	КонецЕсли;
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	Эталонная = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная");
	//статус заказа
	СтатусЗаказа = "";
	
	Если Эталонная Тогда
		СостояниеЗаказа = crm_RetailCRMОбработка.УТ11_ПолучитьСостояниеЗаказа(док);
		
		Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки  Тогда 
			Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
				заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
			КонецЕсли;
			Отгрузка	 = false;
		ИначеЕсли 
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию или
			СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
			Отгрузка	 = true;
		КонецЕсли;
		
		ТабСостояний = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТабСостояний");
		Если ТабСостояний <> Неопределено Тогда 
			НайдСтр = ТабСостояний.Найти(СостояниеЗаказа, "Состояние");
			Если ЗначениеЗаполнено(НайдСтр) Тогда 
				СтатусЗаказа = НайдСтр.Название;
			КонецЕсли;
			
			Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда 
				//если все строки отменены то и заказ отменен
				ЗаказОтменен = Истина;
				Для Каждого строкаТЧ из док.Товары Цикл
					Если строкаТЧ.Отменено = Ложь Тогда 
						ЗаказОтменен = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Отменить = Истина или ЗаказОтменен = Истина Тогда
			СтатусЗаказа = "cancel-other";
			Отгрузка	 = false;
		КонецЕсли;
	Иначе 
		
		Если Док.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда  
			СтатусЗаказа =	"new";
			Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
				заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
			КонецЕсли;
			Отгрузка	 = false;
		ИначеЕсли Док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению или док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда  
			//если строки отгружены то отгружен
			СтрокиОтгружены = Истина;
			Для Каждого строкаТЧ из док.Товары Цикл
				Если строкаТЧ.Номенклатура <> НоменклатураДоставки и строкаТЧ.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить и строкаТЧ.Отменено = Ложь Тогда 
					СтрокиОтгружены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиОтгружены Тогда 
				СтатусЗаказа = "for-shipment";
				Отгрузка	 = true;
			Иначе 
				СтатусЗаказа = "assembling";
				Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
					заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
				КонецЕсли;
				Отгрузка	 = false;
			КонецЕсли;
		ИначеЕсли Док.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда 
			//если все строки отменены то и заказ отменен
			ЗаказОтменен = Истина;
			Для Каждого строкаТЧ из док.Товары Цикл
				Если строкаТЧ.Отменено = Ложь Тогда 
					ЗаказОтменен = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗаказОтменен Тогда 
				СтатусЗаказа = "cancel"; 
				Отгрузка	 = false;
			Иначе 
				СтатусЗаказа = "complete";
				Отгрузка	 = true;
			КонецЕсли;
		КонецЕсли;
		
		Если Отменить = Истина  Тогда
			СтатусЗаказа = "cancel";
			Отгрузка	 = false;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусЗаказа) Тогда 
		заказ.Вставить("status",	СтатусЗаказа);
	КонецЕсли;
	
	Если Отгрузка <> Неопределено Тогда 
		заказ.Вставить("shipped",	Отгрузка);
	КонецЕсли;
	
	ПользПоля = Новый Соответствие();    
	ПользПоля.Вставить("nomer1c",Строка((Док.Номер)));
	ПользПоля.Вставить("update_api1c",ТекущаяДата());
	заказ.Вставить("customFields", ПользПоля);  
	
	переменные.Вставить("by",	 "id");	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/" + НомерЗаказа + "/edit", переменные);
	
	ответ = UnJSONТест(ответ);
	
	Если ответ["success"] = Истина Тогда
		Сообщить("Заказ успешно выгружен в RetailCRM");
		ПрописатьИДТоваровИзCRM(Док.Ссылка, НомерЗаказа, ответ);
	Иначе
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИмяСервера");
		СтруктураПараметров.Вставить("КлючCRM");
		СтруктураПараметров.Вставить("КодМагазина");
		СтруктураПараметров.Вставить("ИдентифТовара");
		СтруктураПараметров.Вставить("НомерЗаказа");
		СтруктураПараметров.Вставить("offers_id");
		СтруктураПараметров.Вставить("НоменклатураДоставки");
		СтруктураПараметров.Вставить("Доставка");
		СтруктураПараметров.Вставить("СостояниеЗаказа");
		СтруктураПараметров.Вставить("Отменить"); 
		СтруктураПараметров.Вставить("СтатусЗаказа");
		СтруктураПараметров.Вставить("Отгрузка");
		
		СтруктураПараметров.ИмяСервера    	= ИмяСервера;
		СтруктураПараметров.КлючCRM    		= КлючCRM;
		СтруктураПараметров.КодМагазина    	= КодМагазина;
		СтруктураПараметров.ИдентифТовара	= ИдентифТовара;
		СтруктураПараметров.НомерЗаказа		= НомерЗаказа;
		СтруктураПараметров.offers_id		= offers_id;
		СтруктураПараметров.НоменклатураДоставки	= НоменклатураДоставки;
		СтруктураПараметров.Доставка    	= Доставка;
		СтруктураПараметров.СостояниеЗаказа = СостояниеЗаказа;
		СтруктураПараметров.Отменить    	= Отменить;
		СтруктураПараметров.СтатусЗаказа    = СтатусЗаказа;
		СтруктураПараметров.Отгрузка    	= Отгрузка;
		ExternalIds = Ложь;
		ОбработатьОтветВыгрузкиЗаказа(ответ, док, СтруктураПараметров, ExternalIds); 
		//Если Найти(ответ, """success"":true") > 0 Тогда
		Если ответ <> Неопределено Тогда 
			Если НЕ ТипЗнч(ответ) = Тип("Соответствие") Тогда
				ответ = UnJSONТест(ответ);
			КонецЕсли;
			
			Если ответ["success"] = Истина Тогда
				Сообщить("Заказ успешно выгружен в RetailCRM"); 
			Иначе 
				Сообщить("Трудности с выгрузкой документа: " + Док + " в retailCRM. Заказ не выгружен", СтатусСообщения.Важное);
				Сообщить("Возможно в заказе имеются повторяющие строки", СтатусСообщения.Важное);
			КонецЕсли;
		Иначе 
			Сообщить("Трудности с выгрузкой документа: " + Док + " в retailCRM. Заказ не выгружен", СтатусСообщения.Важное);
			Сообщить("Возможно в заказе имеются повторяющие строки", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли; 
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") = Истина Тогда
		ВыгрузитьБрониВCRM(док);	
	КонецЕсли;
	
КонецПроцедуры

// ЕНС. Название метода не отражает его суть - Обновление Заказа во внешней системе
// Используется метод АПИ:
//	https://docs.retailcrm.ru/Developers/API/APIVersions/APIv5#post--api-v5-orders-externalId-edit
// Если была ошибка, она обрабатывается в методе:
//		ОбработатьОтветВыгрузкиЗаказа();
//
Процедура ВыгрузитьExternalIdsТоваров (док) Экспорт
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	
	//поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.Ссылка, СвойствоЗаказовМагазин);
	
	переменные.Вставить("site", КодМагазина);	
	
	СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
	
	//Созданные в 1С заказы не будут переданы в retailCRM. Для того чтобы передавать такие заказы, необходимо убрать возврат и добавить условие 
	//перед отправкой HTTPзапросPOST. Создавать заказы необходимо методом /api/v5/orders/create, и из полученного ответа забирать id заказа и 
	//записывать его в доп.сведение заказа покупателя, чтобы при повторной выгрузке из 1С, заказ не был создан в retailCRM повторно.
	Если НомерЗаказа = "" Тогда 
		Сообщить ("Заказы, созданные в 1С, не выгружаются в retailCRM в рамках шаблонного решения.");
		Возврат
	КонецЕсли;
	
	НоменклатураДоставки = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	
	товары = Новый Массив();			
	Для каждого стр из Док["Товары"] Цикл
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Доставка = Новый Соответствие();
			СтоимостьДоставки = стр.Количество * стр.Цена;
			Продолжить;
		КонецЕсли;
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + Док.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		Если ЗначениеЗаполнено(стр.ВидЦены) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			
			ТипЦены = Новый Соответствие();
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда
				КодТипаЦены = ТипыЦен.Найти(стр.ВидЦены, "ТипЦены");
				Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
					ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
					товар.Вставить("priceType", ТипЦены);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//передача признака отмены строки
		Если стр.Отменено = Истина Тогда 
			Статус = "failure";
			товар.Вставить("status", Статус);
		КонецЕсли;
		
		ОбщаяСкидка = 0;
		
		Если стр.Количество > 0 Тогда 
			РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
			АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
			ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		КонецЕсли;
		
		//при ПЛ
		Если стр.crm_СкидкаПЛ > 0 Тогда 
			СкидкаПЛ = стр.crm_СкидкаПЛ;
			ОбщаяСкидка = (стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки - СкидкаПЛ)/стр.Количество;
		КонецЕсли;
		//при ПЛ
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0);       
		
		Если ЗначениеЗаполнено(стр.crm_idПозиции) Тогда 
			товар.Вставить("id",	СокрЛП(Формат(стр.crm_idПозиции, "ЧГ=0")));	
		КонецЕсли;
		
		ИдентификаторыПозиции = Новый Массив();
		ИдентифПоз = Новый Соответствие();
		ИдентифПоз.Вставить("code",		"1C");		
		ИдентифПоз.Вставить("value",	стр.ИдентификаторСтроки);
		ИдентификаторыПозиции.Добавить(ИдентифПоз);
		
		товар.Вставить("externalIds",			ИдентификаторыПозиции);
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ = Новый Соответствие();
	
	заказ.Вставить("items",товары);
	
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);

	переменные.Вставить("by",	 "id");	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	//https://docs.retailcrm.ru/Developers/API/APIVersions/APIv5#post--api-v5-orders-externalId-edit
	ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/" + НомерЗаказа + "/edit", переменные);
	
	ответ = UnJSONТест(ответ);
	
	Если ответ["success"] = Истина Тогда
		Сообщить("Идентификаторы обновлены в RetailCRM");
	Иначе 
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИмяСервера");
		СтруктураПараметров.Вставить("КлючCRM");
		СтруктураПараметров.Вставить("КодМагазина");
		СтруктураПараметров.Вставить("ИдентифТовара");
		СтруктураПараметров.Вставить("НомерЗаказа");
		СтруктураПараметров.Вставить("offers_id");
		СтруктураПараметров.Вставить("НоменклатураДоставки"); 
		
		СтруктураПараметров.ИмяСервера    	= ИмяСервера;
		СтруктураПараметров.КлючCRM    		= КлючCRM;
		СтруктураПараметров.КодМагазина    	= КодМагазина;
		СтруктураПараметров.ИдентифТовара	= ИдентифТовара;
		СтруктураПараметров.НомерЗаказа		= НомерЗаказа;
		СтруктураПараметров.offers_id		= offers_id;
		СтруктураПараметров.НоменклатураДоставки			= НоменклатураДоставки;
		Сообщить("Трудности с обновлением идентификаторов: " + Док + " в retailCRM. Идентификаторы не обновлены", СтатусСообщения.Важное);
		//обработать ошибку 
		ExternalIds = Истина;
		ОбработатьОтветВыгрузкиЗаказа(ответ, док, СтруктураПараметров, ExternalIds);
		Если ответ <> Неопределено Тогда 
			Если НЕ ТипЗнч(ответ) = Тип("Соответствие") Тогда
				ответ = UnJSONТест(ответ);
			КонецЕсли;
        	Если ответ["success"] = Истина Тогда
				Сообщить("Идентификаторы обновлены в RetailCRM");
			КонецЕсли;
		Иначе 
			Сообщить("Трудности с выгрузкой документа: " + Док + " в retailCRM. Заказ не выгружен", СтатусСообщения.Важное);
			Сообщить("Возможно в заказе имеются повторяющие строки", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыгрузитьОплатуВCRM(докОплаты, Отменить = Ложь, ИДОплаты,ТипДокументаОплаты, КодОплаты) Экспорт  	
	
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	
	//если в документе был заполнен ИД и тип то берем этот тип, если нет, ищем в таблице
	Если Не ЗначениеЗаполнено(КодОплаты) Тогда 
		ТипыОплат = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеТиповОплатИз1С");
		Если ТипыОплат = Неопределено Тогда 
			Сообщить("Оплата не выгружена в RetailCRM так как не заполнена таблица соответсвия оплат. Перейдите на вкладку Оплаты > Выгрузка из 1С и заполните соответствие");
			Возврат;
		КонецЕсли;
		КодыТиповОплат = ТипыОплат.НайтиСтроки(Новый Структура("Документ", ТипДокументаОплаты)); 
		//если в таблице несколько строк с одинаковым типом документа, ищем по терминалу
		Если КодыТиповОплат <> Неопределено Тогда 
			Если КодыТиповОплат.Количество() = 1 Тогда 
				КодОплаты = КодыТиповОплат[0].КодCRM;	
			ИначеЕсли КодыТиповОплат.Количество() > 1 Тогда 
				//идем по массиву и ищем строку с подходящим терминалом
				Для Каждого стрОпл из КодыТиповОплат Цикл 
					Если ЗначениеЗаполнено(стрОпл.Терминал) и докОплаты.ЭквайринговыйТерминал = стрОпл.Терминал Тогда 
						КодОплаты = стрОпл.КодCRM;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КодОплаты = Неопределено Тогда
		Сообщить("В таблицу соответствия оплат не внесен данный тип документа. Оплата не будет выгружена в RetailCRM");
	Иначе 
		Для каждого стр Из докОплаты.РасшифровкаПлатежа Цикл 
			докЗаказа = стр.ОснованиеПлатежа;   		
			
			Если ЗначениеЗаполнено(докЗаказа) и ТипЗнч(докЗаказа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда //и Лев(докЗаказа.Комментарий,1) = "#" Тогда
				
				СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
				КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докЗаказа.Ссылка, СвойствоЗаказовМагазин);
				
				СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
				НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докЗаказа.ссылка, СвойствоЗаказов);
				НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
				
				Если НомерЗаказа = "" Тогда 
					Сообщить ("Документ-основание платежа отсутствует в RetailCRM, оплата не выгружена.");
					Возврат;
				КонецЕсли;
				
				Платеж = Новый Соответствие();
				
				Платеж.Вставить("amount",		Формат(стр.Сумма, "ЧРД=.; ЧГ=0"));
				ПлатежЗ = Новый Соответствие();
				ПлатежЗ.Вставить("id",			НомерЗаказа);
				Платеж.Вставить("order", 		ПлатежЗ);
				Платеж.Вставить("type",			КодОплаты);
				Если Отменить = Истина Тогда 
					Платеж.Вставить("status",		"not-paid");
				Иначе 
					Платеж.Вставить("status",		"paid");
				КонецЕсли;
				
				перемен = Новый Соответствие();
				перемен.Вставить("payment",	JsonTest(Платеж,Новый ЗаписьJSON));
				перемен.Вставить("apiKey",	КлючCRM);
				перемен.Вставить("site",	КодМагазина);
				
				Если не ЗначениеЗаполнено(ИДОплаты) или ИДОплаты = "" Тогда 
					//создаем оплату
					ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/create" , перемен);
					
					Если Найти(Ответ, "success"":true") > 0 Тогда
						Сообщить ("Выгружена оплата в RetailCRM");
						
						ответ = UnJSONТест(ответ);
						ИДОплаты = Формат(ответ["id"], "ЧГ=0");
						
						Если ТипЗнч(докОплаты) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 
							СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПриходныйКассовыйОрдер);
							СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПриходныйКассовыйОрдер);
						ИначеЕсли ТипЗнч(докОплаты) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда 
							СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств);
							СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств);
						ИначеЕсли ТипЗнч(докОплаты) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда 
							СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
							СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);	
						КонецЕсли;
						crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докОплаты.Ссылка, СвойствоОплаты, ИДОплаты);
						crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докОплаты.Ссылка, СвойствоТип, КодОплаты);
					Иначе
						Сообщить("Трудности с выгрузкой оплаты в RetailCRM");
					КонецЕсли;
					
				Иначе 
					//редактируем оплату
					перемен.Вставить("by", "id");
					ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/" + ИДОплаты + "/edit", перемен);
					
					Если Найти(Ответ, "success"":true") > 0 Тогда
						Сообщить ("Изменена оплата в RetailCRM")	
					Иначе
						Сообщить("Трудности с редактированием оплаты в RetailCRM");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьВозвратОплатыВCRM(докВозврОплаты, Отменить = Ложь, ИДОплаты, ТипДокументаОплаты, КодОплаты) Экспорт  	
	
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	
	Если ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		//проверяем сумму оплаты и сумму возврата
		СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
	ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПриходныйКассовыйОрдер);
	ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств);
	КонецЕсли;
	
	//если в документе был заполнен ИД и тип то берем этот тип, если нет, ищем в таблице
	Если Не ЗначениеЗаполнено(КодОплаты) Тогда 
		ТипыОплат = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеТиповОплатИз1С");
		Если ТипыОплат = Неопределено Тогда 
			Сообщить("Оплата не выгружена в RetailCRM так как не заполнена таблица соответствия оплат. Перейдите на вкладку Оплаты > Выгрузка из 1С и заполните соответствие");
			Возврат;
		КонецЕсли;
		КодыТиповОплат = ТипыОплат.НайтиСтроки(Новый Структура("Документ", ТипДокументаОплаты)); 
		//если в таблице несколько строк с одинаковым типом документа, ищем по терминалу
		Если КодыТиповОплат <> Неопределено Тогда 
			Если КодыТиповОплат.Количество() = 1 Тогда 
				КодОплаты = КодыТиповОплат[0].КодCRM;	
			ИначеЕсли КодыТиповОплат.Количество() > 1 Тогда 
				//идем по массиву и ищем строку с подходящим терминалом
				Для Каждого стрОпл из КодыТиповОплат Цикл 
					Если ЗначениеЗаполнено(стрОпл.Терминал) и докВозврОплаты.ЭквайринговыйТерминал = стрОпл.Терминал Тогда 
						КодОплаты = стрОпл.КодCRM;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КодОплаты = Неопределено Тогда
		Сообщить("В таблицу соответствия оплат не внесен данный тип документа. Оплата не будет выгружена в RetailCRM");
	Иначе 
		Для каждого стр Из докВозврОплаты.РасшифровкаПлатежа Цикл 
			Если ТипДокументаОплаты = "Эквайринговая операция" Тогда 
				докЗаказа = стр.ОснованиеПлатежа;
			КонецЕсли;
			//стр.ОбъектРасчетов у эквайринговой операции тут возврат
			//а если на основаниие это док эквайринга, то тут заказ 
			ОбъектРасчетов = стр.ОбъектРасчетов; 
			Если ТипЗнч(ОбъектРасчетов.Объект) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
				//получаем реализацию и заказ
				Реализация = ОбъектРасчетов.Объект.ДокументРеализации;
				Если Реализация.РеализацияПоЗаказам = Истина Тогда  
					докЗаказа = Реализация.ЗаказКлиента;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбъектРасчетов.Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				докЗаказа = ОбъектРасчетов.Объект;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(докЗаказа) Тогда //теперь получаем все оплаты
				//если сумма возврата = сумме документа, меняем статус оплаты на возвращен
				//если у нас эквайринговая операция, найдем все эквайринговые по заказу, которые были выгружены в crm
				СписокОплат = ПолучитьОплаты(докЗаказа, СвойствоОплаты, ТипДокументаОплаты);
				
				Если СписокОплат <> Неопределено и СписокОплат.Количество() = 1 Тогда 
					//найли 1 оплату и это хорошо, сравниваем суммы
					Если не ЗначениеЗаполнено(СписокОплат[0].Значение) Тогда 
						Сообщить ("Документ оплаты отсутствует в RetailCRM, возврат оплаты не выгружен.");
						Возврат;
					КонецЕсли;
					
					СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
					КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докЗаказа.Ссылка, СвойствоЗаказовМагазин);
					
					СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
					НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докЗаказа.ссылка, СвойствоЗаказов);
					НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
					
					Если НомерЗаказа = "" Тогда 
						Сообщить ("Документ-основание платежа отсутствует в RetailCRM, оплата не выгружена.");
						Возврат;
					КонецЕсли;
					
					ИДОплаты = СписокОплат[0].Значение;
					
					//проверим выгружали ранее или нет
					Если ТипДокументаОплаты = "Эквайринговая операция" Тогда 
						СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
						ИДОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докВозврОплаты,СвойствоОплатыВозврат);
					ИначеЕсли ТипДокументаОплаты = "Расходный кассовый ордер" Тогда
						СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
						ИДОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докВозврОплаты,СвойствоОплатыВозврат);
					ИначеЕсли ТипДокументаОплаты = "Списание безналичных ДС" Тогда
						СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
						ИДОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(докВозврОплаты,СвойствоОплатыВозврат);
					КонецЕсли;
						
					Если не ЗначениеЗаполнено(ИДОплаты) или ИДОплаты = "" Тогда 
						Сообщить("В RetailCRM отсутсвует оплата по текущему заказу");
						Продолжить;
					КонецЕсли;
					
					Платеж = Новый Соответствие();
					ПлатежЗ = Новый Соответствие();
					Если Отменить = Истина Тогда 
						Если СписокОплат[0].Ссылка.Проведен = Истина Тогда 
							Платеж.Вставить("amount", СписокОплат[0].Сумма);
							Платеж.Вставить("status", "paid");									
					    КонецЕсли;
					Иначе 
						Если докВозврОплаты.СуммаДокумента < СписокОплат[0].Сумма Тогда
							Платеж.Вставить("amount", СписокОплат[0].Сумма - докВозврОплаты.СуммаДокумента);
							Платеж.Вставить("status", "paid");
						ИначеЕсли докВозврОплаты.СуммаДокумента = СписокОплат[0].Сумма Тогда
							Платеж.Вставить("status", "returned");
							Платеж.Вставить("amount", докВозврОплаты.СуммаДокумента);
						КонецЕсли; 
					КонецЕсли;
					
					ПлатежЗ.Вставить("id",			НомерЗаказа);
					Платеж.Вставить("order", 		ПлатежЗ);
					Платеж.Вставить("type",			КодОплаты);
					
					//редактируем оплату
					переменные = Новый Соответствие();
					переменные.Вставить("payment",	JsonTest(Платеж,Новый ЗаписьJSON));
					переменные.Вставить("apiKey",	КлючCRM);
					переменные.Вставить("site",	КодМагазина);
					переменные.Вставить("by", "id");
					ответ2 = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/payments/" + ИДОплаты + "/edit", переменные);
					
					Если Найти(Ответ2, "success"":true") > 0 Тогда
						Сообщить ("Изменена оплата в RetailCRM");
						Если ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
							СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДИзмененнойОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
							СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
						ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда 
							СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДИзмененнойОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
							СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
						ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда 
							СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДИзмененнойОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
							СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);	
						КонецЕсли;
						
						crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоОплатыВозврат, ИДОплаты);
						crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоТип, КодОплаты);
						
						Если Отменить = Истина Тогда
                        	crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоОплатыВозврат, "");
							crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоТип, "");
						КонецЕсли;
						
					Иначе
						Сообщить("Трудности с редактированием оплаты в RetailCRM");
					КонецЕсли;
					
					Если (докВозврОплаты.СуммаДокумента = СписокОплат[0].Сумма или Отменить = Истина) и ЗначениеЗаполнено(ИДОплатыВозврат) Тогда
						//удаляем ранее выгруженный возврат оплаты
						ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/payments/" + ИДОплатыВозврат + "/delete", переменные);
						
						Если Найти(Ответ, "success"":true") > 0 Тогда
							Сообщить ("Удалена оплата в RetailCRM");
							Если ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
								СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
								СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
							ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда 
								СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
								СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
							ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда 
								СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
								СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);	
							КонецЕсли;
							crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоОплатыВозврат, "");
							crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоТип, "");
						Иначе
							Сообщить("Трудности с удалением оплаты в RetailCRM");
						КонецЕсли;
						
					КонецЕсли;
					
					Если докВозврОплаты.СуммаДокумента < СписокОплат[0].Сумма и Отменить = Ложь Тогда 
						//создаем еще одну оплату со статусом возвращен
						
						Платеж = Новый Соответствие();
						ПлатежЗ = Новый Соответствие();
						Платеж.Вставить("status", 	"returned");
						Платеж.Вставить("amount", 	докВозврОплаты.СуммаДокумента);
						Платеж.Вставить("paidAt", 	ДатаВремяДляCRM(докВозврОплаты.Дата));
						ПлатежЗ.Вставить("id",		НомерЗаказа);
						Платеж.Вставить("order", 	ПлатежЗ);
						Платеж.Вставить("type",		КодОплаты);
						
						перемен = Новый Соответствие();
						перемен.Вставить("payment",	JsonTest(Платеж,Новый ЗаписьJSON));
						перемен.Вставить("apiKey",	КлючCRM);
						перемен.Вставить("site",	КодМагазина);
						
						Если НЕ ЗначениеЗаполнено(ИДОплатыВозврат) Тогда
							ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/payments/create" , перемен);
							
							Если Найти(Ответ, "success"":true") > 0 Тогда
								Сообщить ("Выгружена оплата в RetailCRM");
								
								ответ = UnJSONТест(ответ);
								ИДОплатыВозврат = Формат(ответ["id"], "ЧГ=0");
								
								Если ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
									СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
									СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РасходныйКассовыйОрдер);
								ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда 
									СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
									СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_СписаниеБезналичныхДенежныхСредств);
								ИначеЕсли ТипЗнч(докВозврОплаты) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда 
									СвойствоОплатыВозврат = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплатыВозврат", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
									СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);	
								КонецЕсли;
								crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоОплатыВозврат, ИДОплатыВозврат);
								crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докВозврОплаты.Ссылка, СвойствоТип, КодОплаты);
							Иначе
								Сообщить("Трудности с выгрузкой возврата оплаты в RetailCRM");
							КонецЕсли;
						Иначе
							перемен.Вставить("by", "id");
							ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/payments/" + ИДОплатыВозврат + "/edit", перемен);	
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьОплаты(докЗаказа, СвойствоОплаты, ТипДокумента)
	
	Если ТипДокумента = "Эквайринговая операция" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка КАК Ссылка,
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа,
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Сумма КАК Сумма,
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов
			|ПОМЕСТИТЬ вт_Эквайринги
			|ИЗ
			|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКартеРасшифровкаПлатежа
			|ГДЕ
			|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация <> &ХозяйственнаяОперация
			|	И ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОснованиеПлатежа = &Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДополнительныеСведения.Объект КАК Объект,
			|	ДополнительныеСведения.Свойство КАК Свойство,
			|	ДополнительныеСведения.Значение КАК Значение,
			|	вт_Эквайринги.Ссылка КАК Ссылка,
			|	вт_Эквайринги.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	вт_Эквайринги.ОснованиеПлатежа КАК ОснованиеПлатежа,
			|	вт_Эквайринги.Сумма КАК Сумма,
			|	вт_Эквайринги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	вт_Эквайринги.ОбъектРасчетов КАК ОбъектРасчетов
			|ИЗ
			|	вт_Эквайринги КАК вт_Эквайринги
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО вт_Эквайринги.Ссылка = ДополнительныеСведения.Объект
			|ГДЕ
			|	ДополнительныеСведения.Объект В
			|			(ВЫБРАТЬ
			|				вт_Эквайринги.Ссылка КАК Ссылка
			|			ИЗ
			|				вт_Эквайринги КАК вт_Эквайринги)
			|	И ДополнительныеСведения.Свойство = &Свойство";
		
	ИначеЕсли ТипДокумента = "Расходный кассовый ордер" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК Сумма,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа
		|ПОМЕСТИТЬ вт_ПКО
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация <> &ХозяйственнаяОперация
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение,
		|	вт_ПКО.Ссылка КАК Ссылка,
		|	вт_ПКО.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	вт_ПКО.Сумма КАК Сумма,
		|	вт_ПКО.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	вт_ПКО.ОбъектРасчетов КАК ОбъектРасчетов,
		|	вт_ПКО.ОснованиеПлатежа КАК ОснованиеПлатежа
		|ИЗ
		|	вт_ПКО КАК вт_ПКО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО вт_ПКО.Ссылка = ДополнительныеСведения.Объект
		|ГДЕ
		|	ДополнительныеСведения.Объект В
		|			(ВЫБРАТЬ
		|				вт_ПКО.Ссылка КАК Ссылка
		|			ИЗ
		|				вт_ПКО КАК вт_ПКО)
		|	И ДополнительныеСведения.Свойство = &Свойство";
		
	ИначеЕсли ТипДокумента = "Списание безналичных ДС" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма КАК Сумма,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа
		|ПОМЕСТИТЬ вт_ПБДС
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация <> &ХозяйственнаяОперация
		|	И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение,
		|	вт_ПБДС.Ссылка КАК Ссылка,
		|	вт_ПБДС.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	вт_ПБДС.Сумма КАК Сумма,
		|	вт_ПБДС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	вт_ПБДС.ОбъектРасчетов КАК ОбъектРасчетов,
		|	вт_ПБДС.ОснованиеПлатежа КАК ОснованиеПлатежа
		|ИЗ
		|	вт_ПБДС КАК вт_ПБДС,
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект В
		|			(ВЫБРАТЬ
		|				вт_ПБДС.Ссылка КАК Ссылка
		|			ИЗ
		|				вт_ПБДС КАК вт_ПБДС)
		|	И ДополнительныеСведения.Свойство = &Свойство";
	КонецЕсли;
	
	Если Запрос <> Неопределено Тогда 
		Запрос.УстановитьПараметр("Заказ", докЗаказа);
		Запрос.УстановитьПараметр("Свойство", СвойствоОплаты);
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат РезультатЗапроса;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОтправитьИнформациюПоОплатеВCRM(ДанныеПлатежа, ИДОплаты, НомерЗаказа, КодМагазина, НовыйДокумент) Экспорт
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	переменные.Вставить("payment", JsonTest(ДанныеПлатежа, Новый ЗаписьJSON));
	Если НовыйДокумент Тогда 
		
		ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/create", переменные);
		
	Иначе
		
		переменные.Вставить("by", "id");
		ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/" + ИДОплаты + "/edit", переменные);
		
	КонецЕсли;
	
	Возврат UnJSONТест(ответ);
	
КонецФункции

// +++ РАБОТА С КОНСТАНТАМИ +++

// ЕНС. Отключил, т.к. перенес в ПовтИсп
//
//Функция crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты(имяКонстанты) Экспорт
//	
//		таб = ПолучитьКонстанты()["константы"];
//		ЗначениеКонстанты = таб.Найти(ИмяКонстанты,"Название");
//		Если ЗначениеКонстанты <> Неопределено Тогда ЗначениеКонстанты = ЗначениеКонстанты.Значение КонецЕсли;
//	
//	возврат ЗначениеКонстанты;
//	
//КонецФункции

Функция ПолучитьКонстанты() Экспорт
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("retailCRM_константы", "КонстантыОбмена");
	
	Если Не Настройки = Неопределено И ТипЗнч(Настройки) = Тип("Структура") Тогда
	Иначе
		Сообщить("Настройки RetailCRM восстановить не удалось");
	КонецЕсли;
	
	Возврат  Настройки;
	
КонецФункции

Процедура УстановитьКонстанты(табКонстант) Экспорт
	
	ДанныеСохранения = Новый Структура("Константы", 		табКонстант);
	ХранилищеОбщихНастроек.Сохранить("retailCRM_константы", 	"КонстантыОбмена", ДанныеСохранения);
	
КонецПроцедуры
// --- РАБОТА С КОНСТАНТАМИ ---

// Процедура - CRM загрузка заказов
// Процедура для регламентного задания по загрузке заказов
Процедура CRM_ЗагрузкаЗаказов() Экспорт
	
	ОбработкаЗагрузки = crm_RetailCRMОбработка.Создать();	
	ОбработкаЗагрузки.Мод_ЗагрузитьЗаказы();
	
КонецПроцедуры

// Процедура - CRM выгрузка остатков
// Процедура для регламентного задания по выгрузке остатков и закупочных цен
Процедура CRM_ВыгрузкаОстатков() Экспорт
	
	ОбработкаВыгрузки = crm_RetailCRMОбработка.Создать();
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		ОбработкаВыгрузки.Мод_ОстаткиИЦеныВCRMХарактеристики();
	Иначе 
		ОбработкаВыгрузки.Мод_ОстаткиИЦеныВCRM();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - CRM выгрузка типов цен
// Процедура для регламентного задания по выгрузке типов цен
Процедура CRM_ВыгрузкаТиповЦен() Экспорт
	
	ОбработкаВыгрузки = crm_RetailCRMОбработка.Создать();
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		ОбработкаВыгрузки.Мод_ВыгрузкаТиповЦенВCRMХарактеристики();
	Иначе 
		ОбработкаВыгрузки.Мод_ВыгрузкаТиповЦенВCRM();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - CRM выгрузка каталога
// Процедура для регламентного задания по генерации каталога
Процедура CRM_ВыгрузкаКаталога() Экспорт
	
	ОбработкаВыгрузки = crm_RetailCRMОбработка.Создать();
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		ОбработкаВыгрузки.Мод_ВыгрузкаКаталогаВXMLХарактеристики(,);
	Иначе 
		ОбработкаВыгрузки.Мод_ВыгрузкаКаталогаВXML(,);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - CRM актуализация ПЛ
// Процедура для регламентного задания по актуализации данных по ПЛ
Процедура CRM_АктуализацияПЛ() Экспорт
	
	ОбработкаВыгрузки = crm_RetailCRMОбработка.Создать();
	ОбработкаВыгрузки.ПолучитьИнформациюОПЛ(,,,);
	
КонецПроцедуры

// +++ Выгрузка архивов +++
Процедура ВыгрузитьАрхивныйЗаказВCRM(ДокЗаказ, ТЗРеализации, ТЗВозвратов,ТЗПКО,ТЗБезнал,ТЗЭквайринг, СтруктураПараметров, Отказ = Ложь, СчетчикАрхива, МассивПакета, КолЗаказов) Экспорт
	
	ИмяСервера 	= СтруктураПараметров.ИмяСервера;
	КлючCRM		= СтруктураПараметров.КлючCRM;
	КодМагазина = СтруктураПараметров.КодМагазина;
	offers_id 	= СтруктураПараметров.offers_id;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);	
	
	НоменклатураДоставки = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
	
	ИдентифТовара = СтруктураПараметров.ИдентифТовара;
	
	Товары = Новый Массив();
	
	// 1.Работаем с табличной частью заказа
	
	ТЗТоварыЗ = ДокЗаказ.Товары.Выгрузить();
	ТЗТоварыЗ.Свернуть("Номенклатура, Характеристика, Цена, ВидЦены, Отменено", "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки");
	ТЗТоварыЗ.Колонки.Добавить("Статус");
	Для Каждого стр1 из ТЗТоварыЗ Цикл 
		стр1.Статус = "sold";
	КонецЦикла;
	
	//проверяем есть ли реализация и правим тз
	ДатаРеализации = "";
	Если ТЗРеализации.Количество() > 0 Тогда
		Для Каждого стрРеализация из ТЗРеализации Цикл 	
			Если ЗначениеЗаполнено(стрРеализация.Реализация) Тогда
				Реализация = стрРеализация.Реализация;
				ДатаРеализации = Реализация.Дата;
				ТЗТоварыРелиз = Реализация.Товары.Выгрузить();
				ТЗТоварыРелиз.Свернуть("Номенклатура, Характеристика, Цена, ВидЦены", "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки");
				
				Для Каждого стрЗ из ТЗТоварыЗ Цикл       //для каждого товара из заказа ищем строку в реализации
					Если стрЗ.Отменено Тогда
						стрЗ.Статус = "failure";
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(стрЗ.Характеристика) Тогда 
						НайденСтроки = ТЗТоварыРелиз.НайтиСтроки(Новый Структура("Характеристика", стрЗ.Характеристика));
					Иначе
						НайденСтроки = ТЗТоварыРелиз.НайтиСтроки(Новый Структура("Номенклатура", стрЗ.Номенклатура));  
					КонецЕсли;
					//если нашли строки, тогда
					Если НайденСтроки <> Неопределено Тогда 
						//если строк несколько то нужно получить общее количество и сравнить с тем что в возврате
						Для Каждого стрР из НайденСтроки Цикл
							Если стрР.Количество <= стрЗ.Количество Тогда   
								стрЗ.Количество = стрР.Количество;
							ИначеЕсли стрР.Количество > стрЗ.Количество Тогда 
								Сообщить("Как можно продать больше, чем купили?");
							КонецЕсли;
						КонецЦикла;
					Иначе 
						Сообщить("Не было отгрузки на товар");
						//товара нет в реализации, его толи в отмену, то ли в продан?
						//пробуем в отказ клиента
						стрЗ.Статус = "failure";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	//теперь проверяем возврат
	Если ТЗВозвратов.Количество() > 0 Тогда
		Для Каждого стрВозврат из ТЗВозвратов Цикл
			Если ЗначениеЗаполнено(стрВозврат.ДокВозврат) Тогда
				ДокВозврат = стрВозврат.ДокВозврат;	
				Для Каждого стрВозврат из докВозврат.Товары Цикл 
					//в заказе ищем строки с товарами из возврата
					Если ЗначениеЗаполнено(стрВозврат.Характеристика) Тогда 
						НайденСтроки = ТЗТоварыЗ.НайтиСтроки(Новый Структура("Характеристика", стрВозврат.Характеристика));
					Иначе
						НайденСтроки = ТЗТоварыЗ.НайтиСтроки(Новый Структура("Номенклатура", стрВозврат.Номенклатура));  
					КонецЕсли;
					
					Если НайденСтроки <> Неопределено Тогда 
						//если строк несколько то нужно получить общее количество и сравнить с тем что в возврате
						Для Каждого стрЗак из НайденСтроки Цикл
							Если стрЗак.Количество = стрВозврат.Количество Тогда     //сравниваем кол в строке заказа и кол-во в строке возврата
								стрЗак.Статус = "returned";
							ИначеЕсли стрЗак.Количество > стрВозврат.Количество Тогда 
								стрЗак.Статус = "chastichnyi-vozvrat";
								стрЗак.Количество = стрЗак.Количество - стрВозврат.Количество;
							ИначеЕсли стрЗак.Количество < стрВозврат.Количество Тогда 
								Сообщить("Как можно вернуть больше чем купили?");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого стр из ТЗТоварыЗ Цикл
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Доставка = Новый Соответствие();
			СтоимостьДоставки = стр.Количество * стр.Цена;
			Продолжить;
		КонецЕсли;
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если СтруктураПараметров.ИспользованиеХарактеристик = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + ДокЗаказ.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		товар.Вставить("productName",	стр.Номенклатура.Наименование);
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		Если ЗначениеЗаполнено(стр.ВидЦены) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			
			ТипЦены = Новый Соответствие();
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда
				КодТипаЦены = ТипыЦен.Найти(стр.ВидЦены, "ТипЦены");
				Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
					ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
					товар.Вставить("priceType", ТипЦены);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//передача признака отмены строки
		Если стр.Отменено = Истина Тогда 
			Статус = "failure";
			товар.Вставить("status", Статус);
		Иначе 
			товар.Вставить("status", стр.Статус);
		КонецЕсли;
		
		//статус товара
		
		РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0);       
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ = Новый Соответствие();
	заказ.Вставить("createdAt", ДатаВремяДляCRM(ДокЗаказ.Дата));	
	заказ.Вставить("items",товары);
	заказ.Вставить("customerComment", "Выгрузка архива из 1С, " + СокрЛП(ДокЗаказ.Комментарий));
	заказ.Вставить("managerComment",  "");	
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	Если СтоимостьДоставки <> Неопределено Тогда 
		Доставка.Вставить("cost",		Формат(СтоимостьДоставки, 	"ЧРД=.; ЧГ=0"));
		Доставка.Вставить("netCost",	Формат(СтоимостьДоставки, 	"ЧРД=.; ЧГ=0"));
	КонецЕсли;
	//
	Если Доставка <> Неопределено Тогда 
		заказ.Вставить("delivery", Доставка);
	КонецЕсли;
	//
	Если ДокЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда  
		СтатусЗаказа =	"new";
		Если ЗначениеЗаполнено(ДокЗаказ.ДатаОтгрузки) Тогда 
			заказ.Вставить("shipmentDate", Формат(ДокЗаказ.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
		ИначеЕсли ЗначениеЗаполнено(ДатаРеализации) Тогда  
			заказ.Вставить("shipmentDate", Формат(ДатаРеализации,"ДФ=yyyy-MM-dd"));
		Иначе 
			заказ.Вставить("shipmentDate", Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
		КонецЕсли;
		заказ.Вставить("shipped",	false);
	ИначеЕсли ДокЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению или ДокЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда  
		//если строки отгружены то отгружен
		СтрокиОтгружены = Истина;
		Для Каждого строкаТЧ из ДокЗаказ.Товары Цикл
			Если строкаТЧ.Номенклатура <> НоменклатураДоставки и строкаТЧ.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить и строкаТЧ.Отменено = Ложь Тогда 
				СтрокиОтгружены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиОтгружены Тогда 
			СтатусЗаказа = "for-shipment";
			заказ.Вставить("shipped",	true);
		Иначе 
			СтатусЗаказа = "assembling";
			Если ЗначениеЗаполнено(ДокЗаказ.ДатаОтгрузки) Тогда 
				заказ.Вставить("shipmentDate", Формат(ДокЗаказ.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
			ИначеЕсли ЗначениеЗаполнено(ДатаРеализации) Тогда  
				заказ.Вставить("shipmentDate", Формат(ДатаРеализации,"ДФ=yyyy-MM-dd"));
			Иначе 
				заказ.Вставить("shipmentDate", Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
			КонецЕсли;
			заказ.Вставить("shipped",	false);
		КонецЕсли;
	ИначеЕсли ДокЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда 
		//если все строки отменены то и заказ отменен
		ЗаказОтменен = Истина;
		Для Каждого строкаТЧ из ТЗТоварыЗ Цикл
			Если строкаТЧ.Отменено = Ложь Тогда 
				ЗаказОтменен = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаказОтменен Тогда 
			СтатусЗаказа = "cancel";
			заказ.Вставить("shipped",	false);
		Иначе 
			СтатусЗаказа = "complete";
			заказ.Вставить("shipped",	true);
		КонецЕсли;
	КонецЕсли;
	
	ВернутьЗаказ = Истина;
	Для Каждого Стр из ТЗТоварыЗ Цикл
		Если Стр.Статус = Неопределено или Стр.Статус <> "returned" Тогда
			ВернутьЗаказ = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Статус заказа
	Если ВернутьЗаказ Тогда 
		Статус = "returned";
	КонецЕсли;
	
	//клиент  
	
	//добавить заполнение полей в заказе (фио, тел, почта)
	заказ.Вставить("firstName", ДокЗаказ.Контрагент.НаименованиеПолное);
	
	Для Каждого КИ из ДокЗаказ.Контрагент.КонтактнаяИнформация Цикл 
		Если КИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда 
			заказ.Вставить("email", КИ.Представление);
		ИначеЕсли КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
			заказ.Вставить("phone", КИ.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Клиент = Новый Соответствие();
	//получаем id клиента
	ИДКлиента = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(ДокЗаказ.Контрагент, СтруктураПараметров.СвойствоКонтрагентов);
	Если ЗначениеЗаполнено(ИДКлиента) Тогда
		ДанныеКлиента = Новый Соответствие;
		ДанныеКлиента.Вставить("id", 	ИДКлиента);
		заказ.Вставить("customer", 		ДанныеКлиента);
	КонецЕсли;
	заказ.Вставить("contragent", Клиент);
	заказ.Вставить("status",	СтатусЗаказа); 
	заказ.Вставить("externalId",СокрЛП(ДокЗаказ.УникальныйИдентификатор()));
	
	//передаем оплаты
	Оплаты = Новый Массив();
	Для Каждого стрПКО из ТЗПКО Цикл 
		Если ЗначениеЗаполнено(стрПКО.ПКО.РасшифровкаПлатежа) Тогда
			Для Каждого строкаПлатежа из стрПКО.ПКО.РасшифровкаПлатежа Цикл 
				Платеж = Новый Соответствие();
				Платеж.Вставить("amount",		Формат(строкаПлатежа.Сумма,"ЧРД=.; ЧГ=0"));
				Платеж.Вставить("type",			"cash");
				Платеж.Вставить("status",		"paid");
				Платеж.Вставить("paidAt",		ДатаВремяДляCRM(стрПКО.ПКО.Дата));
				Платеж.Вставить("comment",		"выгружена из 1С с архивом");
				Оплаты.Добавить(Платеж);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого стрБезнал из ТЗБезнал Цикл 
		Если ЗначениеЗаполнено(стрБезнал.ПоступлениеБДС.РасшифровкаПлатежа) Тогда
			Для Каждого строкаПлатежа из стрБезнал.ПоступлениеБДС.РасшифровкаПлатежа Цикл
				Платеж = Новый Соответствие();
				Платеж.Вставить("amount",		Формат(строкаПлатежа.Сумма,"ЧРД=.; ЧГ=0"));
				Платеж.Вставить("type",			"bank-transfer");
				Платеж.Вставить("status",		"paid");
				Платеж.Вставить("paidAt",		ДатаВремяДляCRM(стрБезнал.ПоступлениеБДС.Дата));
				Платеж.Вставить("comment",		"выгружена из 1С с архивом");
				Оплаты.Добавить(Платеж);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого стрЭО из ТЗЭквайринг Цикл 
		Если ЗначениеЗаполнено(стрЭО.ЭквайринговаяОперация.РасшифровкаПлатежа) Тогда
			Для Каждого строкаПлатежа из стрЭО.ЭквайринговаяОперация.РасшифровкаПлатежа Цикл
				Платеж = Новый Соответствие();
				Платеж.Вставить("amount",		Формат(строкаПлатежа.Сумма,"ЧРД=.; ЧГ=0"));
				Платеж.Вставить("type",			"e-money");
				Платеж.Вставить("status",		"paid");
				Платеж.Вставить("paidAt",		ДатаВремяДляCRM(стрЭО.ЭквайринговаяОперация.Дата));
				Платеж.Вставить("comment",		"выгружена из 1С с архивом");
				Оплаты.Добавить(Платеж);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	заказ.Вставить("payments",		Оплаты);
	
	МассивПакета.Добавить(Заказ);
	
	Если СчетчикАрхива = 50 или КолЗаказов = 0 Тогда 
		переменные.Вставить("orders",	JsonTest(МассивПакета, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/upload", переменные);
		
		ОбработатьОтветЗагрузкиЗаказов(ответ,СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветЗагрузкиКлиентов(ответ,СтруктураПараметров);
	
	// КЛИЕНТЫ ВЫГРУЖЕНЫ УСПЕШНО
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Пакет выгружен");
		Сообщить(ответ);
		
		ответ = UnJSONТест(ответ);
		
		Для Каждого стр Из ответ["uploadedCustomers"] Цикл 
			
			УстановитьИДКлиентов(стр,СтруктураПараметров.СвойствоКонтрагентов, СтруктураПараметров.СвойствоПартнеров);
			
		КонецЦикла;
		
		// ОШИБКА ПРИ ВЫГРУЗКЕ ЗАКАЗОВ	
		
	Иначе
		
		//ОБРАБОТКА ОШИБКИ: ЗАКАЗ С ТАКИМ EXTERNALID УЖЕ ЕСТЬ
		
		ответ = UnJSONТест(ответ);
		
		КлиентыДляСопоставления = Новый ТаблицаЗначений();
		КлиентыДляСопоставления.Колонки.Добавить("externalId");
		
		Для Каждого стр из ответ["errors"] Цикл 
			
			//если в строке есть already exists то скорее всего такой заказ уже есть в crm, надо его найти и сопоставить с заказом 1С
			КлиентУжеСуществует = СтрНайти(стр, "already exists");
			Если КлиентУжеСуществует > 0 Тогда 
				//тащим externalId из строки
				Позиция = СтрНайти(стр, "externalId=");
				Если Позиция > 0 Тогда 
					НачалоИдентиф = Позиция + 11;
					external = Сред(стр, НачалоИдентиф, 36);
					СтрТЗ = КлиентыДляСопоставления.Добавить();
					СтрТЗ.externalId = external;
				КонецЕсли;
			Иначе 
				Сообщить("Ошибка: " + стр);
			КонецЕсли;
			
			
		КонецЦикла;
		
		// ПОИСК ЗАКАЗОВ В RETAILCRM, СВЯЗКА С ЗАКАЗАМИ 1С
		
		Если КлиентыДляСопоставления.Количество() > 0 Тогда 
			//получаем эти заказы из crm
			КоличествоКлиентов = 0;
			МассивИДКлиентов = Новый Массив;
			фильтрИд = "";	
			
			Для Инд = 1 по КлиентыДляСопоставления.Количество() Цикл
				
				КоличествоКлиентов = КоличествоКлиентов  + 1;
				МассивИДКлиентов.Добавить(КлиентыДляСопоставления[Инд -1]);
				фильтрИд = фильтрИд + "filter[externalIds][]=" + Формат(КлиентыДляСопоставления[Инд -1].externalId,"ЧГ=") + "&";
				
				Если  КоличествоКлиентов = 50 тогда 
					
					АдресСкрипта = "/api/v5/customers?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
					
					Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
					Если Найти(ответ, """success"":true") > 0 Тогда
						Ответ = UnJSONТест(ответ);
						Для Каждого клиентCRM из Ответ["customers"] цикл
							
							УстановитьИДКлиентов(клиентCRM,СтруктураПараметров.СвойствоКонтрагентов, СтруктураПараметров.СвойствоПартнеров);
							
						КонецЦикла;
						
						КоличествоКлиентов =0;
						МассивИДКлиентов = Новый Массив; 
						фильтрИд = ""; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			АдресСкрипта = "/api/v5/customers?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
			
			Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
			Если Найти(ответ, """success"":true") > 0 Тогда
				Ответ = UnJSONТест(ответ);	
				Для Каждого клиентCRM из Ответ["customers"] Цикл 
					
					УстановитьИДКлиентов(клиентCRM,СтруктураПараметров.СвойствоКонтрагентов, СтруктураПараметров.СвойствоПартнеров);
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Сообщить("Пакет не выгружен");
		Сообщить(ответ["errorMsg"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьАрхивногоКлиента(Данные, СтруктураПараметров, Счетчик, МассивПакета, КолКлиентов, ТЗТелефоны) Экспорт
	
	ИмяСервера 	= СтруктураПараметров.ИмяСервера;
	КлючCRM		= СтруктураПараметров.КлючCRM;
	КодМагазина = СтруктураПараметров.КодМагазина;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	Контрагент = Новый Соответствие();
	Контрагент.Вставить("patronymic",	"");  
	Контрагент.Вставить("lastName",		"");
	Контрагент.Вставить("firstName",	Данные.НаименованиеПолное);
	Если ЗначениеЗаполнено(Данные.Пол) Тогда 
		Если Данные.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			Контрагент.Вставить("sex",	"male");
		Иначе Контрагент.Вставить("sex","female");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ДатаРегистрации) Тогда 
		Контрагент.Вставить("createdAt", ДатаВремяДляCRM(Данные.ДатаРегистрации));
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Данные.ДатаРождения) Тогда 
		Контрагент.Вставить("birthday",	ДатаВремяДляCRM(Данные.ДатаРождения, Ложь));
	КонецЕсли;
	
	Контрагент.Вставить("externalId",	Строка(Данные.Контрагент.УникальныйИдентификатор()));
	
	Телефоны = Новый Массив();
	
	Для Каждого стрТЗ из ТЗТелефоны Цикл 
		Телефон = Новый Соответствие();
		Телефон.Вставить("number",	стрТЗ.Телефон);
		Телефоны.Добавить(Телефон);	
	КонецЦикла;
	
	Контрагент.Вставить("phones",Телефоны);
	
	Если ЗначениеЗаполнено(Данные.Почта) Тогда 
		Контрагент.Вставить("email",	Данные.Почта);
	ИначеЕсли 
		ЗначениеЗаполнено(Данные.ПочтаПартнера) Тогда 
		Контрагент.Вставить("email",	Данные.ПочтаПартнера);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Адрес) Тогда 
		Адрес = Новый Соответствие();
		Адрес.Вставить("text", Данные.Адрес); 
		Контрагент.Вставить("address",	Адрес);
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Соответствие();
	ДанныеКонтрагента.Вставить("contragentType",	"individual");
	
	Контрагент.Вставить("contragent", 				ДанныеКонтрагента);
	
	МассивПакета.Добавить(Контрагент);
	
	Если Счетчик = 50 или КолКлиентов = 0 Тогда 
		переменные.Вставить("customers",	JsonTest(МассивПакета, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers/upload", переменные);
		
		ОбработатьОтветЗагрузкиКлиентов(ответ,СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьАрхивногоКорпКлиента(Данные, СтруктураПараметров, Счетчик, МассивПакета, КолКлиентов, ТЗТелефоны, ТЗКомпаний, ТЗКорпов, ДочерниеЗаписи) Экспорт

	ИмяСервера 	= СтруктураПараметров.ИмяСервера;
	КлючCRM		= СтруктураПараметров.КлючCRM;
	КодМагазина = СтруктураПараметров.КодМагазина;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	//создаем корп клиента  (партнер)
	
	КорпКлиент = Новый Соответствие();
	КорпКлиент.Вставить("nickName",		Данные.НаименованиеПартнера); 
	Если ЗначениеЗаполнено(Данные.ДатаРегистрации) Тогда 
		КорпКлиент.Вставить("createdAt", ДатаВремяДляCRM(Данные.ДатаРегистрации));
	КонецЕсли;
	КорпКлиент.Вставить("externalId",	Строка(Данные.Партнер.УникальныйИдентификатор()));
	
	Если ЗначениеЗаполнено(Данные.Партнер.ОсновнойМенеджер) Тогда 
		СписокМенеджеров = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеМенеджеров");
		НайденнаяСтрока = СписокМенеджеров.Найти(Данные.Партнер.ОсновнойМенеджер, "Менеджер"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			КорпКлиент.Вставить("managerId", Формат(НайденнаяСтрока.ИД,"ЧГ=0"));
		КонецЕсли;	
	КонецЕсли;
	
	//компании            (контрагент)
	Компании = Новый Массив();
	Если ТЗКомпаний.Количество()>1 Тогда 
		ТЗКомпаний.Свернуть("externalId, ДатаРегистрации, ИНН, КПП, КодПоОКПО, НаименованиеПолное, ЮрФизЛицо", "Адрес");	
	КонецЕсли;
	
	Для Каждого комп из ТЗКомпаний Цикл 
		Компания = Новый Соответствие();
		Компания.Вставить("isMain",	"true");  
		Компания.Вставить("active",	"true");
		Если ЗначениеЗаполнено(комп.ДатаРегистрации) Тогда 
			КорпКлиент.Вставить("createdAt", ДатаВремяДляCRM(комп.ДатаРегистрации));
		КонецЕсли;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда 
			 Компания.Вставить("name",	Данные.Контрагент.Наименование);
		Иначе 
			Компания.Вставить("name",	комп.НаименованиеПолное);				//Компания.Вставить("name",	Данные.НаименованиеПолное);
		КонецЕсли;
		Компания.Вставить("externalId",	комп.externalId);
		
		ДанныеКонтрагента = Новый Соответствие();
		
		Если комп.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			ТипКонтрагента = "individual";
		ИначеЕсли комп.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
			ТипКонтрагента = "legal-entity";
		ИначеЕсли комп.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
			ТипКонтрагента = "enterpreneur";
		ИначеЕсли комп.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда 
			ТипКонтрагента = "legal-entity"; 
		КонецЕсли;
		
		ДанныеКонтрагента.Вставить("contragentType",	ТипКонтрагента);
		ДанныеКонтрагента.Вставить("legalName", 		комп.НаименованиеПолное);
		ДанныеКонтрагента.Вставить("INN",				комп.ИНН);
		ДанныеКонтрагента.Вставить("OKPO",				комп.КодПоОКПО);
		ДанныеКонтрагента.Вставить("KPP",				комп.КПП);
		ДанныеКонтрагента.Вставить("legalAddress",		комп.Адрес);
		
		Компания.Вставить("contragent", 				ДанныеКонтрагента);
	
		Компании.Добавить(Компания);
	КонецЦикла;
	
	//компании
	Телефоны = Новый Массив();
	Телефон = Новый Соответствие();
	Для Каждого тел из ТЗТелефоны Цикл 
		Телефон.Вставить("number",	тел.Телефон);
		Телефоны.Добавить(Телефон);
	КонецЦикла;	
	
	//запишем externalId компании, чтобы потом получить ее из crm и записать в 1С id 
	Кмпн = ТЗКорпов.Добавить();
	Кмпн.externalId = Строка(Данные.Партнер.УникальныйИдентификатор());
	
	//
	КорпКлиент.Вставить("phones",			Телефоны);
	КорпКлиент.Вставить("companies", 		Компании);
	
	переменные.Вставить("customerCorporate", crm_RetailCRMОбщий.JsonTest(КорпКлиент,Новый ЗаписьJSON));
	
	МассивПакета.Добавить(КорпКлиент);
	
	Если Счетчик = 50 или КолКлиентов = 0 Тогда 
		переменные.Вставить("customersCorporate",	JsonTest(МассивПакета, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers-corporate/upload", переменные);
		
		ОбработатьОтветЗагрузкиКорпКлиентов(ответ,СтруктураПараметров, ТЗКорпов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьАдресКК(Данные, СтруктураПараметров, ДочерниеЗаписи) Экспорт

	ИмяСервера 	= СтруктураПараметров.ИмяСервера;
	КлючCRM		= СтруктураПараметров.КлючCRM;
	КодМагазина = СтруктураПараметров.КодМагазина;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	externalId = Данные.Ссылка.УникальныйИдентификатор();

	Для Каждого КИ из Данные.Ссылка.КонтактнаяИнформация Цикл 	
		Если КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда 
			
			Адрес = Новый Соответствие();
			
			Адрес.Вставить("text",	КИ.Представление); 
			Адрес.Вставить("name",	КИ.Вид.Наименование); 
			
			переменные.Вставить("address",	JsonTest(Адрес, Новый ЗаписьJSON));
			
			ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers-corporate/"+ externalId + "/addresses/create", переменные);
			
			Если Найти(ответ, """success"":true") > 0 Тогда
				Сообщить("Адрес """ + КИ.Представление + """ выгружен");
				//запишем в доп сведение
				СвойствоАдреса = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("АдресВыгружен", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
				crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Данные.Ссылка, СвойствоАдреса, "Истина");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СвязатьКЛицаСКорпами(Данные, СтруктураПараметров) Экспорт

	ИмяСервера 	= СтруктураПараметров.ИмяСервера;
	КлючCRM		= СтруктураПараметров.КлючCRM;
	КодМагазина = СтруктураПараметров.КодМагазина;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	externalIdПартнера = Данные.Владелец.УникальныйИдентификатор();
	externalIdКЛ = Данные.Ссылка.УникальныйИдентификатор();
	
	Контакт = Новый Соответствие();
	
	Клиент = Новый Соответствие();
	
	Клиент.Вставить("externalId", СокрЛП(externalIdКЛ));
	Клиент.Вставить("site",	КодМагазина);
	
	Контакт.Вставить("customer", Клиент);
	
	переменные.Вставить("contact",	JsonTest(Контакт, Новый ЗаписьJSON));
	
	ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers-corporate/"+ externalIdПартнера + "/contacts/create", переменные);
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Контактное лицо """ + Данные.Ссылка + """ привязано к контрагенту " + Данные.Владелец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьАрхивноеКонтактноеЛицо(Данные, СтруктураПараметров, Счетчик, МассивПакета, КолКлиентов, ДочерниеЗаписи) Экспорт

	ИмяСервера 	= СтруктураПараметров.ИмяСервера;
	КлючCRM		= СтруктураПараметров.КлючCRM;
	КодМагазина = СтруктураПараметров.КодМагазина;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	Контрагент = Новый Соответствие();
	Контрагент.Вставить("patronymic",	"");  
	Контрагент.Вставить("lastName",		"");
	Контрагент.Вставить("firstName",	Строка(Данные.КонтактноеЛицо));
	Если ЗначениеЗаполнено(Данные.Пол) Тогда 
		Если Данные.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			Контрагент.Вставить("sex",	"male");
		Иначе Контрагент.Вставить("sex","female");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ДатаРегистрацииСвязи) Тогда 
		Контрагент.Вставить("createdAt", ДатаВремяДляCRM(Данные.ДатаРегистрацииСвязи));
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Данные.ДатаРождения) Тогда 
		Контрагент.Вставить("birthday",	ДатаВремяДляCRM(Данные.ДатаРождения, Ложь));
	КонецЕсли;
	
	Контрагент.Вставить("externalId",	Строка(Данные.КонтактноеЛицо.УникальныйИдентификатор()));
	
	Телефоны = Новый Массив();
	
	Пока ДочерниеЗаписи.Следующий() Цикл
		
		//проверяем тип
			Если ЗначениеЗаполнено(ДочерниеЗаписи.Телефон) Тогда
				Телефон = Новый Соответствие();
				Телефон.Вставить("number",	ДочерниеЗаписи.Телефон);
				Телефоны.Добавить(Телефон);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДочерниеЗаписи.Адрес) Тогда
				Адрес = Новый Соответствие();
				Адрес.Вставить("text", ДочерниеЗаписи.Адрес); 
				Контрагент.Вставить("address",	Адрес);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДочерниеЗаписи.Почта) Тогда
				Контрагент.Вставить("email",	ДочерниеЗаписи.Почта);
			КонецЕсли;
	КонецЦикла;
	
	Контрагент.Вставить("phones",Телефоны);
	
	ДанныеКонтрагента = Новый Соответствие();
	ДанныеКонтрагента.Вставить("contragentType",	"individual");
	
	Контрагент.Вставить("contragent", 				ДанныеКонтрагента);
	
	МассивПакета.Добавить(Контрагент);
	
	Если Счетчик = 50 или КолКлиентов = 0 Тогда 
		переменные.Вставить("customers",	JsonTest(МассивПакета, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers/upload", переменные);
		
		ОбработатьОтветЗагрузкиКонтактныхЛиц(ответ,СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветЗагрузкиКонтактныхЛиц(ответ,СтруктураПараметров);

	// КЛИЕНТЫ ВЫГРУЖЕНЫ УСПЕШНО
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Пакет выгружен");
		Сообщить(ответ);
		
		ответ = UnJSONТест(ответ);
		
		Для Каждого стр Из ответ["uploadedCustomers"] Цикл 
			
			УстановитьИДКонтЛиц(стр,СтруктураПараметров.СвойствоКонтЛиц);
			
		КонецЦикла;
		
		// ОШИБКА ПРИ ВЫГРУЗКЕ КЛИЕНТОВ	
		
	Иначе
		
		//ОБРАБОТКА ОШИБКИ: КЛИЕНТ С ТАКИМ EXTERNALID УЖЕ ЕСТЬ
		
		ответ = UnJSONТест(ответ);
		
		КлиентыДляСопоставления = Новый ТаблицаЗначений();
		КлиентыДляСопоставления.Колонки.Добавить("externalId");
		
		Для Каждого стр из ответ["errors"] Цикл 
			
			//если в строке есть already exists то скорее всего такой заказ уже есть в crm, надо его найти и сопоставить с заказом 1С
			КлиентУжеСуществует = СтрНайти(стр.Значение, "already exists");
			Если КлиентУжеСуществует > 0 Тогда 
				//тащим externalId из строки
				Позиция = СтрНайти(стр.Значение, "externalId=");
				Если Позиция > 0 Тогда 
					НачалоИдентиф = Позиция + 11;
					external = Сред(стр.Значение, НачалоИдентиф, 36);
					СтрТЗ = КлиентыДляСопоставления.Добавить();
					СтрТЗ.externalId = external;
				КонецЕсли;
			Иначе 
				Сообщить("Ошибка: " + стр.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		// ПОИСК ЗАКАЗОВ В RETAILCRM, СВЯЗКА С ЗАКАЗАМИ 1С
		
		Если КлиентыДляСопоставления.Количество() > 0 Тогда 
			//получаем эти заказы из crm
			КоличествоКлиентов = 0;
			МассивИДКлиентов = Новый Массив;
			фильтрИд = "";	
			
			Для Инд = 1 по КлиентыДляСопоставления.Количество() Цикл
				
				КоличествоКлиентов = КоличествоКлиентов  + 1;
				МассивИДКлиентов.Добавить(КлиентыДляСопоставления[Инд -1]);
				фильтрИд = фильтрИд + "filter[externalIds][]=" + Формат(КлиентыДляСопоставления[Инд -1].externalId,"ЧГ=") + "&";
				
				Если  КоличествоКлиентов = 50 тогда 
					
					АдресСкрипта = "/api/v5/customers?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
					
					Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
					Если Найти(ответ, """success"":true") > 0 Тогда
						Ответ = UnJSONТест(ответ);
						Для Каждого клиентCRM из Ответ["customers"] цикл
							
							УстановитьИДКонтЛиц(клиентCRM,СтруктураПараметров.СвойствоКонтЛиц);
							
						КонецЦикла;
						
						КоличествоКлиентов =0;
						МассивИДКлиентов = Новый Массив; 
						фильтрИд = ""; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			АдресСкрипта = "/api/v5/customers?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
			
			Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
			Если Найти(ответ, """success"":true") > 0 Тогда
				Ответ = UnJSONТест(ответ);	
				Для Каждого клиентCRM из Ответ["customers"] Цикл 
					
					УстановитьИДКонтЛиц(клиентCRM,СтруктураПараметров.СвойствоКонтЛиц);
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Сообщить("Пакет не выгружен");
		Сообщить(ответ["errorMsg"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветЗагрузкиКорпКлиентов(ответ,СтруктураПараметров,ТЗКомпаний);

	// КЛИЕНТЫ ВЫГРУЖЕНЫ УСПЕШНО
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Пакет выгружен");
		Сообщить(ответ);
		
		ответ = UnJSONТест(ответ);
		
		Для Каждого стр Из ответ["uploadedCustomers"] Цикл 
			//устанавливаем id партнерам	
			УстановитьИДПартнеров(стр,СтруктураПараметров.СвойствоПартнеров);
			
		КонецЦикла;
		
		//ТЕПЕРЬ ДЕЛАЕМ ЗАПРОС В CRM, ЧТОБЫ ПОЛУЧИТЬ СОЗДАННЫЕ КОМПАНИИ И СВЯЗАТЬ ИХ С КОНТРАГЕНТАМИ В 1С
		//	/api/v5/customers-corporate 
		
		Если ТЗКомпаний.Количество() > 0 Тогда 
			//получаем эти компании из crm
			КоличествоКлиентов = 0;
			МассивИДКлиентов = Новый Массив;
			фильтрИд = "";	
			
			Для Инд = 1 по ТЗКомпаний.Количество() Цикл
				
				КоличествоКлиентов = КоличествоКлиентов  + 1;
				МассивИДКлиентов.Добавить(ТЗКомпаний[Инд -1]);
				фильтрИд = фильтрИд + "filter[externalIds][]=" + Формат(ТЗКомпаний[Инд -1].externalId,"ЧГ=") + "&";
				
				Если  КоличествоКлиентов = 50 тогда 
					
					АдресСкрипта = "/api/v5/customers-corporate?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
					
					Ответ1 = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
					 
					Если Найти(Ответ1, """success"":true") > 0 Тогда
						Ответ1 = UnJSONТест(Ответ1);
						Для Каждого клиентCRM из Ответ1["customersCorporate"] цикл
							
							Попытка
								УстановитьИДКонтрагентов(клиентCRM["mainCompany"],СтруктураПараметров.СвойствоКонтрагентов);
							Исключение
								Сообщить("id контрагента не установлено");
							КонецПопытки;
					
						КонецЦикла;
						
						КоличествоКлиентов =0;
						МассивИДКлиентов = Новый Массив; 
						фильтрИд = ""; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			АдресСкрипта = "/api/v5/customers-corporate?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
			
			Ответ1 = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
			Если Найти(Ответ1, """success"":true") > 0 Тогда
				Ответ1 = UnJSONТест(Ответ1);	
				Для Каждого клиентCRM из Ответ1["customersCorporate"] Цикл 
					
					Попытка
						УстановитьИДКонтрагентов(клиентCRM["mainCompany"],СтруктураПараметров.СвойствоКонтрагентов);
					Исключение
						Сообщить("id контрагента не установлено");
					КонецПопытки;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// ОШИБКА ПРИ ВЫГРУЗКЕ ЗАКАЗОВ	
		
	Иначе
		
		Сообщить(ответ);
		ответ = UnJSONТест(ответ);
		
		//ИДЕМ ПО uploadedCustomers И ЗАПИСЫВАЕМ В 1С id ПАРТНЕРОВ
		
		Если ответ["uploadedCustomers"].Количество()>0 Тогда 
			
			Для Каждого стр из ответ["uploadedCustomers"] Цикл
				
				//устанавливаем id партнерам	
				УстановитьИДПартнеров(стр,СтруктураПараметров.СвойствоПартнеров);	
				
			КонецЦикла;
		
			//ТЕПЕРЬ ДЕЛАЕМ ЗАПРОС В CRM, ЧТОБЫ ПОЛУЧИТЬ СОЗДАННЫЕ КОМПАНИИ И СВЯЗАТЬ ИХ С КОНТРАГЕНТАМИ В 1С
			//	/api/v5/customers-corporate 
		    //В ТЗКомпаний лежат externalId партнеров (корпов)
			Если ТЗКомпаний.Количество() > 0 Тогда 
				//получаем эти компании из crm
				КоличествоКлиентов = 0;
				МассивИДКлиентов = Новый Массив;
				фильтрИд = "";	
				
				Для Инд = 1 по ТЗКомпаний.Количество() Цикл
					
					КоличествоКлиентов = КоличествоКлиентов  + 1;
					МассивИДКлиентов.Добавить(ТЗКомпаний[Инд -1]);
					фильтрИд = фильтрИд + "filter[externalIds][]=" + Формат(ТЗКомпаний[Инд -1].externalId,"ЧГ=") + "&";
					
					Если  КоличествоКлиентов = 50 тогда 
						
						АдресСкрипта = "/api/v5/customers-corporate?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
						
						ОтветКорп = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
						 
						Если Найти(ОтветКорп, """success"":true") > 0 Тогда
							ОтветКорп = UnJSONТест(ОтветКорп);
							Для Каждого клиентCRM из ОтветКорп["customersCorporate"] цикл
								
								УстановитьИДКонтрагентов(клиентCRM,СтруктураПараметров.СвойствоКонтрагентов);
								
							КонецЦикла;
							
							КоличествоКлиентов =0;
							МассивИДКлиентов = Новый Массив; 
							фильтрИд = ""; 
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				АдресСкрипта = "/api/v5/customers-corporate?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
				
				ОтветКорп = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
				Если Найти(ОтветКорп, """success"":true") > 0 Тогда
					ОтветКорп = UnJSONТест(ОтветКорп);	
					Для Каждого клиентCRM из ОтветКорп["customersCorporate"] Цикл 
						
						Попытка
							УстановитьИДКонтрагентов(клиентCRM["mainCompany"],СтруктураПараметров.СвойствоКонтрагентов);
						Исключение
							Сообщить("id контрагента не установлено");
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//ОБРАБОТКА ОШИБКИ: ЗАКАЗ С ТАКИМ EXTERNALID УЖЕ ЕСТЬ
		
		КлиентыДляСопоставления = Новый ТаблицаЗначений();
		КлиентыДляСопоставления.Колонки.Добавить("externalId");
		
		//проверить есть ли ["errors"]
		Для Каждого стр из ответ["errors"] Цикл 
			
			КлиентУжеСуществует = СтрНайти(стр.Значение, "already exists");
			Если КлиентУжеСуществует > 0 Тогда 
				//тащим externalId из строки
				Позиция = СтрНайти(стр.Значение, "externalId=");
				Если Позиция > 0 Тогда 
					НачалоИдентиф = Позиция + 11;
					external = Сред(стр.Значение, НачалоИдентиф, 36);
					СтрТЗ = КлиентыДляСопоставления.Добавить();
					СтрТЗ.externalId = external;
				КонецЕсли;
			Иначе 
				Сообщить("Ошибка: " + стр.Ключ + "; " + стр.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// ПОИСК ЗАКАЗОВ В RETAILCRM, СВЯЗКА С ЗАКАЗАМИ 1С
		
		Если КлиентыДляСопоставления.Количество() > 0 Тогда 
			//получаем эти корпы из crm
			КоличествоКлиентов = 0;
			МассивИДКлиентов = Новый Массив;
			фильтрИд = "";	
			
			Для Инд = 1 по КлиентыДляСопоставления.Количество() Цикл
				
				КоличествоКлиентов = КоличествоКлиентов  + 1;
				МассивИДКлиентов.Добавить(КлиентыДляСопоставления[Инд -1]);
				фильтрИд = фильтрИд + "filter[externalIds][]=" + Формат(КлиентыДляСопоставления[Инд -1].externalId,"ЧГ=") + "&";
				
				Если  КоличествоКлиентов = 50 тогда 
					
					АдресСкрипта = "/api/v5/customers-corporate?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
					
					Ответ2 = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
					Если Найти(Ответ2, """success"":true") > 0 Тогда
						Ответ2 = UnJSONТест(Ответ2);
						Для Каждого клиентCRM из Ответ2["customersCorporate"] цикл
							
							УстановитьИДПартнеров(клиентCRM,СтруктураПараметров.СвойствоПартнеров);
							
							//теперь устанавливаем id контрегентов
							Попытка
								УстановитьИДКонтрагентов(клиентCRM["mainCompany"],СтруктураПараметров.СвойствоКонтрагентов);
							Исключение
								Сообщить("id контрагента не установлено");
							КонецПопытки;
							
						КонецЦикла;
						
						КоличествоКлиентов =0;
						МассивИДКлиентов = Новый Массив; 
						фильтрИд = ""; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			АдресСкрипта = "/api/v5/customers-corporate?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
			
			Ответ2 = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
			Если Найти(Ответ2, """success"":true") > 0 Тогда
				Ответ2 = UnJSONТест(Ответ2);	
				Для Каждого клиентCRM из Ответ2["customersCorporate"] Цикл 
					
					УстановитьИДПартнеров(клиентCRM,СтруктураПараметров.СвойствоПартнеров);
					
					//теперь устанавливаем id контрегентов
					Попытка
						УстановитьИДКонтрагентов(клиентCRM["mainCompany"],СтруктураПараметров.СвойствоКонтрагентов);
					Исключение
						Сообщить("id контрагента не установлено");
					КонецПопытки;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Сообщить("Пакет не выгружен");
		Сообщить(ответ["errorMsg"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИДПартнеров(КлиентCRM, СвойствоПартнеров) Экспорт 

	ИДКлиента = КлиентCRM["id"];
	externalId = КлиентCRM["externalId"];
	// Записать ИД партнера
	Если ИДКлиента <> 0 Тогда
		//ищем партнера
		уид 	= Новый УникальныйИдентификатор(externalId);
		искПартнер = Справочники.Партнеры.ПолучитьСсылку(уид);
		Если ЗначениеЗаполнено(искПартнер) и ИДКлиента <> 0 Тогда
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искПартнер, СвойствоПартнеров, Формат(ИДКлиента, "ЧГ=0"));
			Сообщить("Выгружен " + искПартнер + "!");
		КонецЕсли;
	КонецЕсли;
							
КонецПроцедуры 

Процедура УстановитьИДКонтрагентов(КлиентCRM, СвойствоКонтрагентов) Экспорт 

	ИДКлиента = КлиентCRM["id"];
	externalId = КлиентCRM["externalId"];
	// Записать ИД контрагента
	Если ИДКлиента <> 0 Тогда
		//ищем контрагента
		уид 	= Новый УникальныйИдентификатор(externalId);
		искКонтр = Справочники.Контрагенты.ПолучитьСсылку(уид);
		Если ЗначениеЗаполнено(искКонтр) и ИДКлиента <> 0 Тогда
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искКонтр, СвойствоКонтрагентов, Формат(ИДКлиента, "ЧГ=0"));
			Сообщить("Выгружен " + искКонтр + "!");
		КонецЕсли;
	КонецЕсли;
							
КонецПроцедуры

Процедура УстановитьИДКонтЛиц(КлиентCRM, СвойствоКонтЛиц) Экспорт 

	ИДКлиента = КлиентCRM["id"];
	externalId = КлиентCRM["externalId"];
	// Записать ИД клиента
	Если ИДКлиента <> 0 Тогда
		//ищем партнера
		уид 	= Новый УникальныйИдентификатор(externalId);
		искКонт= Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку(уид);
		Если ЗначениеЗаполнено(искКонт) и ИДКлиента <> 0 Тогда
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искКонт, СвойствоКонтЛиц, Формат(ИДКлиента, "ЧГ=0"));
			Сообщить("Выгружен " + искКонт + "!");
		
		КонецЕсли;
	КонецЕсли;
							
КонецПроцедуры

Процедура ОбработатьОтветЗагрузкиЗаказов(ответ,СтруктураПараметров);
	
	// ЗАКАЗЫ ВЫГРУЖЕНЫ УСПЕШНО
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Пакет выгружен");
		Сообщить(ответ);
		
		ответ = UnJSONТест(ответ);
		
		Для Каждого стр Из ответ["uploadedOrders"] Цикл 
			
			УстановитьИДЗаказов(стр,СтруктураПараметров);
			
		КонецЦикла;
		
		// ОШИБКА ПРИ ВЫГРУЗКЕ ЗАКАЗОВ	
		
	Иначе
		
		//ОБРАБОТКА ОШИБКИ: ЗАКАЗ С ТАКИМ EXTERNALID УЖЕ ЕСТЬ
		
		ответ = UnJSONТест(ответ);
		
		ЗаказыДляСопоставления = Новый ТаблицаЗначений();
		ЗаказыДляСопоставления.Колонки.Добавить("externalId");
		
		Если ответ["errors"] <> Неопределено Тогда 
			Для Каждого стр из ответ["errors"] Цикл 
				
				//если в строке есть already exists то скорее всего такой заказ уже есть в crm, надо его найти и сопоставить с заказом 1С
				ЗаказУжеСуществует = СтрНайти(стр, "already exists");
				Если ЗаказУжеСуществует > 0 Тогда 
					//тащим externalId из строки
					Позиция = СтрНайти(стр, "externalId=");
					Если Позиция > 0 Тогда 
						НачалоИдентиф = Позиция + 11;
						external = Сред(стр, НачалоИдентиф, 36);
						СтрТЗ = ЗаказыДляСопоставления.Добавить();
						СтрТЗ.externalId = external;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// ПОИСК ЗАКАЗОВ В RETAILCRM, СВЯЗКА С ЗАКАЗАМИ 1С
		
		Если ЗаказыДляСопоставления.Количество() > 0 Тогда 
			//получаем эти заказы из crm
			КоличествоЗаказов = 0;
			МассивИДЗаказов = Новый Массив;
			фильтрИд = "";	
			
			Для Инд = 1 по ЗаказыДляСопоставления.Количество() Цикл
				
				КоличествоЗаказов = КоличествоЗаказов  + 1;
				МассивИДЗаказов.Добавить(ЗаказыДляСопоставления[Инд -1]);
				фильтрИд = фильтрИд + "filter[externalIds][]=" + Формат(ЗаказыДляСопоставления[Инд -1].externalId,"ЧГ=") + "&";
				
				Если  КоличествоЗаказов = 50 тогда 
					
					АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
					
					Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
					Если Найти(ответ, """success"":true") > 0 Тогда
						Ответ = UnJSONТест(ответ);
						Для Каждого заказCRM из Ответ["orders"] цикл
							
							УстановитьИДЗаказов(заказCRM,СтруктураПараметров);
							
						КонецЦикла;
						
						КоличествоЗаказов =0;
						МассивИДЗаказов = Новый Массив; 
						фильтрИд = ""; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + СтруктураПараметров.КлючCRM;	  		
			
			Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
			Если Найти(ответ, """success"":true") > 0 Тогда
				Ответ = UnJSONТест(ответ);	
				Для Каждого заказCRM из Ответ["orders"] Цикл 
					
					УстановитьИДЗаказов(заказCRM,СтруктураПараметров);
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Сообщить("Пакет не выгружен");
		Сообщить(ответ["errorMsg"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИДЗаказов(заказCRM, Структура) Экспорт 
	
	ИДЗаказа = заказCRM["id"];
	externalId = заказCRM["externalId"];
	
	// Записать ИД заказа
	Если ИДЗаказа <> 0 Тогда
		//ищем док
		уид 	= Новый УникальныйИдентификатор(externalId);
		искЗаказ= Документы.ЗаказКлиента.ПолучитьСсылку(уид);
		Если ЗначениеЗаполнено(искЗаказ) и ИДЗаказа <> 0 Тогда
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искЗаказ, Структура.СвойствоЗаказов, Формат(ИДЗаказа, "ЧГ=0"));
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искЗаказ, Структура.СвойствоЗаказовМагазин, Структура.КодМагазина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИДКлиентов(КлиентCRM, СвойствоКонтрагентов, СвойствоПартнеров) Экспорт 
	
	ИДКлиента = КлиентCRM["id"];
	externalId = КлиентCRM["externalId"];
	// Записать ИД клиента
	Если ИДКлиента <> 0 Тогда
		//ищем партнера
		уид 	= Новый УникальныйИдентификатор(externalId);
		искКонтр= Справочники.Контрагенты.ПолучитьСсылку(уид);
		Если ЗначениеЗаполнено(искКонтр) Тогда
				crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искКонтр, СвойствоКонтрагентов, Формат(ИДКлиента, "ЧГ=0"));
				Сообщить("Выгружен " + искКонтр + "!");
			
			искПарт = искКонтр.Партнер;
			Если ЗначениеЗаполнено(искПарт) Тогда
					crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искПарт, СвойствоПартнеров, Формат(ИДКлиента, "ЧГ=0"));
					Сообщить("Выгружен " + искПарт + "!");
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРеализациюВCRM(Реализация, Отменить=Ложь) Экспорт
	
	док = Реализация.ЗаказКлиента;
	
	//проверим наличие возврата, если он есть, то в crm не выгружаем реализацию
	ДокВозврат = crm_RetailCRMОбработка.УТ11_ВернутьВозврат(Реализация.Ссылка);
	
	Если ЗначениеЗаполнено(ДокВозврат) Тогда 
		Если ДокВозврат.Проведен Тогда 
			Сообщить("По данному заказу был создан возврат. Заказ не будет выгружен в RetailCRM");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные 	= Новый Соответствие();
	заказ 		= Новый Соответствие();
	
	//поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.Ссылка, СвойствоЗаказовМагазин);
	
	переменные.Вставить("site", КодМагазина);	
	
	СвойствоРеализаций = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("crm_СтатусЗаказа", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РеализацияТоваровУслуг, "Сведение");
	crm_СтатусЗаказа = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Реализация.Ссылка, СвойствоРеализаций);  
	
	СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
	
	Если НомерЗаказа = "" Тогда
		Возврат;
	КонецЕсли;
	
	переменные.Вставить("apiKey",	КлючCRM);
	
	//надо проверять состав заказа в реализации, если он меньше, то отменять товары в заказе или менять количество
	ТЗРеализаций = Реализация.Товары.Выгрузить();
	
	ТЗЗаказ = док.Товары.Выгрузить();
	//ТЗЗаказ.Свернуть("Номенклатура, Характеристика, Цена, ВидЦены, Отменено", "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки");
	ТЗЗаказ.Колонки.Добавить("Статус");
	
	ЧастичноВыполнен = Ложь;
	
	//сначала идем по реализации и заказу
	Для Каждого стрРеализ из ТЗРеализаций Цикл
		//ищем в заказе эту строку
		Если ЗначениеЗаполнено(стрРеализ.Характеристика) Тогда 
			НайденСтроки = ТЗЗаказ.НайтиСтроки(Новый Структура("Характеристика", стрРеализ.Характеристика));
		Иначе
			НайденСтроки = ТЗЗаказ.НайтиСтроки(Новый Структура("Номенклатура", стрРеализ.Номенклатура));  
		КонецЕсли;
		
		Если НайденСтроки <> Неопределено Тогда         //по-хорошему строка должна быть 1, делить товар по строкам модуль не поддерживает  
			//если нашли несколько строк, то нужно продолжить поиск, сопоставив по типу цены, цене скидке
			Если НайденСтроки.Количество() > 1 Тогда 
				
				//продолжим поиск
				Для Каждого стр из НайденСтроки Цикл 
					//сравниваем вид цены
					Если стр.ВидЦены = стрРеализ.ВидЦены Тогда 
						//сравниваем цену
						Если стр.Цена = стрРеализ.Цена Тогда
							//вравниваем скидку
							//это та строка что нам нужна
							Если стр.Количество = стрРеализ.Количество Тогда     
								стр.Статус = "completed"; 
							ИначеЕсли стр.Количество > стрРеализ.Количество Тогда 
								стр.Статус = "completed";
								
								//в ТЗ заказ добавим строку с отмененным товаром
								стрТЗЗаказ = ТЗЗаказ.Добавить();
								стрТЗЗаказ.Номенклатура 	= стр.Номенклатура;
								стрТЗЗаказ.Характеристика 	= стр.Характеристика; 
								стрТЗЗаказ.Количество 		= стр.Количество - стрРеализ.Количество;
								стрТЗЗаказ.КоличествоУпаковок = стр.Количество - стрРеализ.Количество;
								стрТЗЗаказ.ВидЦены 			= стр.ВидЦены;
								стрТЗЗаказ.Цена 			= стр.Цена;
								стрТЗЗаказ.Статус 			= "failure";
								стрТЗЗаказ.ИдентификаторСтроки = стрРеализ.ИдентификаторСтроки;
								стрТЗЗаказ.СуммаРучнойСкидки = (стр.СуммаРучнойСкидки/стр.Количество)*стрТЗЗаказ.Количество;
								стр.Количество = стрРеализ.Количество;
								ЧастичноВыполнен = Истина;
							ИначеЕсли стр.Количество < стрРеализ.Количество Тогда 
								Сообщить("В реализации кол-во товара не должно превышать количество в заказе");
								//в 1С надо бы тоже уменьшить кол-во в заказе, так как такой заказ будет считаться частично отгруженным
								стр.Количество = стрРеализ.Количество;
							КонецЕсли;
							Прервать;
						Иначе 
							Продолжить;
						КонецЕсли;	
					Иначе 
						Продолжить;
					КонецЕсли;			
				КонецЦикла;
			Иначе 		
				Для Каждого стр из НайденСтроки Цикл
					Если стр.Количество = стрРеализ.Количество Тогда     
						стр.Статус = "completed";
					ИначеЕсли стр.Количество > стрРеализ.Количество Тогда 
						стр.Статус = "completed";
						стр.Количество = стрРеализ.Количество;
						ЧастичноВыполнен = Истина;
					ИначеЕсли стр.Количество < стрРеализ.Количество Тогда 
						Сообщить("В реализации кол-во товара не должно превышать количество в заказе");
						//в 1С надо бы тоже уменьшить кол-во в заказе, так как такой заказ будет считаться частично отгруженным
						стр.Количество = стрРеализ.Количество;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Отменить = Истина Тогда 
		Отгружен = false;
	Иначе 	
		Отгружен = true;
	КонецЕсли;
	
	Эталонная = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная");
	
	товары = Новый Массив();
	
	НоменклатураДоставки = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Для каждого стр из ТЗЗаказ Цикл
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + док.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		товар.Вставить("productName",	стр.Номенклатура.Наименование);
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		Если ЗначениеЗаполнено(стр.ВидЦены) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			
			ТипЦены = Новый Соответствие();
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда
				КодТипаЦены = ТипыЦен.Найти(стр.ВидЦены, "ТипЦены");
				Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
					ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
					товар.Вставить("priceType", ТипЦены);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
		//передача признака отмены строки
		//если в ТЗ не заполнен статус, значит товара не было в реализации, но в заказе он не отменен
		Если стр.Отменено = Истина Тогда 
			стр.Статус = "failure";
			товар.Вставить("status", "failure");
			ЧастичноВыполнен = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Статус) Тогда
			товар.Вставить("status", стр.Статус);	
		Иначе 
			Если стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда 
				Статус = "confirming";
				товар.Вставить("status", Статус);
			ИначеЕсли 
				стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда 
				Статус = "confirming";
				товар.Вставить("status", Статус);
				товар.Вставить("comment", "Товар отгружается в 1С и должен быть добавлен в реализацию или отменен");
			КонецЕсли;
		КонецЕсли;
		
		РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0);       
		
		ИдентификаторыПозиции = Новый Массив();
		ИдентифПоз = Новый Соответствие();
		ИдентифПоз.Вставить("code",		"1C");		
		ИдентифПоз.Вставить("value",	стр.ИдентификаторСтроки);
		ИдентификаторыПозиции.Добавить(ИдентифПоз);
		
		товар.Вставить("externalIds",			ИдентификаторыПозиции);
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ.Вставить("items",товары);
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	СостояниеЗаказа = crm_RetailCRMОбработка.УТ11_ПолучитьСостояниеЗаказа(док);
	
	Если Эталонная Тогда
		
		Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда 
			Если ЧастичноВыполнен = Истина Тогда 
				СтатусЗаказа = "partially-completed";
			КонецЕсли;
			
			//если все строки отменены то и заказ отменен
			ЗаказОтменен = Истина;
			Отгружен = false;
			Для Каждого строкаТЧ из док.Товары Цикл
				Если строкаТЧ.Отменено = Ложь Тогда 
					ЗаказОтменен = Ложь;
					Отгружен = true;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТабСостояний = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТабСостояний");
		Если ТабСостояний <> Неопределено Тогда
			НайдСтр = ТабСостояний.Найти(СостояниеЗаказа, "Состояние");
			Если ЗначениеЗаполнено(НайдСтр) Тогда 
				СтатусЗаказа = НайдСтр.Название;
			КонецЕсли;
		КонецЕсли;
		
		Если СтатусЗаказа = "complete" и (ЧастичноВыполнен = Истина или crm_СтатусЗаказа = "partially-completed") Тогда 
			//смотрим, вдруг ранее из crm был загружен частично выполнен, тогда его и выгружаем
			СтатусЗаказа = "partially-completed";
		КонецЕсли;
	Иначе
		Если Отменить = Истина Тогда 
			СтатусЗаказа = "assembling";  //Комплектуется
			Отгружен = false;
		Иначе 
			СтатусЗаказа = "for-shipment";  //Скомплектован
			Отгружен = true;
		КонецЕсли;
		Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
			СтатусЗаказа = "complete";  //Выполнен
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусЗаказа) Тогда 
		заказ.Вставить("status",	СтатусЗаказа);
	КонецЕсли;
	
	заказ.Вставить("shipped",	Отгружен);
	
	переменные.Вставить("order",	JsonTest(заказ, Новый ЗаписьJSON));
	переменные.Вставить("by",		"id");
	
	ответ = HTTPзапросPOSTАрхив(ИмяСервера,"/api/v5/orders/" + СокрЛП(НомерЗаказа) + "/edit", переменные);	
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Реализация успешно выгружена в RetailCRM");
		Если СтатусЗаказа = "partially-completed" Тогда 
			СвойствоРеализаций = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("crm_СтатусЗаказа", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РеализацияТоваровУслуг, "Сведение");
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Реализация.Ссылка, СвойствоРеализаций, СтатусЗаказа);  
		КонецЕсли;
	Иначе
		Сообщить("Трудности с выгрузкой документа: " + Реализация.Ссылка + " в RetailCRM", СтатусСообщения.Важное);	
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИмяСервера");
		СтруктураПараметров.Вставить("КлючCRM");
		СтруктураПараметров.Вставить("КодМагазина");
		СтруктураПараметров.Вставить("ИдентифТовара");
		СтруктураПараметров.Вставить("НомерЗаказа");
		СтруктураПараметров.Вставить("offers_id");
		СтруктураПараметров.Вставить("НоменклатураДоставки");
		СтруктураПараметров.Вставить("Доставка");
		СтруктураПараметров.Вставить("СостояниеЗаказа");
		СтруктураПараметров.Вставить("Отменить"); 
		СтруктураПараметров.Вставить("СтатусЗаказа");
		СтруктураПараметров.Вставить("Отгрузка");
		
		СтруктураПараметров.ИмяСервера    	= ИмяСервера;
		СтруктураПараметров.КлючCRM    		= КлючCRM;
		СтруктураПараметров.КодМагазина    	= КодМагазина;
		СтруктураПараметров.ИдентифТовара	= ИдентифТовара;
		СтруктураПараметров.НомерЗаказа		= НомерЗаказа;
		СтруктураПараметров.offers_id		= offers_id;
		СтруктураПараметров.НоменклатураДоставки	= НоменклатураДоставки;
		СтруктураПараметров.СостояниеЗаказа = СостояниеЗаказа;
		СтруктураПараметров.Отменить    	= Отменить;
		СтруктураПараметров.СтатусЗаказа    = СтатусЗаказа;
		СтруктураПараметров.Отгрузка    	= Отгружен;
		ExternalIds = Ложь;
		ОбработатьОтветВыгрузкиРеализации(ответ, док, СтруктураПараметров); 
		Если Найти(ответ, """success"":true") > 0 Тогда
			Сообщить("Реализация успешно выгружена в RetailCRM"); 
		Иначе 
			Сообщить("Трудности с выгрузкой документа: " + Док + " в retailCRM. Реализация не выгружена", СтатусСообщения.Важное);
			Сообщить("Возможно в заказе имеются повторяющие строки", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьВозвратВCRM(докВозврат, Отменить=Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(докВозврат.ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(докВозврат.ДокументРеализации.ЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;
	
	Реализация = докВозврат.ДокументРеализации.ПолучитьОбъект();
	
	ЗаказКлиента = Реализация.ЗаказКлиента.ПолучитьОбъект();
	
	Если Отменить Тогда 
		
		ВыгрузитьРеализациюВCRM(Реализация.Ссылка, Ложь);
		Возврат;
		
	КонецЕсли;
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные 	= Новый Соответствие();
	заказ 		= Новый Соответствие();
	
	//поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(ЗаказКлиента.Ссылка, СвойствоЗаказовМагазин);
	
	переменные.Вставить("site", КодМагазина);
	
	СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(ЗаказКлиента.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
	
	Если НомерЗаказа = "" Тогда
		Возврат;
	КонецЕсли;
	
	переменные.Вставить("apiKey",	КлючCRM);
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	ТЗРеализаций = Реализация.Товары.Выгрузить();
	
	ТЗЗаказ = ЗаказКлиента.Товары.Выгрузить();
	ТЗЗаказ.Колонки.Добавить("Статус");
	
	//надо проверять состав заказа в реализации, если он меньше, то отменять товары в заказе или менять количество
	
	//сначала идем по реализации и заказу
	Для Каждого стрРеализ из ТЗРеализаций Цикл
		//ищем в заказе эту строку
		Если ЗначениеЗаполнено(стрРеализ.Характеристика) Тогда 
			НайденСтроки = ТЗЗаказ.НайтиСтроки(Новый Структура("Характеристика", стрРеализ.Характеристика));
		Иначе
			НайденСтроки = ТЗЗаказ.НайтиСтроки(Новый Структура("Номенклатура", стрРеализ.Номенклатура));  
		КонецЕсли;
		
		Если НайденСтроки <> Неопределено Тогда  
			//если нашли несколько строк, то нужно продолжить поиск, сопоставив по типу цены, цене скидке
			Если НайденСтроки.Количество() > 1 Тогда 
				
				строкОсталось = НайденСтроки.Количество();
				
				//продолжим поиск
				Для Каждого стр из НайденСтроки Цикл 
					строкОсталось = строкОсталось - 1;
					Если стр.Отменено = Истина Тогда  
						стр.Статус = "failure";
						Продолжить;
					КонецЕсли;
					
					Если стр.Статус = "sold" Тогда
						//уже обрабатывали эту строку
						Продолжить;
					КонецЕсли;
					
					Если стр.Количество = стрРеализ.Количество Тогда     
						стр.Статус = "sold"; 
					ИначеЕсли стр.Количество > стрРеализ.Количество Тогда 
						стр.Статус = "sold";
						
						//в ТЗ заказ добавим строку с отмененным товаром
						стрТЗЗаказ = ТЗЗаказ.Добавить();
						стрТЗЗаказ.Номенклатура 	= стр.Номенклатура;
						стрТЗЗаказ.Характеристика 	= стр.Характеристика; 
						стрТЗЗаказ.Количество 		= стр.Количество - стрРеализ.Количество;
						стрТЗЗаказ.КоличествоУпаковок = стрТЗЗаказ.Количество;
						стрТЗЗаказ.ВидЦены 			= стр.ВидЦены;
						стрТЗЗаказ.Цена 			= стр.Цена;
						стрТЗЗаказ.Статус 			= "failure";
						стрТЗЗаказ.ИдентификаторСтроки = стрРеализ.ИдентификаторСтроки;
						стрТЗЗаказ.СуммаРучнойСкидки = (стр.СуммаРучнойСкидки/стр.Количество)*стрТЗЗаказ.Количество;
						стр.Количество = стрРеализ.Количество;
						ЧастичноВыполнен = Истина;
					ИначеЕсли стр.Количество < стрРеализ.Количество Тогда 
						Сообщить("В реализации кол-во товара не должно превышать количество в заказе");
						//в 1С надо бы тоже уменьшить кол-во в заказе, так как такой заказ будет считаться частично отгруженным
						стр.Количество = стрРеализ.Количество;
					КонецЕсли;
					Прервать;
				КонецЦикла;
			Иначе 		
				Для Каждого стр из НайденСтроки Цикл
					Если стр.Количество = стрРеализ.Количество Тогда     
						стр.Статус = "sold";
					ИначеЕсли стр.Количество > стрРеализ.Количество Тогда 
						стр.Статус = "sold";
						стр.Количество = стрРеализ.Количество;
						ЧастичноВыполнен = Истина;
					ИначеЕсли стр.Количество < стрРеализ.Количество Тогда 
						Сообщить("В реализации кол-во товара не должно превышать количество в заказе");
						//в 1С надо бы тоже уменьшить кол-во в заказе, так как такой заказ будет считаться частично отгруженным
						стр.Количество = стрРеализ.Количество;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	//теперь идем по ТЗ заказ и возвратам	
	
	Для Каждого стрВозврат из докВозврат.Товары Цикл 
		//в заказе ищем строки с товарами из возврата
		Если ЗначениеЗаполнено(стрВозврат.Характеристика) Тогда 
			НайденСтр = ТЗЗаказ.НайтиСтроки(Новый Структура("Характеристика", стрВозврат.Характеристика));
		Иначе
			НайденСтр = ТЗЗаказ.НайтиСтроки(Новый Структура("Номенклатура", стрВозврат.Номенклатура));  
		КонецЕсли;
		
		Если НайденСтр <> Неопределено Тогда 
			Для Каждого стрЗ из НайденСтр Цикл
				Если стрЗ.Статус = "sold" Тогда 
					Если стрЗ.Количество = стрВозврат.Количество Тогда     //сравниваем кол в строке заказа и кол-во в строке возврата
						стрЗ.Статус = "returned";
					ИначеЕсли стрЗ.Количество > стрВозврат.Количество Тогда 
						стрЗ.Статус = "chastichnyi-vozvrat";
						стрЗ.Количество = стрЗ.Количество - стрВозврат.Количество; 
						//вот тут надо строку на 2 разбить
					ИначеЕсли стрЗ.Количество < стрВозврат.Количество Тогда 
						Сообщить("Как можно вернуть больше чем купили?");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	товары = Новый Массив();
	
	НоменклатураДоставки = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	
	СтатусЗаказа = "return";
	
	Для каждого стр из ТЗЗаказ Цикл
		
		Если не стр.Отменено Тогда 
			Если стр.Статус = Неопределено или стр.Статус <> "returned" Тогда 
				СтатусЗаказа = "partially-returned";
			КонецЕсли;
		КонецЕсли;
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + докВозврат.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		товар.Вставить("productName",	стр.Номенклатура.Наименование);
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		Если ЗначениеЗаполнено(стр.ВидЦены) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			
			ТипЦены = Новый Соответствие();
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда
				КодТипаЦены = ТипыЦен.Найти(стр.ВидЦены, "ТипЦены");
				Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
					ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
					товар.Вставить("priceType", ТипЦены);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
		//передача признака отмены строки
		Если стр.Отменено = Истина Тогда 
			Статус = "failure";
			товар.Вставить("status", Статус);
		Иначе 
			товар.Вставить("status", стр.Статус);
		КонецЕсли;
		
		РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0);       
		
		ИдентификаторыПозиции = Новый Массив();
		ИдентифПоз = Новый Соответствие();
		ИдентифПоз.Вставить("code",		"1C");		
		ИдентифПоз.Вставить("value",	стр.ИдентификаторСтроки);
		ИдентификаторыПозиции.Добавить(ИдентифПоз);
		
		товар.Вставить("externalIds",			ИдентификаторыПозиции);
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ = Новый Соответствие();
	
	заказ.Вставить("items",товары);
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	заказ.Вставить("status",	СтатусЗаказа); 
	
	переменные.Вставить("by",	 "id");	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	//ответ = HTTPзапросPOST(ИмяСервера 	,"/api/v5/orders/" + НомерЗаказа + "/edit", переменные);
	ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/" + НомерЗаказа + "/edit", переменные);
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Возврат успешно выгружен в RetailCRM");
	Иначе
		Сообщить("Трудности с выгрузкой документа: " + докВозврат + " в retailCRM. Возврат не выгружен", СтатусСообщения.Важное);	
	КонецЕсли; 
	
КонецПроцедуры
// --- Выгрузка архивов ---

// +++ Программа лояльности +++
Процедура СоздатьКлиентаИзФормыКонтрагента(Партнер, Успешно, Создать, Обновить) Экспорт 
	
	//проверяем ли создан контрагент в crm 
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	
	ИДПартнера 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Партнер, СвойствоПартнеров);
	ИДКонтрагента = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Партнер, СвойствоПартнеров);
	
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	Выборка = ЗапросДанныхКлиента(Партнер);
	
	Пока Выборка.Следующий() Цикл
		СоздатьКлиентаВCRM(Выборка,Успешно,ИДПартнера, Создать, Обновить, КодМагазина, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияКлиента (Партнер, Успешно, Активность) Экспорт 
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	ИДПартнера 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Партнер, СвойствоПартнеров);
	
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	Выборка = ЗапросКлиентаДляРегистрации(Партнер);
	
	Пока Выборка.Следующий() Цикл
		ЗарегистрироватьКлиентаВПЛCRM(Выборка, Успешно, Активность, ИДПартнера, КодМагазина, Неопределено);	
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросКлиентаДляРегистрации(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(Партнеры.ДатаРегистрации, """") КАК ДатаРегистрации,
	|	ЕСТЬNULL(Партнеры.Пол, """") КАК Пол,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, """") КАК ДатаРождения,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(Партнеры.Ссылка, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ЕСТЬNULL(Партнеры.НаименованиеПолное, """") КАК НаименованиеПартнера
	|ПОМЕСТИТЬ вт_итог
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.Предопределенный
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ЮрФизЛицо
	|	И Партнеры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_телефон
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ТелефонПр
	|ПОМЕСТИТЬ П_телефон
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_итог.Контрагент КАК Контрагент,
	|	вт_итог.Партнер КАК Партнер,
	|	ЕСТЬNULL(вт_телефон.Телефон, """") КАК Телефон,
	|	ЕСТЬNULL(П_телефон.ТелефонПр, """") КАК ТелефонП
	|ИЗ
	|	вт_итог КАК вт_итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефон КАК вт_телефон
	|		ПО вт_итог.Контрагент = вт_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_телефон КАК П_телефон
	|		ПО вт_итог.Партнер.Ссылка = П_телефон.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент
	|ИТОГИ
	|	МАКСИМУМ(Партнер),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Телефон),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТелефонП)
	|ПО
	|	Контрагент";
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	Запрос.УстановитьПараметр("Свойство", СвойствоПартнеров);
	Запрос.УстановитьПараметр("ЮрФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо); 
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("Ссылка", Партнер);	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	Возврат Выборка;
	
КонецФункции

Функция ЗапросДанныхКлиента(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_Сведения
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(Партнеры.ДатаРегистрации, """") КАК ДатаРегистрации,
	|	ЕСТЬNULL(Партнеры.Пол, """") КАК Пол,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, """") КАК ДатаРождения,
	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(Партнеры.Ссылка, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ЕСТЬNULL(Партнеры.НаименованиеПолное, """") КАК НаименованиеПартнера
	|ПОМЕСТИТЬ вт_итог
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
	|		ПО Контрагенты.Ссылка = вт_Сведения.Объект
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.Предопределенный
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ЮрФизЛицо
	|	И Партнеры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_телефон
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка1,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Почта
	|ПОМЕСТИТЬ вт_почта
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Адрес,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка3
	|ПОМЕСТИТЬ вт_адрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ТелефонПр
	|ПОМЕСТИТЬ П_телефон
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК АдресПр
	|ПОМЕСТИТЬ П_адрес
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ПочтаПр
	|ПОМЕСТИТЬ П_почта
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_итог.Контрагент КАК Контрагент,
	|	вт_итог.ДатаРегистрации КАК ДатаРегистрации,
	|	вт_итог.Пол КАК Пол,
	|	вт_итог.ДатаРождения КАК ДатаРождения,
	|	вт_итог.ИД КАК ИД,
	|	вт_итог.НаименованиеПолное КАК НаименованиеПолное,
	|	вт_итог.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	вт_итог.Партнер КАК Партнер,
	|	вт_итог.НаименованиеПартнера КАК НаименованиеПартнера,
	|	ЕСТЬNULL(вт_адрес.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(вт_почта.Почта, """") КАК Почта,
	|	ЕСТЬNULL(вт_телефон.Телефон, """") КАК Телефон,
	|	ЕСТЬNULL(П_адрес.АдресПр, """") КАК АдресП,
	|	ЕСТЬNULL(П_почта.ПочтаПр, """") КАК ПочтаП,
	|	ЕСТЬNULL(П_телефон.ТелефонПр, """") КАК ТелефонП
	|ИЗ
	|	вт_итог КАК вт_итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефон КАК вт_телефон
	|		ПО вт_итог.Контрагент = вт_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_почта КАК вт_почта
	|		ПО вт_итог.Контрагент = вт_почта.Ссылка1
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_адрес КАК вт_адрес
	|		ПО вт_итог.Контрагент = вт_адрес.Ссылка3
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_телефон КАК П_телефон
	|		ПО вт_итог.Партнер.Ссылка = П_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_адрес КАК П_адрес
	|		ПО вт_итог.Партнер.Ссылка = П_адрес.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_почта КАК П_почта
	|		ПО вт_итог.Партнер.Ссылка = П_почта.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент
	|ИТОГИ
	|	МАКСИМУМ(ДатаРегистрации),
	|	МАКСИМУМ(Пол),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(ИД),
	|	МАКСИМУМ(НаименованиеПолное),
	|	МАКСИМУМ(ЮридическоеФизическоеЛицо),
	|	МАКСИМУМ(Партнер),
	|	МАКСИМУМ(НаименованиеПартнера),
	|	МАКСИМУМ(Адрес),
	|	МАКСИМУМ(Почта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Телефон),
	|	МАКСИМУМ(АдресП),
	|	МАКСИМУМ(ПочтаП),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТелефонП)
	|ПО
	|	Контрагент";
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтрагентов);
	Запрос.УстановитьПараметр("ЮрФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо); 
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", Партнер);	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	Возврат Выборка;
	
КонецФункции

Функция АктивироватьКлиентаВПЛ (Партнер, Успешно) Экспорт 
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДУчастияВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	ИДУчастия 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Партнер, СвойствоПартнеров);
	
	ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера ,"/api/v5/loyalty/account/" + ИДУчастия+ "/activate", переменные);
	
	ответ = UnJSONТест(ответ);
	Если ответ["success"] = Истина Тогда
		Успешно = Истина;
		СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("АктивенВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
		crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Партнер, СвойствоПартнеров, ответ["loyaltyAccount"]["active"]);
		Сообщить("Клиент активирован в программе лояльности");
	Иначе 
		Если ответ["errorMsg"] = "LoyaltyAccount has been already activated" Тогда 
			СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("АктивенВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Партнер, СвойствоПартнеров, Истина);
			Успешно = Истина;
			Сообщить("Клиент уже активирован в программе лояльности");
		ИначеЕсли ответ["errorMsg"] = "Not enough money to send SMS" Тогда
			Сообщить("Недостаточно средств для отравки SMS");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции	

Процедура УстановитьСвойстваПЛ(Партнер, idУчастия, Активность) Экспорт
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДУчастияВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Партнер, СвойствоПартнеров, idУчастия);
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("АктивенВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Партнер, СвойствоПартнеров, Активность);
	
КонецПроцедуры

Процедура ПолучитьДанныеБонусногоСчета (Партнер, Структура) Экспорт
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДУчастияВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	ИДУчастия 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Партнер, СвойствоПартнеров);
	
	ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	АдресСкрипта = "/api/v5/loyalty/account/" + ИДУчастия + "?apiKey=" + КлючCRM + "&by=id";
	Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера, АдресСкрипта);
	Ответ = UnJSONТест(Ответ);
	Если Ответ["success"] = Истина Тогда
		//СтруктураПараметров = Новый Структура;
		
		//получим id участия и активность и запишем в доп сведения
		Если Строка(Ответ["loyaltyAccount"]["loyalty"]["id"]) = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("idПЛ") Тогда 
			Статус = "";
			Если Ответ["loyaltyAccount"]["status"] = "activated" Тогда 
				Статус = "Активен";
			ИначеЕсли Ответ["loyaltyAccount"]["status"] = "deactivated" Тогда 
				Статус = "Деактивирован";
			ИначеЕсли Ответ["loyaltyAccount"]["status"] = "not_confirmed" Тогда 
				Статус = "Не подтвержден";
			КонецЕсли;
			
			Структура.Вставить("Статус", 				Статус); 
			Структура.Вставить("idУчастия", 			Ответ["loyaltyAccount"]["id"]);
			Структура.Вставить("Уровень", 				Ответ["loyaltyAccount"]["level"]["name"]);
			Структура.Вставить("СуммаПокупок", 			Ответ["loyaltyAccount"]["ordersSum"]);
			Структура.Вставить("СуммаДоСледУровня", 	Ответ["loyaltyAccount"]["nextLevelSum"]);
			Структура.Вставить("Бонусы", 				Ответ["loyaltyAccount"]["amount"]);
			Структура.Вставить("НомерКарты", 			Ответ["loyaltyAccount"]["cardNumber"]);
			Структура.Вставить("Телефон", 				Ответ["loyaltyAccount"]["phoneNumber"]);
			Структура.Вставить("ДатаРегистрации", 		ПреобразоватьДатуCRM(Ответ["loyaltyAccount"]["createdAt"]));
			Структура.Вставить("ОбычныеТовары", 		Ответ["loyaltyAccount"]["level"]["privilegeSize"]); 
			Структура.Вставить("АкционныеТовары", 		Ответ["loyaltyAccount"]["level"]["privilegeSizePromo"]);
			
		Иначе 
			Сообщить("Не удалось получить данные бонусного счета");
		КонецЕсли;
	Иначе
		Сообщить("Не удалось получить данные бонусного счета");		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьДатуCRM (дт) Экспорт 
	
	Если дт = Дата(1,1,1) или дт = "" или  ТипЗнч(дт) = Тип("Дата") Тогда 
		Дата1С = дт;
	Иначе		
		Дата1С = Дата(Сред(дт,0,4)+Сред(дт,6,2)+Сред(дт,9,2)+Сред(дт,12,2)+Сред(дт,15,2)+Сред(дт,18,2));
	КонецЕсли;
	
	Возврат Дата1С;
	
КонецФункции    

Процедура ОбработатьОтветЗагрузкиКлиента(ответ,СтруктураПараметров, Партнер, Контрагент, Успешно);
	
	//ОБРАБОТКА ОШИБКИ: ЗАКАЗ С ТАКИМ EXTERNALID УЖЕ ЕСТЬ
	
	Если ответ["errorMsg"] = "Customer already exists" Тогда  
		
		//получаем этого клиента по externalId
		АдресСкрипта = "/api/v5/customers/" + Строка(Контрагент.УникальныйИдентификатор()) + "?apiKey=" + СтруктураПараметров.КлючCRM;	  		
		
		Ответ = HTTPзапросGET(СтруктураПараметров.ИмяСервера,АдресСкрипта);
		Ответ = UnJSONТест(ответ);
		
		Если Ответ["success"] = истина Тогда 
			
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Партнер,  СтруктураПараметров.СвойствоПартнеров, Формат(Ответ["customer"]["id"], "ЧГ=0"));
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Контрагент,  СтруктураПараметров.СвойствоКонтрагентов, Формат(Ответ["customer"]["id"], "ЧГ=0"));
			Успешно = Истина;
			Сообщить("Клиент уже существует в RetailCRM. Текущий клиент связан с клиентом RetailCRM");
		КонецЕсли;
	ИначеЕсли ответ["errorMsg"] = "Not found" Тогда
		Сообщить("Клиент не найден в RetailCRM");	
	Иначе
		Если ответ["errors"] <> Неопределено Тогда 
			Для Каждого стр из ответ["errors"] Цикл
				Попытка
					Сообщить("" + стр.Значение);
				Исключение
					Сообщить("Клиент не выгружен");
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКлиентаВCRM (Выборка, Успешно, id, Создать, Обновить, КодМагазина, Ответ) Экспорт 
	
	ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	//КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	
	ТЗТелефонов = Новый ТаблицаЗначений;
	ТЗТелефонов.Колонки.Добавить("Телефон");
	
	//Если ТипЗнч(Выборка) = Тип("СтрокаТаблицыЗначений") Тогда 
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		Если ЗначениеЗаполнено(Выборка.ТелефонП) Тогда 
			ДочерниеЗаписи = Выборка.Выбрать();
			Пока ДочерниеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ДочерниеЗаписи.ТелефонП) Тогда
					Стр = ТЗТелефонов.Добавить();
					Стр.Телефон = ДочерниеЗаписи.ТелефонП;	
				КонецЕсли;
				Если ЗначениеЗаполнено(ДочерниеЗаписи.Телефон) Тогда
					Стр = ТЗТелефонов.Добавить();
					Стр.Телефон = ДочерниеЗаписи.Телефон;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
	КонецЕсли;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	Контрагент = Новый Соответствие();
	Контрагент.Вставить("patronymic",	"");  
	Контрагент.Вставить("lastName",		"");
	Контрагент.Вставить("firstName",	Выборка.Контрагент.Наименование);
	
	Если ЗначениеЗаполнено(Выборка.Пол) Тогда 
		Если Выборка.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда 
			Контрагент.Вставить("sex",	"male");
		Иначе Контрагент.Вставить("sex","female");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДатаРегистрации) Тогда 
		Контрагент.Вставить("createdAt", ДатаВремяДляCRM(Выборка.ДатаРегистрации));
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда 
		Контрагент.Вставить("birthday",	ДатаВремяДляCRM(Выборка.ДатаРождения, Ложь));
	КонецЕсли;
	
	Контрагент.Вставить("externalId",	Строка(Выборка.Контрагент.УникальныйИдентификатор()));
	
	Телефоны = Новый Массив();
	
	Если ТЗТелефонов.Количество() > 0 Тогда 
		ТЗТелефонов.Свернуть("Телефон");
		Для Каждого стрТЗ из ТЗТелефонов Цикл 
			Телефон = Новый Соответствие();
			Телефон.Вставить("number",	стрТЗ.Телефон);
			Телефоны.Добавить(Телефон);	
		КонецЦикла;
	Иначе 
		Телефон = Новый Соответствие();
		Если ЗначениеЗаполнено(Выборка.ТелефонП) Тогда 
			Телефон.Вставить("number",	Выборка.ТелефонП);
			Телефоны.Добавить(Телефон);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Телефон) Тогда 
			Телефон.Вставить("number",	Выборка.Телефон);
			Телефоны.Добавить(Телефон);
		КонецЕсли;
	КонецЕсли;
	
	Контрагент.Вставить("phones",Телефоны);
	
	Если ЗначениеЗаполнено(Выборка.Почта) Тогда 
		Контрагент.Вставить("email",	Выборка.Почта);
	ИначеЕсли 
		ЗначениеЗаполнено(Выборка.ПочтаП) Тогда 
		Контрагент.Вставить("email",	Выборка.ПочтаП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Адрес) Тогда 
		Адрес = Новый Соответствие();
		Адрес.Вставить("text", Выборка.Адрес); 
		Контрагент.Вставить("address",	Адрес);
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Соответствие();
	ДанныеКонтрагента.Вставить("contragentType",	"individual");
	
	Контрагент.Вставить("contragent", 				ДанныеКонтрагента);
	Если Создать Тогда 
		переменные.Вставить("customer",	JsonTest(Контрагент, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers/create", переменные);
	ИначеЕсли Обновить Тогда
		
		переменные.Вставить("by",	 "id");
		переменные.Вставить("customer",	JsonTest(Контрагент, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/customers/" + id + "/edit", переменные);
	КонецЕсли;
	
	ответ = UnJSONТест(ответ);
	Если ответ["success"] = Истина Тогда
		Успешно = Истина;
		id = Формат(ответ["id"],"ЧГ=");
		Если Создать Тогда
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Выборка.Партнер, СвойствоПартнеров, id); 
			crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Выборка.Контрагент, СвойствоКонтрагентов, id);
			Сообщить("Клиент создан в RetailCRM");
		ИначеЕсли Обновить Тогда
			Сообщить("Данные клиента обновлены в RetailCRM");
		КонецЕсли;
	Иначе 
		Успех = Неопределено;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяСервера");
		СтруктураПараметров.Вставить("КлючCRM");
		СтруктураПараметров.Вставить("КодМагазина");
		СтруктураПараметров.Вставить("СвойствоКонтрагентов");
		СтруктураПараметров.Вставить("СвойствоПартнеров");
		СтруктураПараметров.ИмяСервера    	= ИмяСервера;
		СтруктураПараметров.КлючCRM    		= КлючCRM;
		СтруктураПараметров.КодМагазина    	= КодМагазина;
		СтруктураПараметров.СвойствоКонтрагентов= СвойствоКонтрагентов;
		СтруктураПараметров.СвойствоПартнеров	= СвойствоПартнеров;
		
		ОбработатьОтветЗагрузкиКлиента(ответ,СтруктураПараметров, Выборка.Партнер, Выборка.Контрагент, Успех);
		Успешно = Успех;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗарегистрироватьКлиентаВПЛCRM(Партнер, Успешно, Активность, ИДПартнера, КодМагазина, Ответ) Экспорт
	
	ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	//КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	Участие = Новый Соответствие();
	
	Если ТипЗнч(Партнер) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		Если ЗначениеЗаполнено(Партнер.ТелефонП) Тогда 
			ДочерниеЗаписи = Партнер.Выбрать();
			Пока ДочерниеЗаписи.Следующий() Цикл
				Если ЗначениеЗаполнено(ДочерниеЗаписи.ТелефонП) Тогда
					Участие.Вставить("phoneNumber",		ДочерниеЗаписи.ТелефонП);
					Прервать;
				ИначеЕсли ЗначениеЗаполнено(ДочерниеЗаписи.Телефон) Тогда
					Участие.Вставить("phoneNumber",		ДочерниеЗаписи.Телефон);
					Прервать;
				Иначе 
					Сообщить("Для регистрации клиента в программе лояльности необходимо заполнить номер телефона"); 
					Возврат ;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	Иначе 
		Если ЗначениеЗаполнено(Партнер.ТелефонП) Тогда 
			Участие.Вставить("phoneNumber",		Партнер.ТелефонП);
		ИначеЕсли ЗначениеЗаполнено(Партнер.Телефон) Тогда
			Участие.Вставить("phoneNumber",		Партнер.Телефон);
		Иначе 
			Сообщить("Для регистрации клиента в программе лояльности необходимо заполнить номер телефона"); 
			Возврат ;
		КонецЕсли;	
	КонецЕсли;
	
	Клиент = Новый Соответствие();
	Если не ЗначениеЗаполнено(ИДПартнера) Тогда 
		ИДПартнера = Партнер.ИДпартн;
	КонецЕсли;
	
	Клиент.Вставить("id",	ИДПартнера);
	
	Участие.Вставить("customer", Клиент);
	
	переменные.Вставить("loyaltyAccount", crm_RetailCRMОбщий.JsonTest(Участие, Новый ЗаписьJSON));
	
	ответ = crm_RetailCRMОбщий.HTTPзапросPOSTАрхив(ИмяСервера ,"/api/v5/loyalty/account/create", переменные);
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		ответ = UnJSONТест(ответ);
		idУчастия = ответ["loyaltyAccount"]["id"];
		idУчастия = Формат(idУчастия,"ЧГ=");
		Активность = ответ["loyaltyAccount"]["active"];
		
		УстановитьСвойстваПЛ(Партнер.Партнер, idУчастия, Активность);
		Успешно = Истина;
		Сообщить("Клиент зарегистрирован в программе лояльности");
	Иначе
		ответ = UnJSONТест(ответ);
		
			Если ответ["errors"]["loyalty"] = "The customer is in this loyalty program already" Тогда 
				Сообщить("Клиент уже зарегистрирован в программе лояльности");
				//получим его id 
				АдресСкрипта = "/api/v5/loyalty/accounts?filter[customerId]=" + ИДПартнера + "&apiKey=" + КлючCRM + "&by=id";
				Ответ1 = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера, АдресСкрипта);
				Ответ1 = UnJSONТест(Ответ1);
				Если Ответ1["success"] = Истина Тогда 
					//получим id участия и активность и запишем в доп сведения
					Для Каждого Участие из Ответ1["loyaltyAccounts"] Цикл 
						Если Строка(Участие["loyalty"]["id"]) = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("idПЛ") Тогда 
							idУчастия = Формат(Участие["id"],"ЧГ=");
							Статус 	  = Участие["status"];
							Активность = Участие["active"];
							
							УстановитьСвойстваПЛ(Партнер.Партнер, idУчастия, Активность);
							Успешно = Истина;
						Иначе 
							Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ответ["errors"] <> Неопределено Тогда  
				Если ответ["errors"].Количество()>0 Тогда 
					Для Каждого ошибка из ответ["errors"] Цикл 
						ТекстОшибки = Ошибка.Значение;
						Сообщить(ТекстОшибки);
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// --- Программа лояльности --- 


Процедура ОбработатьОтветВыгрузкиЗаказа(ответ,док, СтруктураПараметров, ExternalIds);
	
	//ОБРАБОТКА ОШИБКИ
	
	//ответ = UnJSONТест(ответ);
	ВыгрузитьПовторно = Ложь;
	
	Если ответ["errors"] <> Неопределено Тогда 
		Для Каждого стр из ответ["errors"] Цикл 
			ВыклРазделениеСтрок = СтрНайти(стр.Значение, "is already in this order");
			Если ВыклРазделениеСтрок > 0 Тогда 
				//нужно свернуть строки и выгрузить заказ повторно
				ВыгрузитьПовторно = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ответ = Неопределено; 
	
	Если ВыгрузитьПовторно Тогда 
		
		переменные = Новый Соответствие();
		переменные.Вставить("apiKey", СтруктураПараметров.КлючCRM);
		переменные.Вставить("site", СтруктураПараметров.КодМагазина);	
		
		товары = Новый Массив();
		ТЗТовары = док.Товары.Выгрузить();
		ТЗТовары.Свернуть("Номенклатура, Характеристика, Цена, ВидЦены, Отменено", "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, crm_СкидкаПЛ");
		
		Для каждого стр из ТЗТовары Цикл
			
			Если стр.Номенклатура = СтруктураПараметров.НоменклатураДоставки Тогда
				Доставка = Новый Соответствие();
				СтоимостьДоставки = стр.Количество * стр.Цена;
				Продолжить;
			КонецЕсли;
			
			товар = Новый Соответствие();
			
			//++ Работа с характеристиками
			Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
				
				xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
				xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
				xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
				
				Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
					xmlIdТовара = СокрЛП(" " + Док.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
				КонецЕсли;
				
			Иначе 
				
				//Идентификатор товара
				Если СтруктураПараметров.ИдентифТовара = "Код" Тогда
					xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
				ИначеЕсли СтруктураПараметров.ИдентифТовара = "Артикул" Тогда
					xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
				ИначеЕсли СтруктураПараметров.ИдентифТовара = "GUID" Тогда
					xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
				КонецЕсли;
			КонецЕсли;
			//-- Работа с характеристиками
			
			оффер = Новый Соответствие();
			оффер.Вставить(СтруктураПараметров.offers_id,		xmlIdТовара);
			товар.Вставить("offer",			оффер);		
			
			Если ExternalIds = Ложь Тогда
				
				товар.Вставить("productName",	стр.Номенклатура.Наименование);
				товар.Вставить("initialPrice",	стр.Цена);
				товар.Вставить("quantity",		стр.Количество);
				
				Если ЗначениеЗаполнено(стр.ВидЦены) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
					
					ТипЦены = Новый Соответствие();
					ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
					Если ТипыЦен <> Неопределено Тогда
						КодТипаЦены = ТипыЦен.Найти(стр.ВидЦены, "ТипЦены");
						Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
							ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
							товар.Вставить("priceType", ТипЦены);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//передача признака отмены строки
				Если стр.Отменено = Истина или СтруктураПараметров.Отменить = Истина Тогда 
					Статус = "failure";
					товар.Вставить("status", Статус);
				КонецЕсли;
				
				РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
				АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
				ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
				//при ПЛ
				Если стр.crm_СкидкаПЛ > 0 Тогда 
					СкидкаПЛ = стр.crm_СкидкаПЛ;
					ОбщаяСкидка = (стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки - СкидкаПЛ)/стр.Количество;
				КонецЕсли;
				//при ПЛ
				товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
				товар.Вставить("discountManualPercent", 0);	
				
			КонецЕсли;
			
			товары.Добавить(товар);
			
		КонецЦикла;
		//КонецЕсли;
		
		заказ = Новый Соответствие();
		
		заказ.Вставить("items", товары);
		
		Если ExternalIds = Ложь Тогда 
			
			заказ.Вставить("customerComment", СокрЛП(Док.Комментарий));
			заказ.Вставить("managerComment",  "");	
			заказ.Вставить("discountManualPercent", 0);
			заказ.Вставить("discountManualAmount", 0);
			
			Если СтруктураПараметров.Доставка <> Неопределено Тогда 
				заказ.Вставить("delivery", СтруктураПараметров.Доставка);
			КонецЕсли;
			
			ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
			Эталонная = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная");
			//статус заказа
			СтатусЗаказа = "";
			
			Если Не Эталонная Тогда
				Если СтатусЗаказа =	"new" Тогда  
					Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
						заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
					КонецЕсли;
				ИначеЕсли СтатусЗаказа = "assembling" Тогда
					Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
						заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			заказ.Вставить("status",	СтатусЗаказа); 
			
			ПользПоля = Новый Соответствие();    
			ПользПоля.Вставить("nomer1c",Строка((Док.Номер)));
			ПользПоля.Вставить("update_api1c",ТекущаяДата());
			заказ.Вставить("customFields", ПользПоля);  
			
		КонецЕсли;
		
		заказ.Вставить("discountManualPercent", 0);
		заказ.Вставить("discountManualAmount", 0);
	
		переменные.Вставить("by",	 "id");	
		переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
		
		ответ = HTTPзапросPOSTАрхив(СтруктураПараметров.ИмяСервера 	,"/api/v5/orders/" + СтруктураПараметров.НомерЗаказа + "/edit", переменные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветВыгрузкиРеализации(ответ,док, СтруктураПараметров);
	
	//ОБРАБОТКА ОШИБКИ
	
	ответ = UnJSONТест(ответ);
	ВыгрузитьПовторно = Ложь;
	
	Если ответ["errors"] <> Неопределено Тогда 
		Для Каждого стр из ответ["errors"] Цикл 
			ВыклРазделениеСтрок = СтрНайти(стр.Значение, "is already in this order");
			Если ВыклРазделениеСтрок > 0 Тогда 
				//нужно свернуть строки и выгрузить заказ повторно
				ВыгрузитьПовторно = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыгрузитьПовторно Тогда 
		
		переменные = Новый Соответствие();
		переменные.Вставить("apiKey", СтруктураПараметров.КлючCRM);
		переменные.Вставить("site", СтруктураПараметров.КодМагазина);	
		
		товары = Новый Массив();
		ТЗТовары = док.Товары.Выгрузить();
		ТЗТовары.Свернуть("Номенклатура, Характеристика", "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, crm_СкидкаПЛ");
		
		Для каждого стр из ТЗТовары Цикл
			
			Если стр.Номенклатура = СтруктураПараметров.НоменклатураДоставки Тогда
				Доставка = Новый Соответствие();
				СтоимостьДоставки = стр.Количество * стр.Цена;
				Продолжить;
			КонецЕсли;
			
			товар = Новый Соответствие();
			
			//++ Работа с характеристиками
			Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
				
				xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
				xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
				xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
				
				Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
					xmlIdТовара = СокрЛП(" " + Док.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
				КонецЕсли;
				
			Иначе 
				
				//Идентификатор товара
				Если СтруктураПараметров.ИдентифТовара = "Код" Тогда
					xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
				ИначеЕсли СтруктураПараметров.ИдентифТовара = "Артикул" Тогда
					xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
				ИначеЕсли СтруктураПараметров.ИдентифТовара = "GUID" Тогда
					xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
				КонецЕсли;
			КонецЕсли;
			//-- Работа с характеристиками
			
			оффер = Новый Соответствие();
			оффер.Вставить(СтруктураПараметров.offers_id,		xmlIdТовара);
			товар.Вставить("offer",			оффер);		
			
			товар.Вставить("productName",	стр.Номенклатура.Наименование);
			товар.Вставить("quantity",		стр.Количество);
			
			товар.Вставить("status",  "confirming");
			товар.Вставить("comment", "Товар разбит в 1С на несколько строк, необходимо включить соответствующую настройку в RetailCRM");
			
			РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
			АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
			ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
			//при ПЛ
			Если стр.crm_СкидкаПЛ > 0 Тогда 
				СкидкаПЛ = стр.crm_СкидкаПЛ;
				ОбщаяСкидка = (стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки - СкидкаПЛ)/стр.Количество;
			КонецЕсли;
			//при ПЛ
			товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
			товар.Вставить("discountManualPercent", 0);	
			
			товары.Добавить(товар);
			
		КонецЦикла;
	КонецЕсли;
	
	заказ = Новый Соответствие();
	
	заказ.Вставить("items", товары);
	
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	Эталонная = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная");
	//статус заказа
	СтатусЗаказа = "";
	
	Если Не Эталонная Тогда
		Если СтатусЗаказа =	"new" Тогда  
			Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
				заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
			КонецЕсли;
		ИначеЕсли СтатусЗаказа = "assembling" Тогда
			Если Док.ДатаОтгрузки <> Неопределено или Док.ДатаОтгрузки <> "" или Док.ДатаОтгрузки <> Дата(1,1,1) Тогда 
				заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки,"ДФ=yyyy-MM-dd"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	заказ.Вставить("status",	СтатусЗаказа); 
	
	ПользПоля = Новый Соответствие();    
	ПользПоля.Вставить("update_api1c",ТекущаяДата());
	заказ.Вставить("customFields", ПользПоля);  
	
	переменные.Вставить("by",	 "id");	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	ответ = HTTPзапросPOSTАрхив(СтруктураПараметров.ИмяСервера 	,"/api/v5/orders/" + СтруктураПараметров.НомерЗаказа + "/edit", переменные);
	
КонецПроцедуры

&НаСервере
Процедура ПрописатьИДТоваровИзCRM(Док, ИДЗаказа, ответ)
	
	ДокОбъект = Док.ПолучитьОбъект();
	
	Если СокрЛП(ИДЗаказа) = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТЗТоваров = Новый ТаблицаЗначений;
	ТЗТоваров.Колонки.Добавить("ИДСтроки");
	ТЗТоваров.Колонки.Добавить("xmlId");
	ТЗТоваров.Колонки.Добавить("externalId");
	ТЗТоваров.Колонки.Добавить("Количество");
	ТЗТоваров.Колонки.Добавить("Цена");
	ТЗТоваров.Колонки.Добавить("ИдентификаторСтроки1С");
	
	
	Для Каждого Товар из ответ["order"]["items"] Цикл 
		
		СтрокаТз = ТЗТоваров.Добавить();		
		//
		Если Товар["externalIds"] <> Неопределено Тогда
			Идентификаторы = Новый Соответствие();
			Для Каждого идентиф из Товар["externalIds"] Цикл 
				Если идентиф["code"] = "1C" Тогда 
					Идентификаторы.Вставить("код",	идентиф["code"]);
					Идентификаторы.Вставить("ИдентифСтроки",	идентиф["value"]);
					СтрокаТз.ИдентификаторСтроки1С 	= идентиф["value"];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТз.ИДСтроки 		= Формат(Товар["id"], "ЧГ=0");
		СтрокаТз.xmlId 			= Товар["offer"]["xmlId"];
		СтрокаТз.externalId 	= Товар["offer"]["externalId"];
		СтрокаТз.Количество 	= Товар["quantity"];
		//
	КонецЦикла;
	
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	
	ИспользованиеХарактеристик = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик");
	GUIDОрганизации = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации");
	
	Для Каждого стр из ДокОбъект.Товары Цикл
		
		Если ИспользованиеХарактеристик = Истина Тогда
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			Если  GUIDОрганизации = Истина Тогда
				xmlIdТовара = СокрЛП(" " + ДокОбъект.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
		Иначе 
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(стр.crm_idПозиции) Тогда 
			
			НайденСтр = ТЗТоваров.НайтиСтроки(Новый Структура("xmlId", xmlIdТовара));
			Если НайденСтр <> Неопределено и НайденСтр.Количество()<>0 Тогда
				Если НайденСтр.Количество() > 0 Тогда 
					//ищем по идентификатору
					НайденСтрока = ТЗТоваров.Найти(стр.ИдентификаторСтроки, "ИдентификаторСтроки1С");
					Если НайденСтрока <> Неопределено Тогда
						стр.crm_idПозиции = НайденСтрока.ИДСтроки;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Если ДокОбъект.Модифицированность() Тогда
		ДокОбъект.Записать();
	КонецЕсли;
	
КОнецПроцедуры

Процедура ВыгрузитьБрониВCRM(док);
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	НоменклатураДоставки = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
	Склады = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
	
	Если ТипЗнч(док) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		докОб = Док.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого стр из докОб.Товары Цикл
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Склад) Тогда 
			Склад = стр.Склад;
		Иначе 
			Склад = докОб.Склад;
		КонецЕсли;	
		
		Если Склады <> Неопределено Тогда 
			СтрСклада = Склады.Найти(Склад, "Склад");
			Если СтрСклада <> Неопределено и СтрСклада <> "" Тогда 
				КодСклада = СтрСклада.КодCRM;
			КонецЕсли;
		Иначе 
			Сообщить("Брони не выгружены в RetailCRM. Заполните соответствие складов на вкладке ""Склады""");
			Возврат;
		КонецЕсли;
		
		Пак = Новый Соответствие();
		Пак.Вставить("quantity",		стр.Количество);
		Пак.Вставить("store",			КодСклада);
		Пак.Вставить("itemId",			стр.crm_idПозиции);
		
		переменные = Новый Соответствие();
		
		//если нет id брони значит по любому ее нет в crm
		Если не ЗначениеЗаполнено(стр.crm_IDпака) Тогда 
			Если стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада и стр.Отменено = Ложь Тогда 
				
				переменные.Вставить("pack",	JsonTest(Пак, Новый ЗаписьJSON));
				
				ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/packs/create?apiKey=" + КлючCRM, Переменные);
				
				ответ = UnJSONТест(ответ);
				
				Если ответ["success"] = Истина Тогда
					стр.crm_IDпака = Формат(ответ["id"],"ЧГ=");	
					стр.crm_Склад  = Склад;	
					стр.crm_КоличествоБронь = стр.Количество;
					Сообщить("Бронь по товару " + стр.Номенклатура + " выгружена в RetailCRM");	
				ИначеЕсли Найти(Ответ, "Too few available offers") > 0 Тогда
					Сообщить("В CRM не хватает товара.");
				Иначе 
					Сообщить("Ошибка при выгрузке брони");	
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если стр.crm_КоличествоБронь <> стр.Количество и стр.crm_Склад  = стр.Склад Тогда 
				
				IDпака 	= СокрЛП(Формат(стр.crm_IDпака, "ЧГ=0"));
				
				переменные.Вставить("apiKey", КлючCRM);
				переменные.Вставить("by",	 "id");	
				переменные.Вставить("pack",	JsonTest(Пак, Новый ЗаписьJSON));
				
				ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/packs/" + IDпака + "/edit", Переменные);
				
				ответ = UnJSONТест(ответ);
				
				Если ответ["success"] = Истина Тогда
					Сообщить("Бронь по товару " + стр.Номенклатура + " выгружена в RetailCRM");
				Иначе 
					Сообщить("Ошибка при редактировании брони"); 
				КонецЕсли;
			ИначеЕсли стр.crm_Склад  <> стр.Склад и стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
				
				//удаляем пак 
				Переменные = Новый Соответствие;
				Переменные.Вставить("apiKey",	КлючCRM);
				
				IDпака 	= СокрЛП(Формат(стр.crm_IDпака, "ЧГ=0"));
				ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/packs/" + IDпака + "/delete", Переменные);
				
				ответ = UnJSONТест(ответ);
				Если ответ["success"] = Истина Тогда
					Сообщить("Бронь по товару " + стр.Номенклатура + " удалена в RetailCRM");
					стр.crm_IDпака = 0;	
					стр.crm_Склад  = Справочники.Склады.ПустаяСсылка();	
					стр.crm_КоличествоБронь = 0;
				Иначе 
					Сообщить("Ошибка при удалении брони");
					Если ответ["errorMsg"] = "Pack not found" Тогда 
						стр.crm_IDпака = 0;	
						стр.crm_Склад  = Справочники.Склады.ПустаяСсылка();	
						стр.crm_КоличествоБронь = 0;	
					КонецЕсли;
				КонецЕсли;
	
				//делаем новый
				переменные.Вставить("pack",	JsonTest(Пак, Новый ЗаписьJSON));
				
				ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/packs/create?apiKey=" + КлючCRM, Переменные);
				
				ответ = UnJSONТест(ответ);
				
				Если ответ["success"] = Истина Тогда
					стр.crm_IDпака = Формат(ответ["id"],"ЧГ=");	
					стр.crm_Склад  = Склад;	
					стр.crm_КоличествоБронь = стр.Количество;
					Сообщить("Бронь по товару " + стр.Номенклатура + " выгружена в RetailCRM");	
				ИначеЕсли Найти(Ответ, "Too few available offers") > 0 Тогда
					Сообщить("В CRM не хватает товара.");
				Иначе 
					Сообщить("Ошибка при выгрузке брони");	
				КонецЕсли;
			ИначеЕсли стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению или стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда 
				
				Переменные = Новый Соответствие;
				Переменные.Вставить("apiKey",	КлючCRM);
				
				IDпака 	= СокрЛП(Формат(стр.crm_IDпака, "ЧГ=0"));
				ответ = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/packs/" + IDпака + "/delete", Переменные);
				
				ответ = UnJSONТест(ответ);
				
				Если ответ["success"] = Истина Тогда
					Сообщить("Бронь по товару " + стр.Номенклатура + " удалена в RetailCRM");
					стр.crm_IDпака = 0;	
					стр.crm_Склад  = Справочники.Склады.ПустаяСсылка();	
					стр.crm_КоличествоБронь = 0;
				Иначе 
					Сообщить("Ошибка при удалении брони");
					Если ответ["errorMsg"] = "Pack not found" Тогда 
						стр.crm_IDпака = 0;	
						стр.crm_Склад  = Справочники.Склады.ПустаяСсылка();	
						стр.crm_КоличествоБронь = 0;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если докОб.Модифицированность() Тогда
		докОб.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПриведениеТелНомераСтандарт(тНомер) Экспорт 
	
	резНомер = "";
	Для ин=1 по стрДлина(тНомер) Цикл
		Символ = Сред(тНомер,ин,1);	
		Если (КодСимвола(Символ) >= 48) и (КодСимвола(Символ)<=57) Тогда
			резНомер = резНомер + Символ;
		КонецЕсли;
	КонецЦикла;
	Если КодСимвола(Лев(резНомер,1))=57 и стрДлина(резНомер)=10 Тогда // Номер начинается с 9-ки
		резНомер = "8" + резНомер;
	КонецЕсли;	
	Если стрДлина(резНомер)=10 Тогда // Номер содержит 10 цифр
		резНомер = "8" + резНомер;
	КонецЕсли;	
	Если КодСимвола(Лев(резНомер,1))=55 Тогда // Номер начинается с 7-ки
		резНомер = "8" + Прав(резНомер,стрДлина(резНомер)-1);
	КонецЕсли;
	Если стрДлина(резНомер)<>11 Тогда
		возврат "";
	КонецЕсли;
	
	возврат резНомер;
	
КонецФункции

Функция СоздатьКлиента1С (Структура) Экспорт 
	
	//партнер
	Партнер = Справочники.Партнеры.СоздатьЭлемент();
	Партнер.Клиент = Истина;
	Если ЗначениеЗаполнено(Структура.ДатаСоздания) Тогда 
		Партнер.ДатаРегистрации = Структура.ДатаСоздания;
	Иначе 
		Партнер.ДатаРегистрации = ТекущаяДата();
	КонецЕсли;
		
	имяКлиента = СокрЛП(Структура.Фамилия + " " +  Структура.Имя + " " + Структура.Отчество);
	
	Партнер.Наименование = имяКлиента;
	Партнер.НаименованиеПолное = имяКлиента;
	Партнер.ЮрФизЛицо = перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Если Структура.Пол = "М" Тогда 
		Партнер.Пол = Перечисления.ПолФизическогоЛица.Мужской;	
	ИначеЕсли Структура.Пол = "Ж" Тогда 
		Партнер.Пол = Перечисления.ПолФизическогоЛица.Женский;
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ДатаРождения) Тогда 
		Партнер.ДатаРождения = Структура.ДатаРождения;
	КонецЕсли;
	Партнер.ГруппаДоступа = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ГруппаДоступаПартнеров");
	Партнер.Комментарий = "Клиент создан автоматически модулем RetailCRM из РМК";
	
	//контрагент
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();

	Контрагент.ЮрФизЛицо = перечисления.ЮрФизЛицо.ФизЛицо;
	Контрагент.Наименование = имяКлиента;
	Контрагент.НаименованиеПолное = имяКлиента;
	Контрагент.ДополнительнаяИнформация = "Клиент создан автоматически модулем RetailCRM из РМК";
	Контрагент.Записать();
	
	// Телефон 
	тНомер = Структура.Телефон;
	Если тНомер <> "" Тогда
		КонтИнф = Контрагент.КонтактнаяИнформация;
		СтрТелефон = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,"Вид");
		Если СтрТелефон <> Неопределено Тогда 
			СтрТелефон.Представление = тНомер;
			СтрТелефон.НомерТелефона = тНомер;
		Иначе
			НовыйТелефон = Контрагент.КонтактнаяИнформация.Добавить();
			НовыйТелефон.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон;
			НовыйТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НовыйТелефон.НомерТелефона = тНомер;   					
			НовыйТелефон.Представление = тНомер;
		КонецЕсли;
		
		КонтИнф = Партнер.КонтактнаяИнформация;
		СтрТелефон = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,"Вид");
		Если СтрТелефон <> Неопределено Тогда 
			СтрТелефон.Представление = тНомер;
			СтрТелефон.НомерТелефона = тНомер;
		Иначе
			НовыйТелефон = Партнер.КонтактнаяИнформация.Добавить();
			НовыйТелефон.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон;
			НовыйТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			НовыйТелефон.НомерТелефона = тНомер;   					
			НовыйТелефон.Представление = тНомер;
		КонецЕсли;
	КонецЕсли;
	
	// Почта
	Почта = Структура.Почта;
	Если Почта <> "" Тогда
		КонтИнф = Контрагент.КонтактнаяИнформация;
		СтрПочта = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,"Вид");
		Если СтрПочта <> Неопределено Тогда 
			СтрПочта.Представление = Почта;
			СтрПочта.АдресЭП = Почта;
		Иначе
			НоваяПочта = Контрагент.КонтактнаяИнформация.Добавить();
			НоваяПочта.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяПочта.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			НоваяПочта.АдресЭП = Почта;   					
			НоваяПочта.Представление = Почта;
		КонецЕсли;
		
		КонтИнф = Партнер.КонтактнаяИнформация;
		СтрПочта = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.EmailПартнера,"Вид");
		Если СтрПочта <> Неопределено Тогда 
			СтрПочта.Представление = Почта;
			СтрПочта.АдресЭП = Почта;
		Иначе
			НоваяПочта = Партнер.КонтактнаяИнформация.Добавить();
			НоваяПочта.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяПочта.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			НоваяПочта.АдресЭП = Почта;   					
			НоваяПочта.Представление = Почта;
		КонецЕсли;
	КонецЕсли;
	
	Партнер.Записать(); 
	
	//запись id партнера
	Если ЗначениеЗаполнено(Структура.IDКлиента) Тогда 
		СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
		crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Партнер.Ссылка, СвойствоПартнеров, Структура.IDКлиента);  
		// 

		//запись id контрагента
		СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
		crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Контрагент.Ссылка, СвойствоКонтрагентов, Структура.IDКлиента);  
	КонецЕсли;
	//

	Контрагент.Партнер = Партнер.Ссылка;
	Контрагент.Записать();

	КлиентПартнер = Новый Соответствие;
	КлиентПартнер.Вставить("Клиент",Контрагент.Ссылка);
	КлиентПартнер.Вставить("Партнер",Партнер.Ссылка);
	
	Возврат КлиентПартнер;
	
КонецФункции

Функция РассчитатьСкидкуПоПЛ(ДанныеПЛ, Магазин, Товары, БонусовКСписанию) Экспорт 
	
	Структура = Новый Структура;
	переменные = Новый Соответствие();
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	КодМагазина = Магазин;
	
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	заказ = Новый Соответствие();
	МассивТоваров = Новый Массив();
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;  
	//

	//тип цены
	ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
	Если ТипыЦен <> Неопределено Тогда 
		КодТипаЦены = ТипыЦен.Найти(ДанныеПЛ.ВидЦены, "ТипЦены");
		Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
			КодТипаЦены1 = КодТипаЦены.КодCRM;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого стр Из Товары Цикл 
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0); 
		
		//товар.Вставить("discountManualAmount",		стр.СуммаРучнойСкидки);
		//товар.Вставить("discountManualPercent",		стр.СуммаАвтоматическойСкидки);
		
		Если ЗначениеЗаполнено(КодТипаЦены1) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			ТипЦены = Новый Соответствие();
			ТипЦены.Вставить("code", КодТипаЦены1);
			товар.Вставить("priceType", ТипЦены);
		КонецЕсли;
		
		МассивТоваров.Добавить(товар);
		
	КонецЦикла;
	заказ.Вставить("items", МассивТоваров);
	
	
	ДанныеКлиента = Новый Соответствие;
	ДанныеКлиента.Вставить("id", 	Формат(Число(ДанныеПЛ.IDКлиента),"ЧГ=0"));
	
	заказ.Вставить("customer", 		ДанныеКлиента);
	
	Если БонусовКСписанию <> Неопределено Тогда 
		переменные.Вставить("bonuses", Формат(Число(БонусовКСписанию),"ЧГ=0"));
	КонецЕсли;
	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	ответ = HTTPзапросPOST(ИмяСервера,"/api/v5/loyalty/calculate", переменные);
	ответ = UnJSON(ответ);
	
	Если ответ["success"] = Истина Тогда
		
		Для Каждого СкидкаПл из ответ["calculations"] Цикл 
			Если СкидкаПл["maximum"] = Истина Тогда 
				Структура.Вставить("БонусыДляСписания", СкидкаПл["maxChargeBonuses"]);
				//Структура.Вставить("id", 	СкидкаПл["loyaltyEventDiscount"]["id"]);
				Структура.Вставить("КНачислению",  СкидкаПл["creditBonuses"]);
				Структура.Вставить("Привилегия",  СкидкаПл["privilegeType"]);
				Структура.Вставить("ДенежнаяСкидка", СкидкаПл["discount"]);
				IDСкидкиПоСобытию = ?(СкидкаПл["privilegeType"] = "loyalty_event", СкидкаПл["loyaltyEventDiscount"]["id"], ""); 
				Структура.Вставить("IDСкидкиПоСобытию", IDСкидкиПоСобытию);
			Иначе 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Структура.Вставить("НачисленоБонусов", Ответ["order"]["bonusesCreditTotal"]);
		Структура.Вставить("СписаноБонусов", Ответ["order"]["bonusesChargeTotal"]);
		Структура.Вставить("ТипПривилегии", Ответ["order"]["privilegeType"]);
		Структура.Вставить("ВсегоБонусов", ответ["order"]["loyaltyAccount"]["amount"]);
		
		МассивТ = Новый Массив;

		Для Каждого стрТовар из Ответ["order"]["items"] Цикл
			МассивТоваров = Новый Соответствие;
			МассивТоваров.Вставить("КоличествоСписанныхБонусов", стрТовар["bonusesChargeTotal"]);
			МассивТоваров.Вставить("КоличествоНачисленныхБонусов", стрТовар["bonusesCreditTotal"]);
			МассивТоваров.Вставить(offers_id, стрТовар["offer"][offers_id]);
			МассивТ.Добавить(МассивТоваров);
		КонецЦикла;
		
		Структура.Вставить("Товары", МассивТ);
	КонецЕсли;
	
	Возврат Структура;
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
	//	ЧекОб = Объект.Ссылка.ПОлучитьОбъект();
	//	ЧекОб.crm_idКлиента = Число(ДанныеПЛ.IDКлиента);
	//	//ЧекОб.Записать();
	//КонецЕсли;	
	//Возврат Ответ;
	
КонецФункции

Процедура ВыгрузитьЧекВCRM(док, Отменить = Ложь, ДанныеПЛ = Неопределено, Действие, ДанныеЧека, ИДЗаказа, ФИО) Экспорт
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьЧек") = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	Если Действие <> "ВыгрузитьНовыйЧек" Тогда
		Если док.Архивный = Истина Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Действие <> "ВыгрузитьНовыйЧек" Тогда

		//чеки розничных покупателей выгружать только при соответствующей настройке
		Если док.Партнер = Справочники.Партнеры.РозничныйПокупатель или док.Партнер.Наименование = "Розничный покупатель" Тогда 
			Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьЧекРП") = Ложь Тогда 
				Возврат;
			КонецЕсли;
		Иначе 
			//получим id партнера
			СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
			ИДПартнера 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(док.Партнер, СвойствоПартнеров);
		КонецЕсли;
	
		//проверяем возврат по чеку, если он был, то не выгружаем чек
		//отмена заказа
		ЧекВозврат = ВернутьЧекВозврат(док.Ссылка);
		Если ЗначениеЗаполнено(ЧекВозврат) Тогда 
			Сообщить("По этому чеку был возврат! Выгрузка чека невозможна!");
			Возврат;
		КонецЕсли;
		//
	Иначе 
		ИДПартнера = ДанныеЧека.IDКлиента;	
	КонецЕсли;
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	
	Если Действие = "ВыгрузитьНовыйЧек" Тогда
		КодМагазина = ДанныеЧека.Магазин;
	Иначе 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СвязьМагазина") = "Склад1С" Тогда 
			МагазинСклад = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("МагазинСклад");
			СоответствиеМагазинСклад = МагазинСклад.Найти(док.Склад, "Склад"); 
			Если СоответствиеМагазинСклад <> Неопределено Тогда
				КодМагазина = СоответствиеМагазинСклад.КодМагазина;					
			КонецЕсли;	
		Иначе
			МагазинОрганизация = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("МагазинОрганизация");
			СоответствиеМагазинОрганизация = МагазинОрганизация.Найти(док.Организация, "Организация"); 
			Если СоответствиеМагазинОрганизация <> Неопределено Тогда
				КодМагазина = СоответствиеМагазинОрганизация.КодМагазина;					
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	переменные.Вставить("site", КодМагазина);	

	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если Действие <> "ВыгрузитьНовыйЧек" Тогда
		НомерЧека 	= СокрЛП(Формат(док.crm_idЧека, "ЧГ=0"));
	Иначе 
		НомерЧека 	= СокрЛП(Формат(ИДЗаказа, "ЧГ=0"));
	КонецЕсли;
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	
	//тип цены
	ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
	Если ТипыЦен <> Неопределено Тогда
		Если Действие = "ВыгрузитьНовыйЧек" Тогда
			КодТипаЦены = ТипыЦен.Найти(ДанныеЧека.ВидЦены, "ТипЦены");
		ИначеЕсли Действие = "ВыгрузитьЧекБезПЛ" или Действие = "ВыгрузитьЧекСПЛ" Тогда 
			КодТипаЦены = ТипыЦен.Найти(док.ВидЦены, "ТипЦены");
		КонецЕсли;
	КонецЕсли;
	
	Если КодТипаЦены <> Неопределено и КодТипаЦены <> "" Тогда 
		КодТипаЦены1 = КодТипаЦены.КодCRM;
	КонецЕсли;
		
	товары = Новый Массив();
	
	Если Действие <> "ВыгрузитьНовыйЧек" Тогда
		ТЧТовары =  Док["Товары"];
	Иначе
		ТЧТовары =  ДанныеЧека.Товары;
	КонецЕсли;
	
	Для каждого стр из ТЧТовары Цикл
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + Док.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);		
		товар.Вставить("productName",	стр.Номенклатура.Наименование);
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
			
		Если ЗначениеЗаполнено(КодТипаЦены1) и crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
			ТипЦены = Новый Соответствие();
			ТипЦены.Вставить("code", КодТипаЦены1);
			товар.Вставить("priceType", ТипЦены);
		КонецЕсли;

		товар.Вставить("status", "new");
		
		РучнаяСкидка = стр.СуммаРучнойСкидки/стр.Количество;
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки/стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		товар.Вставить("discountManualPercent", 0);       
		
		Если ЗначениеЗаполнено(стр.ИдентификаторСтроки) Тогда 
			ИдентификаторыПозиции = Новый Массив();
			ИдентифПоз = Новый Соответствие();
			ИдентифПоз.Вставить("code",		"1C");		
			ИдентифПоз.Вставить("value",	стр.ИдентификаторСтроки);
			ИдентификаторыПозиции.Добавить(ИдентифПоз);
			
			товар.Вставить("externalIds",			ИдентификаторыПозиции);
		КонецЕсли;
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ = Новый Соответствие();
	
	Телефон = "";
	
	Если Действие = "ВыгрузитьНовыйЧек" Тогда
		
		Если ЗначениеЗаполнено(ФИО) Тогда 
			Фамилия  = ВыделитьСлово(ФИО,1);
			Имя      = ВыделитьСлово(ФИО,2);
			Отчество = ВыделитьСлово(ФИО,3);
			заказ.Вставить("lastName", 	 СокрЛП(Фамилия));
			заказ.Вставить("firstName",  СокрЛП(Имя));
			заказ.Вставить("patronymic", СокрЛП(Отчество));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЧека.НомерТелефона) Тогда 
			Телефон = ДанныеЧека.НомерТелефона;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЧека.Почта) Тогда 
			Почта = ДанныеЧека.Почта;
		КонецЕсли;
		
		ДанныеКлиента = Новый Соответствие;
		ДанныеКлиента.Вставить("id", 	Формат(Число(ИДПартнера),"ЧГ=0"));	
	Иначе 
		
		Если ЗначениеЗаполнено(ИДПартнера) Тогда
			
			ФИО = ?(ЗначениеЗаполнено(док.Партнер.Наименование),СокрЛП(док.Партнер.Наименование), "");
			Фамилия  = ВыделитьСлово(ФИО,1);
			Имя      = ВыделитьСлово(ФИО,2);
			Отчество = ВыделитьСлово(ФИО,3);
			
			заказ.Вставить("lastName", 	 СокрЛП(Фамилия));
			заказ.Вставить("firstName",  СокрЛП(Имя));
			заказ.Вставить("patronymic", СокрЛП(Отчество));
			
			Если ЗначениеЗаполнено(док.crm_Телефон) Тогда 
				Телефон = док.crm_Телефон;	
			КонецЕсли;
			
			ДанныеКлиента = Новый Соответствие;
			ДанныеКлиента.Вставить("id", 	Формат(Число(ИДПартнера),"ЧГ=0"));
			
		Иначе 
			
			заказ.Вставить("lastName", 	 "");
			заказ.Вставить("firstName",  "Розничный покупатель");
			заказ.Вставить("patronymic", "");
			
		КонецЕсли;	
	КонецЕсли;
	
	заказ.Вставить("customer", 		  ДанныеКлиента);
	
	Если Действие <> "ВыгрузитьЧекСПЛ" Тогда 
		заказ.Вставить("items", 		  товары); 
	КонецЕсли;
	
	Если Действие = "ВыгрузитьНовыйЧек" Тогда
		заказ.Вставить("createdAt",		  ДатаВремяДляCRM(ТекущаяДата()));
	Иначе
		заказ.Вставить("createdAt",		  ДатаВремяДляCRM(док.Дата));
	КонецЕсли;
	
	заказ.Вставить("managerComment",  "Заказ выгружен из РМК 1С");	
	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	Если ЗначениеЗаполнено(Телефон) Тогда 	
		Если КодСимвола(Лев(Телефон,1))=57 и стрДлина(Телефон)=10 Тогда // Номер начинается с 9-ки
			Телефон = "8" + Телефон;
		КонецЕсли;
		заказ.Вставить("phone", Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Почта) Тогда 	
		заказ.Вставить("email", Почта);
	КонецЕсли;
	
	Если Действие = "ВыгрузитьЧекБезПЛ" или Действие = "ВыгрузитьЧекСПЛ" Тогда 
		заказ.Вставить("status",	"complete");
		заказ.Вставить("shipped",	true);
		заказ.Вставить("shipmentDate", Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
	Иначе
		заказ.Вставить("status",		  "new");
		Если ЗначениеЗаполнено(ДанныеПЛ.ТипПривилегии) Тогда 
			заказ.Вставить("privilegeType",			ДанныеПЛ.ТипПривилегии);
			Если ДанныеПЛ.ТипПривилегии = "loyalty_event" Тогда 
				заказ.Вставить("loyaltyEventDiscountId",	Формат(Число(ДанныеПЛ.IDСкидкиПоСобытию),"ЧГ=0"));	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Действие <> "ВыгрузитьНовыйЧек" Тогда
		ПользПоля = Новый Соответствие();    
		ПользПоля.Вставить("check_number1c",Строка(Док.Номер));
		
		//склад
		Если ЗначениеЗаполнено(док.Склад) Тогда 
			Склады = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
			НайдСтр = Склады.Найти(док.Склад, "Склад");
			Если ЗначениеЗаполнено(НайдСтр) Тогда 
				заказ.Вставить("shipmentStore", НайдСтр.КодCRM);
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		//склад
		Если ЗначениеЗаполнено(ДанныеЧека.КассаККМ) Тогда 
			Склады = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
			НайдСтр = Склады.Найти(ДанныеЧека.КассаККМ.Склад, "Склад");
			Если ЗначениеЗаполнено(НайдСтр) Тогда 
				заказ.Вставить("shipmentStore", НайдСтр.КодCRM);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	заказ.Вставить("customFields", ПользПоля);  
	заказ.Вставить("orderType",				"offline");    
	заказ.Вставить("orderMethod",			"offline");
	
	//Передача оплат по заказу
	Если Действие = "ВыгрузитьЧекБезПЛ" Тогда
		
		СписокФормОплаты	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеФормОплаты");
		Оплаты = Новый Массив();
		
		Если Док.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда 
			Платеж = Новый Соответствие();
			Платеж.Вставить("amount",		Формат(Док.СуммаДокумента,"ЧРД=.; ЧГ=0"));
			
			ФормыОплаты		= СписокФормОплаты.Найти(Док.ФормаОплаты,"ФормаОплаты");
			Если ФормыОплаты <> Неопределено Тогда
				КодТипаОплаты = ФормыОплаты.КодCRM;                                         
			КонецЕсли; 
			Платеж.Вставить("type",			КодТипаОплаты);
			Платеж.Вставить("status",		"paid");
			Оплаты.Добавить(Платеж);
			                                                                               
		ИначеЕсли Док.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			Для Каждого Опл из Док.ОплатаПлатежнымиКартами Цикл 
				Платеж = Новый Соответствие();
				Платеж.Вставить("amount",		Формат(Опл.Сумма,"ЧРД=.; ЧГ=0"));
				
				ФормыОплаты		= СписокФормОплаты.Найти(Док.ФормаОплаты,"ФормаОплаты");
				Если ФормыОплаты <> Неопределено Тогда
					КодТипаОплаты = ФормыОплаты.КодCRM;                                         
				КонецЕсли; 
				Платеж.Вставить("type",			КодТипаОплаты);
				Платеж.Вставить("status",		"paid");
				Оплаты.Добавить(Платеж);
			КонецЦикла;
		КонецЕсли;
		
		заказ.Вставить("payments",		Оплаты);
	КонецЕсли;
	
	Если Действие = "ВыгрузитьЧекСПЛ" или (Действие = "ВыгрузитьНовыйЧек" и ЗначениеЗаполнено(НомерЧека)) Тогда 
		переменные.Вставить("by",	 "id");	
		переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
		ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/" + НомерЧека + "/edit", переменные);
	Иначе 
		переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
		ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/create", переменные);
	КонецЕсли;
	
	ответ = UnJSONТест(ответ);
	
	Если ответ["success"] = Истина Тогда
		Сообщить("Чек успешно выгружен в retailCRM");
		ИДЗаказа = 0;
		ИДЗаказа = Формат(ответ["id"],"ЧГ=");

		// Записать ИД заказа
		Если ЗначениеЗаполнено(ИДЗаказа) Тогда 
			Если Действие = "ВыгрузитьЧекБезПЛ" Тогда
				Если ТипЗнч(Док) = Тип("ДокументОбъект.ЧекККМ") Тогда 
					Док.crm_idЧека = ИДЗаказа;
					Док.Записать();
				Иначе 
					ЧекОбъект = док.ПолучитьОбъект();
					ЧекОбъект.crm_idЧека = ИДЗаказа;
					ЧекОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Этап = "";
		Если Действие = "ВыгрузитьЧекСПЛ" Тогда 
			ВыгрузитьОплатуЧекаВCRM(Док, КлючCRM, ИмяСервера, КодМагазина, Этап);
		КонецЕсли;
	Иначе
		Сообщить("Трудности с выгрузкой чека: " + Док + " в retailCRM. ЧекККМ не выгружен", СтатусСообщения.Важное);	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьБонусныеБаллы (КодМагазина, Бонусы, id) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);	
    переменные.Вставить("bonuses", Формат(Бонусы,"ЧГ=0"));
	
	заказ = Новый Соответствие();
	
	заказ.Вставить("id", 		  id);
	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/loyalty/apply", переменные);
	ответ = UnJSONТест(ответ);
	
	Если ответ["success"] = Истина Тогда
		Сообщить("Бонусы списаны");
	Иначе
		Сообщить("Не удалось списать бонусы", СтатусСообщения.Важное);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьОплатуЧекаВCRM(Док, КлючCRM, ИмяСервера, КодМагазина, Этап) Экспорт  	
	
	СписокФормОплаты	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеФормОплаты");
	ФормыОплаты		= СписокФормОплаты.Найти(Док.ФормаОплаты,"ФормаОплаты");
	Если ФормыОплаты <> Неопределено Тогда
		КодТипаОплаты = ФормыОплаты.КодCRM;                                         
	КонецЕсли; 

	Если КодТипаОплаты = Неопределено Тогда
		Сообщить("В таблицу соответствия оплат для розницы не внесена форма оплаты. Оплата не будет выгружена в RetailCRM");
	Иначе
		Если док.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда 
			
			Платеж = Новый Соответствие();
			
			Платеж.Вставить("amount",		Формат(Док.СуммаДокумента,"ЧРД=.; ЧГ=0"));
			ПлатежЗ = Новый Соответствие();
			ПлатежЗ.Вставить("id",			СокрЛП(Формат(док.crm_idЧека, "ЧГ=0")));
			Платеж.Вставить("order", 		ПлатежЗ);
			Платеж.Вставить("type",			КодТипаОплаты);
			Платеж.Вставить("status",		"paid");
			
			перемен = Новый Соответствие();
			перемен.Вставить("payment",	JsonTest(Платеж,Новый ЗаписьJSON));
			перемен.Вставить("apiKey",	КлючCRM);
			перемен.Вставить("site",	КодМагазина);
			
			ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/create" , перемен);
			
			Если Найти(Ответ, "success"":true") > 0 Тогда
				Сообщить ("Выгружена оплата в RetailCRM");
				Этап = "Оплачен";
				ответ = UnJSONТест(ответ);
			Иначе
				Сообщить("Трудности с выгрузкой оплаты в RetailCRM");
			КонецЕсли;
		ИначеЕсли 
			док.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда 
			
			Для Каждого опл из Док.ОплатаПлатежнымиКартами Цикл 
				Платеж = Новый Соответствие();
				
				Платеж.Вставить("amount",		Формат(опл.Сумма,"ЧРД=.; ЧГ=0"));
				ПлатежЗ = Новый Соответствие();
				ПлатежЗ.Вставить("id",			СокрЛП(Формат(док.crm_idЧека, "ЧГ=0")));
				Платеж.Вставить("order", 		ПлатежЗ);
				Платеж.Вставить("type",			КодТипаОплаты);
				Платеж.Вставить("status",		"paid");
				
				перемен = Новый Соответствие();
				перемен.Вставить("payment",	JsonTest(Платеж,Новый ЗаписьJSON));
				перемен.Вставить("apiKey",	КлючCRM);
				перемен.Вставить("site",	КодМагазина);
				
				ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/create" , перемен);
				
				Если Найти(Ответ, "success"":true") > 0 Тогда
					Сообщить ("Выгружена оплата в RetailCRM");
					Этап = "Оплачен";
					ответ = UnJSONТест(ответ);
				Иначе
					Сообщить("Трудности с выгрузкой оплаты в RetailCRM");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыделитьСлово(ИсходнаяСтрока,Позиция) Экспорт 
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	Если Позиция = 3 Тогда 
	ВыделенноеСлово = СокрЛП(Буфер);
	Иначе 
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	КонецЕсли;
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ВернутьЧекВозврат (Чек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	
	
	Запрос.УстановитьПараметр("ЧекККМ", Чек);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	искЧек = Документы.ЧекККМВозврат.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		искЧек = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат искЧек;
	
КонецФункции

Процедура ВыгрузитьНомерЗаказаВCRM(док) Экспорт
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	
	//поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	КодМагазина = crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.Ссылка, СвойствоЗаказовМагазин);
	
	переменные.Вставить("site", КодМагазина);	
	
	СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	НомерЗаказа 	= crm_RetailCRMОбработка.УТ11_ПолучитьЗначениеСвойстваОбъекта(Док.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
	
	Если НомерЗаказа = "" Тогда 
		Сообщить ("Заказы, созданные в 1С, не выгружаются в retailCRM в рамках шаблонного решения.");
		Возврат
	КонецЕсли;
	
	заказ = Новый Соответствие();
	
	ПользПоля = Новый Соответствие();    
	ПользПоля.Вставить("nomer_zakaza_v1s",Строка(Док.Номер));
	ПользПоля.Вставить("update_api1c",ТекущаяДата());
	заказ.Вставить("customFields", ПользПоля);  
	
	переменные.Вставить("by",	 "id");	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	
	ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/" + НомерЗаказа + "/edit", переменные);
	
	ответ = UnJSONТест(ответ);
	
	Если ответ["success"] = Истина Тогда
		Сообщить("Номер заказа успешно выгружен в RetailCRM");
	Иначе
		Сообщить("Номер заказа не выгружен в RetailCRM", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьЧекВозвратВCRM(докВозврат) Экспорт

	Если докВозврат.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(докВозврат.ЧекККМ) Тогда
		Возврат;
	КонецЕсли;
	
	//нужно получить все чеки возвратов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
	|	ЧекККМВозвратТовары.Цена КАК Цена,
	|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
	|	МАКСИМУМ(ЧекККМВозвратТовары.Ссылка.ЧекККМ) КАК ЧекККМ,
	|	СУММА(ЧекККМВозвратТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
	|ГДЕ
	|	ЧекККМВозвратТовары.Ссылка.ЧекККМ = &ЧекККМ
	|	И ЧекККМВозвратТовары.Ссылка.Статус = &Статус
	|	И ЧекККМВозвратТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозвратТовары.Номенклатура,
	|	ЧекККМВозвратТовары.Характеристика,
	|	ЧекККМВозвратТовары.Цена";
	
	Запрос.УстановитьПараметр("ЧекККМ", докВозврат.ЧекККМ);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЧековККМ.Пробит);
	ТЗТоварыВозврат = Запрос.Выполнить().Выгрузить();
	
	ЧекККМ = докВозврат.ЧекККМ.ПолучитьОбъект();
	
	ТЗТовары = ЧекККМ.Товары.Выгрузить();
	ТЗЧек = ТЗТовары.Скопировать();
	ТЗЧек.Свернуть("Номенклатура, Характеристика, Цена", "Количество");
	ТЗЧек.Колонки.Добавить("Возврат");
	ТЗЧек.Колонки.Добавить("СкидкаНаЕдиницуТовара");
	
	//Для Каждого стрВозврат из докВозврат.Товары Цикл 
    Для Каждого стрВозврат из ТЗТоварыВозврат Цикл
		//в чеке ищем строки с товарами из возврата
		Если ЗначениеЗаполнено(стрВозврат.Характеристика) Тогда 
			НайденСтроки = ТЗЧек.НайтиСтроки(Новый Структура("Характеристика", стрВозврат.Характеристика));
		Иначе
			НайденСтроки = ТЗЧек.НайтиСтроки(Новый Структура("Номенклатура", стрВозврат.Номенклатура));  
		КонецЕсли;
			
		Если НайденСтроки <> Неопределено Тогда 
			//если строк несколько то нужно получить общее количество и сравнить с тем что в возврате
			Для Каждого стр из НайденСтроки Цикл
				Если стр.Количество = стрВозврат.Количество Тогда     //сравниваем кол в строке заказа и кол-во в строке возврата
					стр.Возврат = "returned";
					стр.СкидкаНаЕдиницуТовара = стр.Цена - стрВозврат.Цена;
				ИначеЕсли стр.Количество > стрВозврат.Количество Тогда   //когда вернули не все
					стр.Возврат = "chastichnyi-vozvrat";
					стр.Количество = стр.Количество - стрВозврат.Количество;
					//скидка на единицу товара
					стр.СкидкаНаЕдиницуТовара = стр.Цена - стрВозврат.Цена;
				ИначеЕсли стр.Количество < стрВозврат.Количество Тогда 
					Сообщить("Как можно вернуть больше чем купили?");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ИмяСервера 	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СвязьМагазина") = "Склад1С" Тогда 
		МагазинСклад = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("МагазинСклад");
		СоответствиеМагазинСклад = МагазинСклад.Найти(докВозврат.Склад, "Склад"); 
		Если СоответствиеМагазинСклад <> Неопределено Тогда
			КодМагазина = СоответствиеМагазинСклад.КодМагазина;					
		КонецЕсли;	
	Иначе
		МагазинОрганизация = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("МагазинОрганизация");
		СоответствиеМагазинОрганизация = МагазинОрганизация.Найти(докВозврат.Организация, "Организация"); 
		Если СоответствиеМагазинОрганизация <> Неопределено Тогда
			КодМагазина = СоответствиеМагазинОрганизация.КодМагазина;					
		КонецЕсли;	
	КонецЕсли;
		
	переменные.Вставить("site", КодМагазина);	
	
	НомерЗаказа 	= СокрЛП(Формат(ЧекККМ.crm_idЧека, "ЧГ=0"));

	Если НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда 
		Сообщить ("ЧекККМ отсутствует в RetailCRM");
		Возврат
	КонецЕсли;
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//

	товары = Новый Массив();			
	Для каждого стр из ТЗЧек Цикл
		
		товар = Новый Соответствие();
		
		//++ Работа с характеристиками
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			xmlIdТовара = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			xmlIdТовара = ?(ЗначениеЗаполнено(стр.Характеристика), 
			xmlIdТовара + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), xmlIdТовара);
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда
				xmlIdТовара = СокрЛП(" " + ЧекККМ.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;
			
		Иначе 
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = СокрЛП(стр.Номенклатура.Код);
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.Артикул);
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
		КонецЕсли;
		//-- Работа с характеристиками
		
		оффер = Новый Соответствие();
		оффер.Вставить(offers_id,		xmlIdТовара);
		товар.Вставить("offer",			оффер);
		товар.Вставить("productName",	стр.Номенклатура.Наименование);
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество);
		
		//Статус товара
		Статус = "";
		Если ЗначениеЗаполнено(стр.Возврат) Тогда
			Статус = стр.Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Статус) Тогда
			товар.Вставить("status",		Статус);
		КонецЕсли;
		
		товары.Добавить(товар);
		
	КонецЦикла;
	
	заказ = Новый Соответствие();
	
	заказ.Вставить("items", 		  товары);
	
	ВернутьЗаказ = Истина;
	Для Каждого Стр из ТЗЧек Цикл
		Если стр.Возврат = Неопределено или стр.Возврат <> "returned" Тогда
			ВернутьЗаказ = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Статус заказа
	Если ВернутьЗаказ Тогда 
		Статус = "return";
	Иначе 
		Статус = "partially-returned";
	КонецЕсли;
	
	Если Статус <> "" Тогда
		заказ.Вставить("status", 		Статус);
	КонецЕсли;

	заказ.Вставить("discountManualPercent", 0);
	заказ.Вставить("discountManualAmount", 0);
	
	переменные.Вставить("order", JsonTest(заказ, Новый ЗаписьJSON));
	переменные.Вставить("by",		"id");
	
	ответ = HTTPзапросPOSTАрхив(ИмяСервера 	,"/api/v5/orders/" + НомерЗаказа + "/edit", переменные);
		
	ответ = UnJSONТест(ответ);
	
	Если ответ["success"] = Истина Тогда
		Сообщить("Чек возврата успешно выгружен в retailCRM");
	Иначе
		Сообщить("Трудности с выгрузкой чека: " + докВозврат + " в retailCRM. ЧекККМ не выгружен", СтатусСообщения.Важное);	
	КонецЕсли;
	
	//редактируем оплату
	ответОплата = HTTPзапросGET(ИмяСервера,"/api/v5/orders?filter[ids][]=" + НомерЗаказа  + "&apiKey=" + КлючCRM);
	ответОплата = UnJSON(ответОплата);
	
	ТЗОплаты = ТЗТоварыВозврат.Скопировать();
	ТЗОплаты.Свернуть("ЧекККМ", "Сумма");
	СуммаВозврата = ТЗОплаты[0].Сумма;
	
	Если ответОплата["success"] = Истина Тогда 
		Если ответОплата["orders"].Количество() = 1 Тогда 
			Заказ = ответОплата["orders"][0];
			
			масОплат = Новый Массив();
			//если оплата 1, то редактируем ее или ставим статус "возвращен", если несколько то пока ничего не делаем
			Для Каждого стрОпл из Заказ["payments"] Цикл
				
				//изменяем статус оплаты
				
				перм = Новый Соответствие();
				перм.Вставить("apiKey", КлючCRM);
				перм.Вставить("site",	КодМагазина);
				
				Платеж = Новый Соответствие();
				Если ЧекККМ.СуммаДокумента = СуммаВозврата Тогда
					Платеж.Вставить("status", "returned");
					Платеж.Вставить("amount", ЧекККМ.СуммаДокумента);
				ИначеЕсли ЧекККМ.СуммаДокумента > СуммаВозврата Тогда
					Платеж.Вставить("amount", ЧекККМ.СуммаДокумента - СуммаВозврата);
				КонецЕсли;
				
				ПлатежЗ = Новый Соответствие();
				ПлатежЗ.Вставить("id",			НомерЗаказа);
				Платеж.Вставить("order", 		ПлатежЗ);
				
				перм.Вставить("payment",	JsonTest(Платеж, Новый ЗаписьJSON));
				
				ответ2 = HTTPзапросPOSTАрхив(ИмяСервера, "/api/v5/orders/payments/" + Формат(стрОпл.Значение["id"], "ЧГ=0") + "/edit", перм);
				Если Найти(Ответ2, "success"":true") > 0 Тогда
					Сообщить ("Изменен платеж № "  + стрОпл.Значение["id"] + " в RetailCRM");	
				Иначе
					Сообщить("Проблемы с изменение оплаты в RetailCRM");
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры






// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ИнициализацияОбщихНастроек() Экспорт
	ПланыВидовХарактеристик.КСП_НастройкиRetailCRM.ИнициализацияОбщихНастроек();
КонецПроцедуры

#Область ПолучениеНастроек

// Получение настроек по подсистеме Фулфилмент. 
// Пропишим в коде фиксированные настройки , потом в эту функцию 
// добавим вызов к регистру настроек по подсистемам , но его надо еще сделать 
// для ускорения прописываем настройки в коде . 
//
// Возвращаемое значение:
//   Структура   - Нимиенование настройки и ее значение. Получим все настройки подсистемы Фулфилмент. 
//
Функция ПолучитьНастройки(ГруппаНастроекПВХ = Неопределено) Экспорт 
	Настройки = новый Структура;
	                 
	СтрокаСоединения = ВРег(СтрокаСоединенияИнформационнойБазы());
	
	ЭтоРабочаяБаза = (Найти(СтрокаСоединения,"654ыфва654фыва654фыва654фыва654")>0);//todo Указать правильное значение

	Если ГруппаНастроекПВХ = Неопределено Тогда
		Если ЭтоРабочаяБаза Тогда
			// доступ с серверу FF
			Настройки = ПланыВидовХарактеристик.КСП_НастройкиRetailCRM.ПолучитьНастройкиГруппы("elis");
		иначе
			// тестовая база
			Настройки = ПланыВидовХарактеристик.КСП_НастройкиRetailCRM.ПолучитьНастройкиГруппы("20line");
		КонецЕсли;
	Иначе 
		
		Настройки = ПланыВидовХарактеристик.КСП_НастройкиRetailCRM.ПолучитьНастройкиГруппы(ГруппаНастроекПВХ.Наименование);
		
	КонецЕсли;
	

	Настройки.Вставить("ЭтоРабочаяБаза",ЭтоРабочаяБаза);

	Возврат Настройки;
КонецФункции // ()

#КонецОбласти


